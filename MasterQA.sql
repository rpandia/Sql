/*
SQLyog - Free MySQL GUI v5.15
Host - 5.0.22-community-nt : Database - lllllllllll
*********************************************************************
Server version : 5.0.22-community-nt
*/


SET NAMES utf8;
SET SQL_MODE='';
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';




/*Table structure for table `EdgeIdInfo` */
DROP TABLE IF EXISTS `EdgeIdInfo`;

CREATE TABLE `EdgeIdInfo` (
  `Edge_Id` Integer Primary Key,
  `State` Char(50) default NULL,
  KEY `Edge_Id` (`Edge_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `DuplicateEdgeIdInfo` */
DROP TABLE IF EXISTS `DuplicateEdgeIdInfo`;

CREATE TABLE `DuplicateEdgeIdInfo` (
  `Edge_Id` Integer default NULL, 
  `State` Char(150) default NULL,
  KEY `Edge_Id` (`Edge_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `luseIdIndia` */
DROP TABLE IF EXISTS `luseIdIndia`;

CREATE TABLE `luseIdIndia` (
  `Luse_Id` Integer default NULL, 
  `State` Char(150) default NULL,
  `tableNme` Char(150) default NULL,
  KEY `Luse_Id` (`Luse_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `luseIdIndia_Duplicate` */
DROP TABLE IF EXISTS `luseIdIndia_Duplicate`;
CREATE TABLE `luseIdIndia_Duplicate` (
  `Luse_Id` Integer default NULL, 
  `State` Char(150) default NULL,
  `tableNme` Char(150) default NULL,
  KEY `Luse_Id` (`Luse_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `LocIdIndia` */
DROP TABLE IF EXISTS `LocIdIndia`;
CREATE TABLE `LocIdIndia` (
  `Loc_Id` Char(250) default NULL, 
  `State` Char(150) default NULL,
  `tableNme` Char(150) default NULL,
  KEY `Loc_Id` (`Loc_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `LocIdIndia_Duplicate` */
DROP TABLE IF EXISTS `LocIdIndia_Duplicate`;
CREATE TABLE `LocIdIndia_Duplicate` (
  `Loc_Id` Char(250) default NULL, 
  `State` Char(150) default NULL,
  `tableNme` Char(150) default NULL,
  KEY `Loc_Id` (`Loc_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/*Table structure for table `category` */
DROP TABLE IF EXISTS `category`;

CREATE TABLE `category` (
  `Category` char(150) default NULL,
  `Subcategory` char(150) default NULL,
  `Category_Code` char(20) default NULL,
  KEY `Category_Code` (`Category_Code`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `CE_Cat`*/
DROP TABLE IF EXISTS `CE_Cat`;
CREATE TABLE `CE_Cat` (
  `CE_Cat` char(150) default NULL,
  KEY `CE_Cat` (`CE_Cat`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/*Table structure for table `error_msg` */
DROP TABLE IF EXISTS `error_msg`;

CREATE TABLE `error_msg` (
  `Table_Name` varchar(50) default NULL,
  `Row_Id` varchar(50) default NULL,
  `Col_Name` varchar(50) default NULL,
  `Actual_Value` varchar(50) default NULL,
  `EXP_VALUE` varchar(200) default NULL,
  `level` integer default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `expectionValues` */
DROP TABLE IF EXISTS `expectionValues`;

CREATE TABLE `expectionValues` (
/*  `Table_Name` varchar(50) default NULL,*/
  `Id` varchar(50) DEFAULT NULL,
  `FieldName` varchar(70) DEFAULT NULL,
  `Actualvalue` varchar(100) DEFAULT NULL,
  `ExpValue` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `National_Luse_Green_R` */
DROP TABLE IF EXISTS `National_Luse_Green_R`;
CREATE TABLE `National_Luse_Green_R` (		
`Luse_Nme` Char(100) default NULL,
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`Luse_Id` Integer Primary Key,
`Cnt_Nme`  Char(5) default NULL,/*Chng_Dt_Length*/
`Grn_Id`   Char(12) default NULL,/*Chng_Dt_Length*/
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`stt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`CE_Nme` Char(100) default NULL,
`CE_Cat` Char(3) default NULL,/*Chng_Dt_Length*/
`Horizon` Char(1) default NULL,/*Chng_Dt_Length*/
`Priority` Integer default NULL,  
`Sub_Type`	Char(3) default NULL/*Chng_Dt_Length*/
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `National_Luse_Water_RLYYMMDD` */
DROP TABLE IF EXISTS `National_Luse_Water_RL`;

CREATE TABLE `National_Luse_Water_RL` (	
`Luse_Nme` Char(100) default NULL,
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`Luse_Id` Integer Primary Key,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Wtr_Id` Char(12) default NULL,/*Chng_Dt_Length*/
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`stt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`CE_Nme` Char(100) default NULL,
`CE_Cat` Char(3) default NULL,/*Chng_Dt_Length*/
`Horizon` Char(1) default NULL,/*Chng_Dt_Length*/
`Priority` Integer default NULL,
`Sub_Type`	Char(3) default NULL/*Chng_Dt_Length*/

) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `National_Luse_Other_R` */
DROP TABLE IF EXISTS `National_Luse_Other_R`;
		
CREATE TABLE `National_Luse_Other_R` (
`Luse_Nme` Char(100) default NULL,
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`Luse_Id` Integer Primary Key,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Oth_Id` Char(12) default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`stt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`CE_Nme` Char(100) default NULL,
`CE_Cat` Char(3) default NULL,/*Chng_Dt_Length*/
`Horizon` Char(1) default NULL,/*Chng_Dt_Length*/
`Priority` Integer default NULL, 
`Sub_Type`	Char(3) default NULL,/*Chng_Dt_Length*/

KEY `Luse_Id` (`Luse_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `City_Luse_RL` */
DROP TABLE IF EXISTS `City_Luse_RL`;
CREATE TABLE `City_Luse_RL` (	
`Luse_Nme` Char(100) default NULL,
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`Luse_Id` Integer Primary Key,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Wtr_Id` Char(15) default NULL,/*Chng_Dt_Length*/
`City_Nme` Char(50) default NULL,
`City_Id` Integer default NULL,/*Chng_Dt_Length*/
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`stt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`CE_Nme` Char(100) default NULL,
`CE_Cat` Char(3) default NULL,/*Chng_Dt_Length*/
`Horizon` Char(1) default NULL,/*Chng_Dt_Length*/
`Priority` Integer default NULL,
`Sub_Type`	Char(3) default NULL,/*Chng_Dt_Length*/
KEY `Luse_Id` (`Luse_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `National_State_Nav_RYYMMDD` */
DROP TABLE IF EXISTS `National_State_Nav_R`;/* Table renamed */
		
CREATE TABLE `National_State_Nav_R` (	
`nStt_Nme` Char(25) default NULL,/* column renamed */ /*Chng_Dt_Length*/
`nStt_Alt` Char(25) default NULL,/* column renamed *//*Chng_Dt_Length*/
`nStt_Id` Char(2) Primary Key,/* column renamed *//*Chng_Dt_Length*/
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
  KEY `nStt_Id` (`nStt_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `National_State_Gis_RYYMMDD` */
DROP TABLE IF EXISTS `National_State_Gis_R`;/* Table renamed */
		
CREATE TABLE `National_State_Gis_R` (	
`Stt_Nme` Char(25) default NULL,/* column renamed *//*Chng_Dt_Length*/
`Stt_Alt` Char(25) default NULL,/* column renamed *//*Chng_Dt_Length*/
`Stt_Id` Char(2) Primary Key,/* column renamed *//*Chng_Dt_Length*/
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
  KEY `Stt_Id` (`Stt_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/*Table structure for table `National_District_RYYMMDD` */
DROP TABLE IF EXISTS `National_District_R`;

CREATE TABLE `National_District_R` (		
`Dst_Nme` Char(40) default NULL,/*Chng_Dt_Length*/
`Dst_Alt` Char(40) default NULL,/*Chng_Dt_Length*/
`Dst_Id` Char(5) Primary Key,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_Id` Char(2) default NULL,/*Chng_Dt_Length*/
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
KEY `Dst_Id` (`Dst_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/*Table structure for table `National_Village_Nav_P` */
DROP TABLE IF EXISTS `National_Village_Nav_P`;/* Table renamed */
	
CREATE TABLE `National_Village_Nav_P` (		
`Vlg_Nme` Char(60) default NULL,
`Vlg_Alt` Char(60) default NULL,
`Vlg_Id` Char(16) Primary Key,/*Chng_Dt_Length*/
`Dst_Nme` Char(40) default NULL,/*Chng_Dt_Length*/
`Dst_Id` Char(5) default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_Id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL, /*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL, 
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Tot_P` integer default NULL,
`Source` Char(50) default NULL,/*Chng_Dt_Length*/
`Dt_Source` Char(6) default NULL,/*Chng_Dt_Length*/
`Priority` Integer default NULL,
`Sub_Type`	Char(15) default NULL,/*Chng_Dt_Length*/
KEY `Vlg_Id` (`Vlg_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `National_Vill_EdgeId_P` */
DROP TABLE IF EXISTS `National_Vill_EdgeId_P`;		
CREATE TABLE `National_Vill_EdgeId_P` (
`Vlg_Id` Char(20) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Edge_Id` integer default NULL,
KEY `Vlg_Id` (`Vlg_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `City_Jn_P` */
DROP TABLE IF EXISTS `City_Jn_P`;
		
CREATE TABLE `City_Jn_P` (	
`Junction_id` Integer Primary Key,
`Elevation`	Integer default NULL,/*Chng_Dt_Length*/
`Jncttyp` Integer default NULL,
`nStt_Nme`	Char(25) default NULL,/*Chng_Dt_Length*/
`Divider_Cut` Integer default NULL,
`Rly_Phatak` Integer default NULL,
`Jn_Nme` Char(50) default NULL,
`Toll_booth` Char(1) default NULL,
`Toll_Fee` Float default NULL,
KEY `Junction_id` (`Junction_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

	
/*Table structure for table `City_Area_R` */
DROP TABLE IF EXISTS `City_Area_R`;

CREATE TABLE `City_Area_R` (
`City_Nme` Char(50) default NULL,
`City_Alt` Char(50) default NULL,
`City_Id` Integer Primary Key,
`Ftr_Cry` Char(2) default NULL,/*Chng_Dt_Length*/
`Dst_Nme` Char(40) default NULL,/*Chng_Dt_Length*/
`Dst_Id` Char(5) default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_Id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Cens_id` Char(20) default NULL,/*Chng_Dt_Length*/
`City_Alt2`	Char(50) default NULL,
`City_Alt3`	Char(50) default NULL,
`Tot_P` integer default NULL,
`Priority` SmallInt default NULL,/*Chng_Dt_Length*/
`Sub_Type`	Char(15) default NULL,/*Chng_Dt_Length*/
`Sec_Sta`	Char(2) default NULL,/*Chng_Dt_Length*/
`V_intro`	Char(5) default NULL,/*Chng_Dt_Length*/
`V_Upd`	Char(20) default NULL,/*Chng_Dt_Length*/
`V_Survey` Char(20) default NULL,/*Chng_Dt_Length*/
`Type` Char(4) default NULL,/*Chng_Dt_Length*/
KEY `City_Id` (`City_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `City_Railtrk_L` */
DROP TABLE IF EXISTS `City_Railtrk_L`;
	
CREATE TABLE `City_Railtrk_L` (	
`Trk_Nme` Char(50) default NULL,
`Ftr_Cry` Char(4) default NULL,/*Chng_Dt_Length*/
`Trk_Id` Char(10) Primary Key,
`City_Nme` Char(50) default NULL,
`City_id` Integer	default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_id` Char(2) default NULL,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Trk_Lvl` Char(10) default NULL,/*Chng_Dt_Length*/

KEY `Trk_Id` (`Trk_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/*Table structure for table `City_Loc_R` */
DROP TABLE IF EXISTS `City_Loc_R`;

CREATE TABLE `City_Loc_R` (
`Loc_Nme` Char(100) default NULL,
`OrgLoc_Nme` Char(100) default NULL,
`Loc_Alt` Char(100) default NULL,
`Loc_id` Char(15) Primary Key,/*Chng_Dt_Length*/
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`City_Nme` Char(50) default NULL,
`City_id` Integer default NULL,
`Dst_Nme` Char(40) default NULL,/*Chng_Dt_Length*/
`Dst_Id` Char(5) default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_id` Char(2) default NULL,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Priority` Integer default NULL,
`Sub_Type`	Char(15) default NULL,/*Chng_Dt_Length*/

KEY `Loc_id` (`Loc_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `City_Loc_P` */
DROP TABLE IF EXISTS `City_Loc_P`;
	
CREATE TABLE `City_Loc_P` (
`Loc_Nme` Char(100) default NULL,
`LblLoc_Nme` Char(50) default NULL,/*Chng_Dt_Length*/
`OrgLoc_Nme` Char(100) default NULL,
`Loc_Alt` Char(100) default NULL,
`Loc_Id` Char(15)  Primary Key,/*Chng_Dt_Length*/
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`City_Nme` Char(50) default NULL,
`City_id` Integer default NULL,
`Dst_Nme` Char(40) default NULL,/*Chng_Dt_Length*/
`Dst_Id` Char(5) default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_id` Char(2) default NULL,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Pin` Char(6) default NULL,
`Source` Char(50) default NULL,/*Chng_Dt_Length*/
`Dt_Source` Char(6) default NULL,/*Chng_Dt_Length*/
`Alias_1` Char(70) default NULL,/*Chng_Dt_Length*/
`Alias_2` Char(70) default NULL,/*Chng_Dt_Length*/
`Alias_3` Char(70) default NULL,/*Chng_Dt_Length*/
`Alias_4` Char(70) default NULL,/*Chng_Dt_Length*/
`Edge_Id` integer default NULL,
`Edge_side` char(1) default NULL,
`Sec_Sta` Char(2) default NULL,/*Chng_Dt_Length*/
`Priority` Smallint default NULL,/*Chng_Dt_Length*/
`Sub_Type`	Char(15) default NULL,/*Chng_Dt_Length*/
KEY `Loc_Id` (`Loc_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/*Table structure for table `City_Loc_EdgeId_P` */
DROP TABLE IF EXISTS `City_Loc_EdgeId_P`;		
CREATE TABLE `City_Loc_EdgeId_P` (
`Loc_Id` Char(20) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Edge_Id` integer default NULL,
KEY `Loc_Id` (`Loc_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `City_Subl_P` */
DROP TABLE IF EXISTS `City_Subl_P`;
		
CREATE TABLE `City_Subl_P` (
`Subl_Nme` Char(80) default NULL,/*Chng_Dt_Length*/
`LblSub_Nme` Char(80) default NULL,/*Chng_Dt_Length*/
`OrgSub_Nme` Char(80) default NULL,/*Chng_Dt_Length*/
`Subl_Alt` Char(80) default NULL,/*Chng_Dt_Length*/
`Subl_Id` Char(15) Primary Key,/*Chng_Dt_Length*/
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`Loc_Nme` Char(100) default NULL,
`Loc_Id` Char(15) default NULL,/*Chng_Dt_Length*/
`City_Nme` Char(50) default NULL,
`City_id` Integer default NULL,
`Dst_Nme` Char(40) default NULL,/*Chng_Dt_Length*/
`Dst_Id` Char(5) default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_id` Char(2) default NULL,
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Pin` Char(6) default NULL,
`Source` Char(50) default NULL,/*Chng_Dt_Length*/
`Dt_Source`	Char(6) default NULL,/*Chng_Dt_Length*/
`Alias_1` Char(80) default NULL,/*Chng_Dt_Length*/
`Alias_2` Char(80) default NULL,/*Chng_Dt_Length*/
`Alias_3` Char(80) default NULL,/*Chng_Dt_Length*/
`Alias_4` Char(80) default NULL,/*Chng_Dt_Length*/
`Edge_Id` integer default NULL,
`Edge_side` char(1) default NULL,
`Sec_Sta` Char(2) default NULL,/*Column renamed*//*Chng_Dt_Length*/
`Priority` Smallint default NULL,/*Chng_Dt_Length*/
`Sub_Type`	Char(20) default NULL,/*Chng_Dt_Length*/

KEY `Subl_Id` (`Subl_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `City_Subl_EdgeId_P` */
DROP TABLE IF EXISTS `City_Subl_EdgeId_P`;		
CREATE TABLE `City_Subl_EdgeId_P` (
`Subl_Id` Char(20) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Edge_Id` integer default NULL,
KEY `Subl_Id` (`Subl_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

	/*Table structure for table `City_Roads_ap_main` */
DROP TABLE IF EXISTS `City_Roads_AP_Main`;
		
CREATE TABLE `City_Roads_AP_Main` (	
`Road_Nme` Char(100) default NULL,
`Road_Bse` Char(100) default NULL,
`Road_Typ` Char(15) default NULL,/*Chng_Dt_Length*/
`Typ_Pos` Char(1) default NULL,/*Chng_Dt_Length*/
`Road_Alt` Char(80) default NULL,/*Chng_Dt_Length*/
`Route_No` Char(8) default NULL,/*Chng_Dt_Length*/
`Ftr_Cry` Char(3) default NULL,/*Chng_Dt_Length*/
`Fow_Prev` Char(2) default NULL,
`Fow_Nme` Char(50) default NULL,
`From_Elev` Integer default NULL,
`To_Elev` Integer default NULL,
`Edge_Id` Integer Primary Key,
`Road_Id` Char(10) default NULL,/*Chng_Dt_Length*/
`Spd_Lmt` Integer default NULL,/*Chng_Dt_Length*/
`PubvsPvt` Integer	default NULL,/*Chng_Dt_Length*/
`PvdvsUvd` Integer	default NULL,/*Chng_Dt_Length*/
`Motorable`	Char(1) default NULL,/*Chng_Dt_Length*/
`Routable` Char(1) default NULL,
`Frc` Integer default NULL,
`Fow` Smallint default NULL,/*Chng_Dt_Length*/
`Exp` char(1) default NULL,/*Chng_Dt_Length*/
/*`HR_Road_Name` Char(100) default NULL,*/
`Pop_Name` Char(80) default NULL,/*Chng_Dt_Length*/
`Road_Subloc` Char(100) default NULL,
`Frc_M` Char(1) default NULL,/*Chng_Dt_Length*/
`Routable_M` char(2) default NULL,
`PJ` Char(2) default NULL,
`MD` Integer default NULL,
`Proc_Stat` Char(2) default NULL,/*Chng_Dt_Length*/
`Proc_Date` Char(6) default NULL,
`One_Way` Char(2) default NULL,
`BP_Cry` Char(2) default NULL,
`BP_Nme` Char(50) default NULL,
`Spd_m` Integer default NULL,
`Spl_nme` Char(80) default NULL,/*Chng_Dt_Length*/
`Toll` Char(2) default NULL,/*Chng_Dt_Length*/
`Toll_nme` Char(60) default NULL,/*Chng_Dt_Length*/
`Pmbjp_type` Char(2) default NULL,/*Chng_Dt_Length*/
`Md_Grp_Id` Integer default NULL,
KEY `Edge_Id` (`Edge_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


/*Table structure for table `City_Roads_ap` */
DROP TABLE IF EXISTS `City_Roads_AP`;
		
CREATE TABLE `City_Roads_AP` (	
`Edge_Id` Integer  Primary Key,
`From_Junction`	Integer	default NULL,
`To_Junction` Integer default NULL,
`From_Elev`	Integer	default NULL,
`To_Elev` Integer default NULL,
/*`L_nStt`	Char(50) default NULL,
`R_nStt`	Char(50) default NULL,
`L_Dist` Char(50) default NULL,
`R_Dist` Char(50) default NULL,
`L_City` Char(50) default NULL,
`R_City` Char(50) default NULL,
`L_Loc`	Char(100) default NULL,
`R_Loc`	Char(100) default NULL,*/
`Cnt_Nme` Char(5) default NULL,/*Chng_Dt_Length*/
`Divider` Char(1) default NULL,
`One_Way` Char(2) default NULL,
`City_Nme` Char(50) default NULL,/*Chng_Dt_Length*/
`nStt_Nme`	Char(25) default NULL,/*Chng_Dt_Length*/
`Dig_Stat` Char(10) default NULL,
`Road_Subloc` Char(100) default NULL,
`Subl_Id` Char(15) default NULL,/*Chng_Dt_Length*/
`Loc_Id` Char(15) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,
`L_nStt_Id` Char(2) default NULL,
`R_nStt_Id` Char(2) default NULL,
`L_Dist_Id`	Char(5) default NULL,
`R_Dist_Id`	Char(5) default NULL,
`L_City_Id`	Integer default NULL,
`R_City_Id` Integer default NULL,
`L_Loc_Id` Char(15) default NULL,/*Chng_Dt_Length*/
`R_Loc_Id` Char(15) default NULL,/*Chng_Dt_Length*/
`National` Char(10) default NULL,/*Chng_Dt_Length*/
`City_Id` Integer default NULL,
`L_Pin` Char(6) default NULL,/*Chng_Dt_Length*/
`R_Pin` Char(6) default NULL,/*Chng_Dt_Length*/
`Toll` Char(2) default NULL,/*Chng_Dt_Length*/
`F_Spd_lmt` Integer default NULL,
`T_Spd_lmt` Integer default NULL,
`Ln_Cat` Integer default NULL,/*Chng_Dt_Length*/
`F_Ln` Integer default NULL,/*Chng_Dt_Length*/
`T_Ln` Integer default NULL,/*Chng_Dt_Length*/
`Fow_Prev` Char(2) default NULL,
`Parking` Char(1) default NULL,
`VTS` Char(10) default NULL,
`Pos_Spd_Lmt_M` Char(3) default NULL,/*Chng_Dt_Length*/
`L_Stt_Id` Char(2) default NULL,
`R_Stt_Id` Char(2) default NULL,
KEY `Edge_Id` (`Edge_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


DROP TABLE IF EXISTS `City_Roads_BR`;
Create Table City_Roads_BR like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_BR_Main`;
Create Table City_Roads_BR_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_CH`;
Create Table City_Roads_CH like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_CH_Main`;
Create Table City_Roads_CH_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_CG`;
Create Table City_Roads_CG like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_CG_Main`;
Create Table City_Roads_CG_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_DN`;
Create Table City_Roads_DN like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_DN_Main`;
Create Table City_Roads_DN_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_DL`;
Create Table City_Roads_DL like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_DL_Main`;
Create Table City_Roads_DL_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_GA`;
Create Table City_Roads_GA like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_GA_Main`;
Create Table City_Roads_GA_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_GJ`;
Create Table City_Roads_GJ like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_GJ_Main`;
Create Table City_Roads_GJ_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_HP`;
Create Table City_Roads_HP like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_HP_Main`;
Create Table City_Roads_HP_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_HR`;
Create Table City_Roads_HR like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_HR_Main`;
Create Table City_Roads_HR_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_JH`;
Create Table City_Roads_JH like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_JH_Main`;
Create Table City_Roads_JH_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_JK`;
Create Table City_Roads_JK like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_JK_Main`;
Create Table City_Roads_JK_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_KA`;
Create Table City_Roads_KA like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_KA_Main`;
Create Table City_Roads_KA_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_KL`;
Create Table City_Roads_KL like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_KL_Main`;
Create Table City_Roads_KL_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_MP`;
Create Table City_Roads_MP like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_MP_Main`;
Create Table City_Roads_MP_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_MH`;
Create Table City_Roads_MH like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_MH_Main`;
Create Table City_Roads_MH_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_NE`;
Create Table City_Roads_NE like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_NE_Main`;
Create Table City_Roads_NE_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_OR`;
Create Table City_Roads_OR like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_OR_Main`;
Create Table City_Roads_OR_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_PY`;
Create Table City_Roads_PY like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_PY_Main`;
Create Table City_Roads_PY_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_PB`;
Create Table City_Roads_PB like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_PB_Main`;
Create Table City_Roads_PB_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_RJ`;
Create Table City_Roads_RJ like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_RJ_Main`;
Create Table City_Roads_RJ_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_TN`;
Create Table City_Roads_TN like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_TN_Main`;
Create Table City_Roads_TN_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_UA`;
Create Table City_Roads_UA like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_UA_Main`;
Create Table City_Roads_UA_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_UP`;
Create Table City_Roads_UP like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_UP_Main`;
Create Table City_Roads_UP_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_WB`;
Create Table City_Roads_WB like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_WB_Main`;
Create Table City_Roads_WB_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_PY`;
Create Table City_Roads_PY like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_PY_Main`;
Create Table City_Roads_PY_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_AN`;
Create Table City_Roads_AN like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_AN_Main`;
Create Table City_Roads_AN_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_LD`;
Create Table City_Roads_LD like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_LD_Main`;
Create Table City_Roads_LD_Main like City_Roads_AP_Main;
DROP TABLE IF EXISTS `City_Roads_DD`;
Create Table City_Roads_DD like City_Roads_AP;
DROP TABLE IF EXISTS `City_Roads_DD_Main`;
Create Table City_Roads_DD_Main like City_Roads_AP_Main;

/*Table structure for table `AN_Poi_P` */
DROP TABLE IF EXISTS `AN_Poi_P`;
		
CREATE TABLE `AN_Poi_P` (	
`Poi_Nme` Char(100) default NULL,
`Poi_Id`  Char(20) Primary Key,
`Ftr_Cry` Char(6) default NULL,/*Chng_Dt_Length*/
`Cat_Dec` Char(50) default NULL,
`Loc_Nme` Char(100) default NULL,/*Chng_Dt_Length*/
`Loc_Id` Char(15) default NULL,/*Chng_Dt_Length*/
`City_Nme` Char(50) default NULL,/*Chng_Dt_Length*/
`City_Id` Integer default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_Id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,
`Poplr_Nme` Char(100) default NULL,
`Alias_1` Char(50) default NULL,
`Alias_2` Char(50) default NULL,
`Alias_3` Char(50) default NULL,
`Tel` Char(50) default NULL,
`Pin` Char(6) default NULL,/*Chng_Dt_Length*/
`Fax` Char(50) default NULL,
`SrcNew` Char(50) default NULL,/*Chng_Dt_Length*/
`Dt_SrcNew` Char(6) default NULL,/*Chng_Dt_Length*/
`SrcMvd` Char(100) default NULL,/*Chng_Dt_Length*/
`Dt_SrcMvd` Char(6) default NULL,/*Chng_Dt_Length*/
`SrcDat` Char(100) default NULL,/*Chng_Dt_Length*/
`Dt_SrcDat`	Char(6) default NULL,/*Chng_Dt_Length*/
`PIP_Id` Char(20) default NULL,
`PIP_Typ` Integer default NULL,
`Edge_ID` Integer default NULL,
`Addr_City`	Char(50) default NULL,
`Entry_Lon`	Decimal(20,10) default NULL,
`Entry_Lat`	Decimal(20,10) default NULL,
`Addr_Id` Integer default NULL,
`Sec_sta` Char(2) default NULL,/*Chng_Dt_Length*/
`Sec_sta_Poplr` Char(2) default NULL,/*Chng_Dt_Length*/
`Vicinity` Integer default NULL,
`Priority` Integer default NULL,
`Sub_Type` Char(50) default NULL,
`Address` Char(200)  default NULL,
`Email` Char(50)  default NULL,
`Web` Char(75)  default NULL,/*Chng_Dt_Length*/
`Geo_Lvl` Char(20)  default NULL,
`Irr_Poi` Char(3)  default NULL,/*Chng_Dt_Length*/
`Person` Char(20)  default NULL,
`Edge_Side` Char(1)  default NULL,
`Imp_Poi` Char(10)  default NULL,
`O_Info` Char(50)  default NULL,
`Old_Id` Char(50)  default NULL,
`Poi_Lvl` Char(50)  default NULL,
`Frz_Poi` Char(50)  default NULL,
`Fbk_Src` Char(100)  default NULL,
`Remark` Char(100)  default NULL,
`Keyword` Char(150)  default NULL,
`Version` Char(5)  default NULL,/*Chng_Dt_Length*/
`Brand_Nme` Char(50)  default NULL,
`Brand_Typ` Char(30)  default NULL,/*Chng_Dt_Length*/
`Landmark` Char(2)  default NULL,
`Rwtb_Nme` Char(50)  default NULL,
`Star_Rating` char(5) default NULL,/*Chng_Dt_Length*/
KEY `Poi_Id` (`Poi_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;



DROP TABLE IF EXISTS AP_Poi_P;
DROP TABLE IF EXISTS BR_Poi_P;
DROP TABLE IF EXISTS CG_Poi_P;
DROP TABLE IF EXISTS CH_Poi_P;
DROP TABLE IF EXISTS DL_Poi_P;
DROP TABLE IF EXISTS DN_Poi_P;
DROP TABLE IF EXISTS GA_Poi_P;
DROP TABLE IF EXISTS GJ_Poi_P;
DROP TABLE IF EXISTS HP_Poi_P;
DROP TABLE IF EXISTS HR_Poi_P;
DROP TABLE IF EXISTS JH_Poi_P;
DROP TABLE IF EXISTS JK_Poi_P;
DROP TABLE IF EXISTS KA_Poi_P;
DROP TABLE IF EXISTS KL_Poi_P;
DROP TABLE IF EXISTS LD_Poi_P;
DROP TABLE IF EXISTS MH_Poi_P;
DROP TABLE IF EXISTS MP_Poi_P;
DROP TABLE IF EXISTS OR_Poi_P;
DROP TABLE IF EXISTS PB_Poi_P;
DROP TABLE IF EXISTS PY_Poi_P;
DROP TABLE IF EXISTS RJ_Poi_P;
DROP TABLE IF EXISTS TN_Poi_P;
DROP TABLE IF EXISTS UA_Poi_P;
DROP TABLE IF EXISTS UP_Poi_P;
DROP TABLE IF EXISTS WB_Poi_P;
DROP TABLE IF EXISTS NE_Poi_P;
DROP TABLE IF EXISTS DD_Poi_P;

Create Table AP_Poi_P like AN_Poi_P;
Create Table BR_Poi_P like AN_Poi_P;
Create Table CG_Poi_P like AN_Poi_P;
Create Table CH_Poi_P like AN_Poi_P;
Create Table DL_Poi_P like AN_Poi_P;
Create Table DN_Poi_P like AN_Poi_P;
Create Table GA_Poi_P like AN_Poi_P;
Create Table GJ_Poi_P like AN_Poi_P;
Create Table HP_Poi_P like AN_Poi_P;
Create Table HR_Poi_P like AN_Poi_P;
Create Table JH_Poi_P like AN_Poi_P;
Create Table JK_Poi_P like AN_Poi_P;
Create Table KA_Poi_P like AN_Poi_P;
Create Table KL_Poi_P like AN_Poi_P;
Create Table MH_Poi_P like AN_Poi_P;
Create Table MP_Poi_P like AN_Poi_P;
Create Table OR_Poi_P like AN_Poi_P;
Create Table PB_Poi_P like AN_Poi_P;
Create Table PY_Poi_P like AN_Poi_P;
Create Table RJ_Poi_P like AN_Poi_P;
Create Table TN_Poi_P like AN_Poi_P;
Create Table UA_Poi_P like AN_Poi_P;
Create Table UP_Poi_P like AN_Poi_P;
Create Table WB_Poi_P like AN_Poi_P;
Create Table NE_Poi_P like AN_Poi_P;
Create Table LD_Poi_P like AN_Poi_P;
Create Table DD_Poi_P like AN_Poi_P;

/*Table structure for table `National_State_Island_RYYMMDD` */
DROP TABLE IF EXISTS `National_State_Island_R`;

CREATE TABLE `National_State_Island_R` (		
`Island_Nme` Char(50) default NULL,
`nStt_Nme` Char(50) default NULL,
`nStt_Id` Char(2) default NULL,
`Cnt_Nme` Char(50) default NULL,
`Type` Char(10) default NULL,
KEY `nStt_Id` (`nStt_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*nav table, cnt_nme*/

/*Table structure for table `Bifurcation_PYYMMDD` */
DROP TABLE IF EXISTS `Bifurcation_P`; 

CREATE TABLE `Bifurcation_P` (	
`Bfr_Id` Integer Primary Key,
`PARENTID`	Integer default NULL, /*Chng_Dt_Length*/
`JUNCTIONID`Integer default NULL,/*Chng_Dt_Length*/
`CHILDID_1`	Integer default NULL,/*Chng_Dt_Length*/
`CHILDID_2`	Integer default NULL,/*Chng_Dt_Length*/
`CHILDID_3`	Integer default NULL,/*Chng_Dt_Length*/
`CHILDID_4`	Integer default NULL,/*Chng_Dt_Length*/
`nStt_Nme`	CHAR(25) default NULL,/*Chng_Dt_Length*/
KEY `Bfr_Id` (`Bfr_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `XYZ_Turn_Table_P` */
DROP TABLE IF EXISTS `XYZ_Turn_Table_P`;

CREATE TABLE `XYZ_Turn_Table_P` (	
`TT_Id` Integer Primary Key,
`FrmEdgeId`	Integer default NULL,
`ToEdgeId`	Integer default NULL,
`Junction`	Integer default NULL,
`Source`	Char(50) default NULL,
`nStt_Nme`	Char(25) default NULL,/*Chng_Dt_Length*/
KEY `FrmEdgeId` (`FrmEdgeId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `Complex_Turn_Table` */
DROP TABLE IF EXISTS `Complex_Turn_Table`;

CREATE TABLE `Complex_Turn_Table` (	
`CTT_ID` Integer Primary Key,
`PARENTID` Integer default NULL,
`CHILDID_1` Integer default NULL,
`CHILDID_2` Integer default NULL,
`CHILDID_3` Integer default NULL,
`CHILDID_4` Integer default NULL,
`DestID` Integer default NULL,
`nStt_Nme` Char (25) default NULL,/*Chng_Dt_Length*/
`Source` Char (100) default NULL,
KEY `CTT_ID` (`CTT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;



/*Table structure for table `City_Centre_P` */
DROP TABLE IF EXISTS `City_Centre_P`;

CREATE TABLE `City_Centre_P` (	
`City_Nme`	Char(50) default NULL,
`City_Alt`	Char(50) default NULL,
`City_Id`	Integer  Primary Key,
`Stt_Nme`	Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_Id`	Char(2) default NULL,
`nStt_Nme`	Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id`	Char(2) default NULL,
`Cnt_Nme`	Char(5) default NULL,/*Chng_Dt_Length*/
`Tot_P`	Integer default NULL,
`Priority`	Smallint default NULL,/*Chng_Dt_Length*/
`Sub_Type`	Char(15) default NULL,/*Chng_Dt_Length*/
KEY `City_Id` (`City_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `City_Centre_EdgeId_P` */
DROP TABLE IF EXISTS `City_Centre_EdgeId_P`;		
CREATE TABLE `City_Centre_EdgeId_P` (
`City_Id` Char(20) default NULL,
`nStt_Nme` Char(50) default NULL,
`Edge_Id` integer default NULL,
KEY `City_Id` (`City_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `AP_Building_RP` */
DROP TABLE IF EXISTS AP_Building_RP;

CREATE TABLE `AP_Building_RP` (
`Add_Id` Char (20)  Primary Key,
`Dlv_Bldg_Nme` Char (100) default NULL,
`Dlv_Bldg_Num` Char (20) default NULL,
`Road_Nme` Char (100) default NULL,
`Subl_Nme` Char (80) default NULL,/*Chng_Dt_Length*/
`Subl_Id` Char (15) default NULL,/*Chng_Dt_Length*/
`Loc_Nme` Char (100) default NULL,
`Loc_Id` Char (15) default NULL,/*Chng_Dt_Length*/
`Edge_Id` Integer default NULL,
`Edge_side` Char (1) default NULL,
`City_Nme` Char (50) default NULL,
`City_Id` Integer default NULL,
`nStt_Nme` Char (25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char (2) default NULL,
`build_ht` Integer default NULL,
`Pin` Char (6) default NULL,
`Poi_Id` Char (15) default NULL,/*Chng_Dt_Length*/
`Dup` Char (1) default NULL,
`Dup_Type` Char (10) default NULL,
`Link_Edge` Char (1) default NULL,
`Separator` Char (10) default NULL,
`Prefix` Char (20) default NULL,
`Deliverable` Char (1) default NULL,
`Stt_Nme` Char (25) default NULL,/*Chng_Dt_Length*/
`Stt_Id` Char (2) default NULL,
`Edge_Id_Addr` Integer default NULL,
`Edge_Side_Addr` Char (1) default NULL,
`Entry_Lon`	Decimal(20,10) default NULL,
`Entry_Lat`	Decimal(20,10) default NULL,
  KEY `Add_Id` (`Add_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

DROP TABLE IF EXISTS AN_Building_RP;
DROP TABLE IF EXISTS BR_Building_RP;
DROP TABLE IF EXISTS CH_Building_RP;
DROP TABLE IF EXISTS CG_Building_RP;
DROP TABLE IF EXISTS DN_Building_RP;
DROP TABLE IF EXISTS DL_Building_RP;
DROP TABLE IF EXISTS GA_Building_RP;
DROP TABLE IF EXISTS GJ_Building_RP;
DROP TABLE IF EXISTS HP_Building_RP;
DROP TABLE IF EXISTS HR_Building_RP;
DROP TABLE IF EXISTS JH_Building_RP;
DROP TABLE IF EXISTS JK_Building_RP;
DROP TABLE IF EXISTS KA_Building_RP;
DROP TABLE IF EXISTS KL_Building_RP;
DROP TABLE IF EXISTS MP_Building_RP;
DROP TABLE IF EXISTS MH_Building_RP;
DROP TABLE IF EXISTS NE_Building_RP;
DROP TABLE IF EXISTS OR_Building_RP;
DROP TABLE IF EXISTS PN_Building_RP;
DROP TABLE IF EXISTS PB_Building_RP;
DROP TABLE IF EXISTS RJ_Building_RP;
DROP TABLE IF EXISTS TN_Building_RP;
DROP TABLE IF EXISTS UA_Building_RP;
DROP TABLE IF EXISTS UP_Building_RP;
DROP TABLE IF EXISTS WB_Building_RP;
DROP TABLE IF EXISTS PY_Building_RP;
DROP TABLE IF EXISTS LD_Building_RP;
DROP TABLE IF EXISTS DD_Building_RP;

Create Table AN_Building_RP like AP_Building_RP;
Create Table BR_Building_RP like AP_Building_RP;
Create Table CH_Building_RP like AP_Building_RP;
Create Table CG_Building_RP like AP_Building_RP;
Create Table DN_Building_RP like AP_Building_RP;
Create Table DL_Building_RP like AP_Building_RP;
Create Table GA_Building_RP like AP_Building_RP;
Create Table GJ_Building_RP like AP_Building_RP;
Create Table HP_Building_RP like AP_Building_RP;
Create Table HR_Building_RP like AP_Building_RP;
Create Table JH_Building_RP like AP_Building_RP;
Create Table JK_Building_RP like AP_Building_RP;
Create Table KA_Building_RP like AP_Building_RP;
Create Table KL_Building_RP like AP_Building_RP;
Create Table MP_Building_RP like AP_Building_RP;
Create Table MH_Building_RP like AP_Building_RP;
Create Table NE_Building_RP like AP_Building_RP;
Create Table OR_Building_RP like AP_Building_RP;
Create Table PN_Building_RP like AP_Building_RP;
Create Table PB_Building_RP like AP_Building_RP;
Create Table RJ_Building_RP like AP_Building_RP;
Create Table TN_Building_RP like AP_Building_RP;
Create Table UA_Building_RP like AP_Building_RP;
Create Table UP_Building_RP like AP_Building_RP;
Create Table WB_Building_RP like AP_Building_RP;
Create Table PY_Building_RP like AP_Building_RP;
Create Table LD_Building_RP like AP_Building_RP;
Create Table DD_Building_RP like AP_Building_RP;

DROP TABLE IF EXISTS national_pincode_r;
CREATE TABLE `national_pincode_r` (	
`Pincode`	char(10) default NULL,
`state`	char(35) default NULL,
`Remark`	char(35) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `AN_Turn_Table_P` */
DROP TABLE IF EXISTS `AN_Turn_Table_P`;

CREATE TABLE `AN_Turn_Table_P` (	
`TT_Id` Integer default NULL,
`FrmEdgeId`	Integer default NULL,
`ToEdgeId`	Integer default NULL,
`Junction`	Integer default NULL,
`Source`	Char(50) default NULL,
`nStt_Nme`	Char(25) default NULL,/*Chng_Dt_Length*/
KEY `FrmEdgeId` (`FrmEdgeId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

DROP TABLE IF EXISTS `AP_Turn_Table_P`;
DROP TABLE IF EXISTS `BR_Turn_Table_P`;
DROP TABLE IF EXISTS `CH_Turn_Table_P`;
DROP TABLE IF EXISTS `CG_Turn_Table_P`;
DROP TABLE IF EXISTS `DN_Turn_Table_P`;
DROP TABLE IF EXISTS `DL_Turn_Table_P`;
DROP TABLE IF EXISTS `GA_Turn_Table_P`;
DROP TABLE IF EXISTS `GJ_Turn_Table_P`;
DROP TABLE IF EXISTS `HR_Turn_Table_P`;
DROP TABLE IF EXISTS `HP_Turn_Table_P`;
DROP TABLE IF EXISTS `JK_Turn_Table_P`;
DROP TABLE IF EXISTS `JH_Turn_Table_P`;
DROP TABLE IF EXISTS `KA_Turn_Table_P`;
DROP TABLE IF EXISTS `KL_Turn_Table_P`;
DROP TABLE IF EXISTS `MP_Turn_Table_P`;
DROP TABLE IF EXISTS `MH_Turn_Table_P`;
DROP TABLE IF EXISTS `NE_Turn_Table_P`;
DROP TABLE IF EXISTS `OR_Turn_Table_P`;
DROP TABLE IF EXISTS `PY_Turn_Table_P`;
DROP TABLE IF EXISTS `PB_Turn_Table_P`;
DROP TABLE IF EXISTS `RJ_Turn_Table_P`;
DROP TABLE IF EXISTS `TN_Turn_Table_P`;
DROP TABLE IF EXISTS `UP_Turn_Table_P`;
DROP TABLE IF EXISTS `UA_Turn_Table_P`;
DROP TABLE IF EXISTS `LD_Turn_Table_P`;
DROP TABLE IF EXISTS `WB_Turn_Table_P`;
DROP TABLE IF EXISTS `DD_Turn_Table_P`;

Create Table `AP_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `BR_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `CH_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `CG_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `DN_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `DL_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `GA_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `GJ_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `HR_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `HP_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `JK_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `JH_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `KA_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `KL_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `MP_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `MH_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `NE_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `OR_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `PY_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `PB_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `RJ_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `TN_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `UP_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `UA_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `WB_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `LD_Turn_Table_P` like `AN_Turn_Table_P`;
Create Table `DD_Turn_Table_P` like `AN_Turn_Table_P`;

/*Table structure for table `Date_Time` */
DROP TABLE IF EXISTS `Date_Time`;
CREATE TABLE `Date_Time` (		
`Edge_Id` Integer default NULL,
`To_Edge` Integer default NULL,
`Cond_Id` Integer default NULL,
`Type`  Char(1) default NULL,
`Excl_Date` Char(1) default NULL,
`F_End` Char(1) default NULL,
`Ref_Date` Char(8) default NULL,
`Exp_Date` Char(8) default NULL,
`Str_Time` Char(4) default NULL,
`End_Time` Char(4) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id`  Char(2) default NULL,
`Stt_Nme`  Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_Id`   Char(2) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `Condition_type` */
DROP TABLE IF EXISTS `Condition_type`;
CREATE TABLE `Condition_type` (
`Cond_Id` Integer default NULL,
`Type`  Char(1) default NULL,
`Value`	Char(1) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `AN_POI_tpd_P` */
DROP TABLE IF EXISTS `AN_POI_tpd_P`;
		
CREATE TABLE `AN_POI_tpd_P` (	
`Poi_Nme` Char(100) default NULL,
`Poi_Id`  Char(20) Primary Key,
`Ftr_Cry` Char(6) default NULL,/*Chng_Dt_Length*/
`Cat_Dec` Char(50) default NULL,
`Loc_Nme` Char(100) default NULL,/*Chng_Dt_Length*/
`Loc_Id` Char(20) default NULL,
`City_Nme` Char(50) default NULL,/*Chng_Dt_Length*/
`City_Id` Integer default NULL,
`Stt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`Stt_Id` Char(2) default NULL,
`nStt_Nme` Char(25) default NULL,/*Chng_Dt_Length*/
`nStt_Id` Char(2) default NULL,
`Poplr_Nme` Char(100) default NULL,
`Alias_1` Char(50) default NULL,
`Alias_2` Char(50) default NULL,
`Alias_3` Char(50) default NULL,
`Tel` Char(50) default NULL,
`Pin` Char(10) default NULL,
`Fax` Char(50) default NULL,
`SrcNew` Char(50) default NULL,/*Chng_Dt_Length*/
`Dt_SrcNew` Char(6) default NULL,/*Chng_Dt_Length*/
`SrcMvd` Char(100) default NULL,/*Chng_Dt_Length*/
`Dt_SrcMvd` Char(6) default NULL,/*Chng_Dt_Length*/
`SrcDat` Char(100) default NULL,/*Chng_Dt_Length*/
`Dt_SrcDat`	Char(6) default NULL,/*Chng_Dt_Length*/
`PIP_Id` Char(20) default NULL,
`PIP_Typ` Integer default NULL,
`Edge_ID` Integer default NULL,
`Addr_City`	Char(50) default NULL,
`Entry_Lon`	Decimal(20,10) default NULL,
`Entry_Lat`	Decimal(20,10) default NULL,
`Addr_Id` Integer default NULL,
`Sec_sta` Char(2) default NULL,/*Chng_Dt_Length*/
`Sec_sta_Poplr` Char(2) default NULL,/*Chng_Dt_Length*/
`Vicinity` Integer default NULL,
`Priority` Integer default NULL,
`Sub_Type` Char(50) default NULL,
`Address` Char(200)  default NULL,
`Email` Char(50)  default NULL,
`Web` Char(75)  default NULL,/*Chng_Dt_Length*/
`Geo_Lvl` Char(20)  default NULL,
`Irr_Poi` Char(3)  default NULL,/*Chng_Dt_Length*/
`Person` Char(20)  default NULL,
`Edge_Side` Char(1)  default NULL,
`Imp_Poi` Char(10)  default NULL,
`O_Info` Char(50)  default NULL,
`Old_Id` Char(50)  default NULL,
`Poi_Lvl` Char(50)  default NULL,
`Frz_Poi` Char(50)  default NULL,
`Fbk_Src` Char(100)  default NULL,
`Remark` Char(100)  default NULL,
`Keyword` Char(150)  default NULL,
`Version` Char(5)  default NULL,/*Chng_Dt_Length*/
`Brand_Nme` Char(50)  default NULL,
`Brand_Typ` Char(30)  default NULL,/*Chng_Dt_Length*/
`Landmark` Char(2)  default NULL,
`Rwtb_Nme` Char(50)  default NULL,
`Star_Rating` char(5) default NULL,/*Chng_Dt_Length*/
KEY `Poi_Id` (`Poi_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

DROP TABLE IF EXISTS AP_POI_tpd_P;
DROP TABLE IF EXISTS BR_POI_tpd_P;
DROP TABLE IF EXISTS CG_POI_tpd_P;
DROP TABLE IF EXISTS CH_POI_tpd_P;
DROP TABLE IF EXISTS DL_POI_tpd_P;
DROP TABLE IF EXISTS DN_POI_tpd_P;
DROP TABLE IF EXISTS GA_POI_tpd_P;
DROP TABLE IF EXISTS GJ_POI_tpd_P;
DROP TABLE IF EXISTS HP_POI_tpd_P;
DROP TABLE IF EXISTS HR_POI_tpd_P;
DROP TABLE IF EXISTS JH_POI_tpd_P;
DROP TABLE IF EXISTS JK_POI_tpd_P;
DROP TABLE IF EXISTS KA_POI_tpd_P;
DROP TABLE IF EXISTS KL_POI_tpd_P;
DROP TABLE IF EXISTS LD_POI_tpd_P;
DROP TABLE IF EXISTS MH_POI_tpd_P;
DROP TABLE IF EXISTS MP_POI_tpd_P;
DROP TABLE IF EXISTS OR_POI_tpd_P;
DROP TABLE IF EXISTS PB_POI_tpd_P;
DROP TABLE IF EXISTS PY_POI_tpd_P;
DROP TABLE IF EXISTS RJ_POI_tpd_P;
DROP TABLE IF EXISTS TN_POI_tpd_P;
DROP TABLE IF EXISTS UA_POI_tpd_P;
DROP TABLE IF EXISTS UP_POI_tpd_P;
DROP TABLE IF EXISTS WB_POI_tpd_P;
DROP TABLE IF EXISTS NE_POI_tpd_P;
DROP TABLE IF EXISTS DD_POI_tpd_P;

Create Table AP_POI_tpd_P like AN_POI_tpd_P;
Create Table BR_POI_tpd_P like AN_POI_tpd_P;
Create Table CG_POI_tpd_P like AN_POI_tpd_P;
Create Table CH_POI_tpd_P like AN_POI_tpd_P;
Create Table DL_POI_tpd_P like AN_POI_tpd_P;
Create Table DN_POI_tpd_P like AN_POI_tpd_P;
Create Table GA_POI_tpd_P like AN_POI_tpd_P;
Create Table GJ_POI_tpd_P like AN_POI_tpd_P;
Create Table HP_POI_tpd_P like AN_POI_tpd_P;
Create Table HR_POI_tpd_P like AN_POI_tpd_P;
Create Table JH_POI_tpd_P like AN_POI_tpd_P;
Create Table JK_POI_tpd_P like AN_POI_tpd_P;
Create Table KA_POI_tpd_P like AN_POI_tpd_P;
Create Table KL_POI_tpd_P like AN_POI_tpd_P;
Create Table MH_POI_tpd_P like AN_POI_tpd_P;
Create Table MP_POI_tpd_P like AN_POI_tpd_P;
Create Table OR_POI_tpd_P like AN_POI_tpd_P;
Create Table PB_POI_tpd_P like AN_POI_tpd_P;
Create Table PY_POI_tpd_P like AN_POI_tpd_P;
Create Table RJ_POI_tpd_P like AN_POI_tpd_P;
Create Table TN_POI_tpd_P like AN_POI_tpd_P;
Create Table UA_POI_tpd_P like AN_POI_tpd_P;
Create Table UP_POI_tpd_P like AN_POI_tpd_P;
Create Table WB_POI_tpd_P like AN_POI_tpd_P;
Create Table NE_POI_tpd_P like AN_POI_tpd_P;
Create Table LD_POI_tpd_P like AN_POI_tpd_P;
Create Table DD_POI_tpd_P like AN_POI_tpd_P;

/*Table structure for table `Geocode_District_HQ` */
DROP TABLE IF EXISTS `Geocode_District_HQ`;

CREATE TABLE `Geocode_District_HQ` (	
`DST_NME` Char(50) default NULL,
`DST_ID` Char(5) default NULL,/*Chng_Dt_Length*/
`Headquarters_City_Nme` Char (50) default NULL,
`Headquarters_City_Id` Integer default NULL,
KEY `DST_ID` (`DST_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `India_Region` */
DROP TABLE IF EXISTS `India_Region`;
CREATE TABLE `India_Region` (		
`Id` SmallInt default NULL,
`Name` Char(100) default NULL /*Chng_Dt_Length*/
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `ConnPts` */
DROP TABLE IF EXISTS `ConnPts`;
CREATE TABLE `ConnPts` (		
`Id` Smallint default NULL,/*Chng_Dt_Length*/
`Junction_ID` Integer default NULL,
`Longitude` Float default NULL,/*Chng_Dt_Length*/
`Latitude` Float default NULL /*Chng_Dt_Length*/
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*.........................TRIGGERS FOR EACH TABLE................................*/

DELIMITER $$;

CREATE TRIGGER `Category_CONSTRAINTS` 
BEFORE INSERT ON `category` FOR EACH ROW 
BEGIN
    IF( NEW.Category_Code = '' OR NEW.Category_Code = '0')
    THEN
        INSERT ERROR_MSG VALUES("Category", NEW.Category_Code, "Category_Code", NEW.Category_Code, "Cannot be Blank or Zero.", 1);
    ELSE    
        IF( SELECT COUNT(*) FROM `Category` WHERE Category_Code = NEW.Category_Code )
        THEN
            INSERT ERROR_MSG VALUES("Category", NEW.Category_Code, "Category_Code", NEW.Category_Code, "Duplicate value.", 1);
        END IF;       
    END IF;
END$$;
/*Trigger structure for table `Bifurcation_P` */

CREATE TRIGGER `Bifurcation_P_CONSTRAINTS` 
BEFORE INSERT ON `Bifurcation_P` FOR EACH ROW 
BEGIN
	DECLARE cnStt_Nme char(50);
			IF(NEW.Bfr_Id =0)
			THEN
				INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "Bfr_Id", NEW.Bfr_Id, "Cannot be Blank.", 1);
			END IF;
		IF( NEW.nStt_Nme = "" ) 
		THEN
			INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme is Blank", 1);
		END IF;	
	Set cnStt_Nme = NEW.nStt_Nme;
		IF( NEW.PARENTID = 0)
		THEN
			INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
		END IF;
		
		IF( NEW.JunctionId = 0)
		THEN
       		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "JunctionId", NEW.JunctionId, "Cannot be Blank.", 1);
		END IF;
		
		IF (SELECT COUNT(*) FROM `City_Jn_P`)
		THEN
			IF ((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.JunctionId) = 0)
			THEN 
				INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "JunctionId", NEW.JunctionId, "Not found in City_Jn_P Table.",1);
			ELSE
				IF(cnStt_Nme <> '')
				THEN
				CASE cnStt_Nme
				WHEN "Andhra Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 )
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_AP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_AP.", 1);
					END IF;
				WHEN "Arunachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND 
						(From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Assam"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND 
						(From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Bihar"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
											IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_BR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_BR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_BR.", 1);
					END IF;
				WHEN "Chandigarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 )
					THEN
											IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_CH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_CH.", 1);
					END IF;
				WHEN "Chhattisgarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 )
					THEN
											IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_CG", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CG", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_CG.", 1);
					END IF;
				WHEN "Daman & Diu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 )
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_DD", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DD", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_DD.", 1);
					END IF;
				WHEN "Dadra & Nagar Haveli"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
											IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_DN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_DN.", 1);
					END IF;
				WHEN "Delhi"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_DL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_DL.", 1);
					END IF;
				WHEN "Goa"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_GA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_GA.", 1);
					END IF;
				WHEN "Gujarat"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_GJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_GJ.", 1);
					END IF;
				WHEN "Himachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_HP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_HP.", 1);
					END IF;
				WHEN "Haryana"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_HR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_HR.", 1);
					END IF;
				WHEN "Jharkhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_JH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_JH.", 1);
					END IF;
				WHEN "Jammu & Kashmir"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_JK", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JK", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_JK.", 1);
					END IF;
				WHEN "Karnataka"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_KA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_KA.", 1);
					END IF;
				WHEN "Kerala"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_KL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_KL.", 1);
					END IF;
				WHEN "Madhya Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_MP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_MP.", 1);
					END IF;
				WHEN "Maharashtra"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_MH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_MH.", 1);
					END IF;
				WHEN "Mizoram"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
								IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Meghalaya"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Manipur"
				THEN 

					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
									IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Nagaland"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Tripura"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
								IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Odisha"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_OR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_OR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_OR.", 1);
					END IF;
				WHEN "Puducherry"
				THEN 					
					IF ((SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_PY", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PY", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_PY.", 1);
					END IF;
				WHEN "Punjab"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
										IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_PB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PB", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_PB.", 1);
					END IF;
				WHEN "Rajasthan"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_RJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_RJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_RJ.", 1);
					END IF;
				WHEN "Tamil Nadu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_TN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_TN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_TN.", 1);
					END IF;
				WHEN "Uttarakhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_UA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_UA.", 1);
					END IF;
				WHEN "Uttar Pradesh"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_UP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_UP.", 1);
					END IF;
				WHEN "West Bengal"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
				THEN
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_WB.", 1); 
					END IF; 
				WHEN "Sikkim"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ParentId AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
				THEN
					IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_WB", 1);
						END IF;
					IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_WB.", 1); 
				END IF; 
				WHEN "Andaman & Nicobar Islands"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ParentId AND 
						(From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_AN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_AN.", 1);
					END IF;
				WHEN "Lakshadweep"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ParentId AND 
						(From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0)
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ParentId AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "For Fow_Prev in EL,EM ,ParentId found in City_Roads_LD", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ParentId AND PJ <>'')
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_LD", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "ParentId, JunctionId combination not found in City_Roads_LD.", 1);
					END IF;
				ELSE 
					INSERT ERROR_MSG VALUES("Bifurcation_P",New.Bfr_Id , "nStt_Nme", cnStt_Nme, "Road Table for this state not found",1);
				END CASE;
				ELSE 
					INSERT ERROR_MSG VALUES("Bifurcation_P",New.Bfr_Id , "nStt_Nme", cnStt_Nme, "nStt_Nme blank",1);
				END IF;
			END IF;
		END IF;
		
	IF( NEW.ChildId_1 = 0)
		THEN
		   	INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "Cannot be Blank.", 1);
		ELSE
			IF(cnStt_Nme <> '')
			THEN
			CASE cnStt_Nme
				WHEN "Andhra Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_AP`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_AP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_AP.", 1);
					END IF;
				WHEN "Arunachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Assam"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Bihar"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_BR`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_BR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_BR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_BR.", 1);
					END IF;
				WHEN "Chandigarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_CH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_CH.", 1);
					END IF;
				WHEN "Chhattisgarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CG`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_CG", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CG", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_CG.", 1);
					END IF;
				WHEN "Daman & Diu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_DD`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_DD", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DD", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_DD.", 1);
					END IF;
				WHEN "Dadra & Nagar Haveli"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DN`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_DN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_DN.", 1);
					END IF;
				WHEN "Delhi"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DL`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_DL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_DL.", 1);
					END IF;
				WHEN "Goa"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_GA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_GA.", 1);
					END IF;
				WHEN "Gujarat"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GJ`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_GJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_GJ.", 1);
					END IF;
				WHEN "Himachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HP`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_HP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_HP.", 1);
					END IF;
				WHEN "Haryana"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_HR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_HR.", 1);
					END IF;
				WHEN "Jharkhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_JH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_JH.", 1);
					END IF;
				WHEN "Jammu & Kashmir"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JK`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_JK", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JK", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_JK.", 1);
					END IF;
				WHEN "Karnataka"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KA`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_KA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_KA.", 1);
					END IF;
				WHEN "Kerala"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KL`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_KL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_KL.", 1);
					END IF;
				WHEN "Madhya Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_MP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_MP.", 1);
					END IF;
				WHEN "Maharashtra"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MH`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_MH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_MH.", 1);
					END IF;
				WHEN "Mizoram"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Meghalaya"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Manipur"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Nagaland"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Tripura"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Odisha"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_OR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_OR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_OR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_OR.", 1);
					END IF;
				WHEN "Puducherry"
				THEN 					
					IF ((SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PY`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_PY", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PY", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_PY.", 1);
					END IF;
				WHEN "Punjab"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PB`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_PB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PB", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_PB.", 1);
					END IF;
				WHEN "Rajasthan"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_RJ`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_RJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_RJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_RJ.", 1);
					END IF;
				WHEN "Tamil Nadu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_TN`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_TN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_TN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_TN.", 1);
					END IF;
				WHEN "Uttarakhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_UA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_UA.", 1);
					END IF;
				WHEN "Uttar Pradesh"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_UP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_UP", 1);
					END IF;
				WHEN "West Bengal"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_WB.", 1); 
					END IF; 
				WHEN "Sikkim"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_WB.", 1); 
				END IF; 
				WHEN "Andaman & Nicobar Islands"
				THEN 
				IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_AN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AN", 1);
						END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_AN`)=0))
				THEN
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_AN.", 1); 
				END IF;
				WHEN "Lakshadweep"
				THEN 
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_1 AND Fow_Prev in('EL','EM'))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "For Fow_Prev in EL,EM ,ChildId_1 found in City_Roads_LD", 1);
					END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_1 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_LD`)=0))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "ChildId_1, JunctionId combination not found in City_Roads_LD.", 1); 
					END IF;
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_1 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_LD", 1);
						END IF;
				ELSE 
					INSERT ERROR_MSG VALUES("Bifurcation_P",New.Bfr_Id , "nStt_Nme", cnStt_Nme, "Road Table for this state not found",1);
				END CASE;
				END IF;
		END IF;	
	
		
	IF( NEW.ChildId_2 = 0)
		THEN
		   	INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "Cannot be Blank.", 1);
		ELSE
			IF(cnStt_Nme <> '')
			THEN
			CASE cnStt_Nme
				WHEN "Andhra Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_AP`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_AP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_AP.", 1);
					END IF;
				WHEN "Arunachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Assam"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Bihar"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_BR`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_BR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_BR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_BR.", 1);
					END IF;
				WHEN "Chandigarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_CH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_CH.", 1);
					END IF;
				WHEN "Chhattisgarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CG`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_CG", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CG", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_CG.", 1);
					END IF;
				WHEN "Daman & Diu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_DD`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_DD", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DD", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_1, JunctionId combination not found in City_Roads_DD.", 1);
					END IF;
				WHEN "Dadra & Nagar Haveli"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DN`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_DN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_DN.", 1);
					END IF;
				WHEN "Delhi"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DL`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_DL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_DL.", 1);
					END IF;
				WHEN "Goa"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_GA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_GA.", 1);
					END IF;
				WHEN "Gujarat"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GJ`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_GJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_GJ.", 1);
					END IF;
				WHEN "Himachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HP`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_HP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_HP.", 1);
					END IF;
				WHEN "Haryana"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_HR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_HR.", 1);
					END IF;
				WHEN "Jharkhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_JH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_JH.", 1);
					END IF;
				WHEN "Jammu & Kashmir"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JK`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_JK", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JK", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_JK.", 1);
					END IF;
				WHEN "Karnataka"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KA`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_KA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_KA.", 1);
					END IF;
				WHEN "Kerala"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KL`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_KL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_KL.", 1);
					END IF;
				WHEN "Madhya Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_MP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_MP.", 1);
					END IF;
				WHEN "Maharashtra"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MH`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_MH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_MH.", 1);
					END IF;
				WHEN "Mizoram"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Meghalaya"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Manipur"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Nagaland"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Tripura"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Odisha"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_OR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_OR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_OR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_OR.", 1);
					END IF;
				WHEN "Puducherry"
				THEN 					
					IF ((SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PY`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_PY", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PY", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_PY.", 1);
					END IF;
				WHEN "Punjab"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PB`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_PB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PB", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_PB.", 1);
					END IF;
				WHEN "Rajasthan"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_RJ`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_RJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_RJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_RJ.", 1);
					END IF;
				WHEN "Tamil Nadu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_TN`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_TN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_TN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_TN.", 1);
					END IF;
				WHEN "Uttarakhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_UA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_UA.", 1);
					END IF;
				WHEN "Uttar Pradesh"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_UP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_UP", 1);
					END IF;
				WHEN "West Bengal"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_WB.", 1); 
					END IF; 
				WHEN "Sikkim"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_WB.", 1); 
				END IF; 
				WHEN "Andaman & Nicobar Islands"
				THEN 
				IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_AN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AN", 1);
						END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_AN`)=0))
				THEN
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_AN.", 1); 
				END IF;
				WHEN "Lakshadweep"
				THEN 
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_2 AND Fow_Prev in('EL','EM'))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_LD", 1);
					END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_2 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_LD`)=0))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "ChildId_2, JunctionId combination not found in City_Roads_LD.", 1); 
					END IF;
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_2 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_LD", 1);
						END IF;
				ELSE 
					INSERT ERROR_MSG VALUES("Bifurcation_P",New.Bfr_Id , "nStt_Nme", cnStt_Nme, "Road Table for this state not found",1);
				END CASE;
				END IF;
		END IF;	
	
	IF( NEW.ChildId_3 != 0)
		THEN
			IF(cnStt_Nme <> '')
			THEN
			CASE cnStt_Nme
				WHEN "Andhra Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_AP`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_AP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_AP.", 1);
					END IF;
				WHEN "Arunachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Assam"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Bihar"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_BR`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_BR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_BR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_BR.", 1);
					END IF;
				WHEN "Chandigarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_CH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_CH.", 1);
					END IF;
				WHEN "Chhattisgarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CG`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_CG", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CG", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_CG.", 1);
					END IF;
				WHEN "Daman & Diu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_DD`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_DD", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DD", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_DD.", 1);
					END IF;
				WHEN "Dadra & Nagar Haveli"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DN`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_DN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_DN.", 1);
					END IF;
				WHEN "Delhi"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DL`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_DL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_DL.", 1);
					END IF;
				WHEN "Goa"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_GA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_GA.", 1);
					END IF;
				WHEN "Gujarat"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GJ`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_GJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_GJ.", 1);
					END IF;
				WHEN "Himachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HP`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_HP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_HP.", 1);
					END IF;
				WHEN "Haryana"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_HR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_HR.", 1);
					END IF;
				WHEN "Jharkhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_JH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_JH.", 1);
					END IF;
				WHEN "Jammu & Kashmir"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JK`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_JK", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JK", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_JK.", 1);
					END IF;
				WHEN "Karnataka"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KA`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_KA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_KA.", 1);
					END IF;
				WHEN "Kerala"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KL`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_KL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_KL.", 1);
					END IF;
				WHEN "Madhya Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_MP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_MP.", 1);
					END IF;
				WHEN "Maharashtra"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MH`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_MH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_MH.", 1);
					END IF;
				WHEN "Mizoram"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Meghalaya"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Manipur"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Nagaland"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Tripura"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Odisha"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_OR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_OR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_OR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_OR.", 1);
					END IF;
				WHEN "Puducherry"
				THEN 					
					IF ((SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PY`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_PY", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PY", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_PY.", 1);
					END IF;
				WHEN "Punjab"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PB`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_PB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PB", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_PB.", 1);
					END IF;
				WHEN "Rajasthan"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_RJ`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_RJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_RJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_RJ.", 1);
					END IF;
				WHEN "Tamil Nadu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_TN`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_TN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_TN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_TN.", 1);
					END IF;
				WHEN "Uttarakhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_UA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_UA.", 1);
					END IF;
				WHEN "Uttar Pradesh"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_UP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_UP", 1);
					END IF;
				WHEN "West Bengal"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_WB.", 1); 
					END IF; 
				WHEN "Sikkim"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_WB.", 1); 
				END IF; 
				WHEN "Andaman & Nicobar Islands"
				THEN 
				IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_AN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AN", 1);
						END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_AN`)=0))
				THEN
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_AN.", 1); 
				END IF;
				WHEN "Lakshadweep"
				THEN 
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_3 AND Fow_Prev in('EL','EM'))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "For Fow_Prev in EL,EM ,ChildId_3 found in City_Roads_LD", 1);
					END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_3 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_LD`)=0))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "ChildId_3, JunctionId combination not found in City_Roads_LD.", 1); 
					END IF;
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_3 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_LD", 1);
						END IF;
				ELSE 
					INSERT ERROR_MSG VALUES("Bifurcation_P",New.Bfr_Id , "nStt_Nme", cnStt_Nme, "Road Table for this state not found",1);
				END CASE;
				END IF;
		END IF;	
		
	IF( NEW.ChildId_4 != 0)
		THEN
			IF(cnStt_Nme <> '')
			THEN
			CASE cnStt_Nme
				WHEN "Andhra Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_AP`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_AP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_AP.", 1);
					END IF;
				WHEN "Arunachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Assam"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Bihar"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_BR`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_BR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_BR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_BR.", 1);
					END IF;
				WHEN "Chandigarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_CH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_CH.", 1);
					END IF;
				WHEN "Chhattisgarh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_CG`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_CG", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_CG", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_CG.", 1);
					END IF;
				WHEN "Daman & Diu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (SELECT COUNT(*) FROM `City_Roads_DD`))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_2 found in City_Roads_DD", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DD", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_DD.", 1);
					END IF;
				WHEN "Dadra & Nagar Haveli"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DN`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_DN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_DN.", 1);
					END IF;
				WHEN "Delhi"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_DL`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_DL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_DL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_DL.", 1);
					END IF;
				WHEN "Goa"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_GA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_GA.", 1);
					END IF;
				WHEN "Gujarat"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_GJ`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_GJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_GJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_GJ.", 1);
					END IF;
				WHEN "Himachal Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HP`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_HP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_HP.", 1);
					END IF;
				WHEN "Haryana"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_HR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_HR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_HR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_HR.", 1);
					END IF;
				WHEN "Jharkhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JH`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_JH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_JH.", 1);
					END IF;
				WHEN "Jammu & Kashmir"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_JK`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_JK", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_JK", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_JK.", 1);
					END IF;
				WHEN "Karnataka"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KA`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_KA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_KA.", 1);
					END IF;
				WHEN "Kerala"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_KL`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_KL", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_KL", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_KL.", 1);
					END IF;
				WHEN "Madhya Pradesh"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_MP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_MP.", 1);
					END IF;
				WHEN "Maharashtra"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_MH`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_MH", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_MH", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_MH.", 1);
					END IF;
				WHEN "Mizoram"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Meghalaya"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Manipur"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Nagaland"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Tripura"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_NE", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_NE", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_NE.", 1);
					END IF;
				WHEN "Odisha"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_OR`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_OR", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_OR", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_OR.", 1);
					END IF;
				WHEN "Puducherry"
				THEN 					
					IF ((SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PY`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_PY", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PY", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_PY.", 1);
					END IF;
				WHEN "Punjab"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_PB`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_PB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_PB", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_PB.", 1);
					END IF;
				WHEN "Rajasthan"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_RJ`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_RJ", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_RJ", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_RJ.", 1);
					END IF;
				WHEN "Tamil Nadu"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_TN`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_TN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_TN", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_TN.", 1);
					END IF;
				WHEN "Uttarakhand"
				THEN 
					IF ((SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UA`)=0))
					THEN
					IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_UA", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UA", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_UA.", 1);
					END IF;
				WHEN "Uttar Pradesh"
				THEN
					IF ((SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_UP`)=0))
					THEN
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_UP", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_UP", 1);
						END IF;
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_UP", 1);
					END IF;
				WHEN "West Bengal"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_WB.", 1); 
					END IF; 
				WHEN "Sikkim"
				THEN																				
					IF ((SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
				THEN
				IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_WB", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_WB", 1);
						END IF;
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_WB.", 1); 
				END IF; 
				WHEN "Andaman & Nicobar Islands"
				THEN 
				IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_AN", 1);
						END IF;
						IF(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_AN", 1);
						END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_AN`)=0))
				THEN
					INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_AN.", 1); 
				END IF;
				WHEN "Lakshadweep"
				THEN 
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_4 AND Fow_Prev in('EL','EM'))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "For Fow_Prev in EL,EM ,ChildId_4 found in City_Roads_LD", 1);
					END IF;
					IF ((SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_4 AND (From_Junction = NEW.JunctionId OR To_Junction = NEW.JunctionId )) = 0 AND (!(SELECT COUNT(*) FROM `City_Roads_LD`)=0))
					THEN
						INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "ChildId_4, JunctionId combination not found in City_Roads_LD.", 1); 
					END IF;
					IF(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id = NEW.ChildId_4 AND PJ<>"")
						THEN
							INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ParentId", NEW.ParentId, "PJ not blank for Edge_Id in City_Roads_LD", 1);
						END IF;
				ELSE 
					INSERT ERROR_MSG VALUES("Bifurcation_P",New.Bfr_Id , "nStt_Nme", cnStt_Nme, "Road Table for this state not found",1);
				END CASE;
				END IF;
		END IF;	

 	IF (NEW.Parentid = NEW.ChildId_1)
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "Parentid = ChildId_1 ", 1);
	END IF;		
 	IF (NEW.Parentid = NEW.ChildId_2)
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "Parentid = ChildId_2 ", 1);
	END IF;	
 	IF (NEW.Parentid = NEW.ChildId_3)
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "Parentid = ChildId_3 ", 1);
	END IF;	
 	IF (NEW.Parentid = NEW.ChildId_4)
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "Parentid = ChildId_4 ", 1);
	END IF;		
 	IF (NEW.ChildId_1 <> 0 AND (NEW.ChildId_1 = NEW.ChildId_2 OR NEW.ChildId_1 = NEW.ChildId_3 OR NEW.ChildId_1 = NEW.ChildId_4 ))
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "Cannot be same as ChildId_2/ChildId_3/ChildId_4", 1);
	END IF;
		
	IF (NEW.ChildId_2 <> 0 AND (NEW.ChildId_2 = NEW.ChildId_1 OR NEW.ChildId_2 = NEW.ChildId_3 OR NEW.ChildId_2 = NEW.ChildId_4 ))
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "Cannot be same as ChildId_1/ChildId_3/ChildId_4", 1);
	END IF;

	IF (NEW.ChildId_3 <> 0 AND (NEW.ChildId_3 = NEW.ChildId_1 OR NEW.ChildId_3 = NEW.ChildId_2 OR NEW.ChildId_3 = NEW.ChildId_4 ))
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "Cannot be same as ChildId_1/ChildId_2/ChildId_4", 1);
	END IF;

	IF (NEW.ChildId_4  <> 0 AND (NEW.ChildId_4  = NEW.ChildId_1 OR NEW.ChildId_4 = NEW.ChildId_2 OR NEW.ChildId_4 = NEW.ChildId_3 ))
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4 ", NEW.ChildId_4 , "Cannot be same as ChildId_1/ChildId_2/ChildId_3", 1);
	END IF;

 	IF ((Select Count(*) from Bifurcation_P where Parentid=NEW.Parentid and ChildId_1 = NEW.ChildId_1 and ChildId_2 = NEW.ChildId_2 and ChildId_3 = NEW.ChildId_3  and ChildId_4 = NEW.ChildId_4 ) >1 )
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1/ChildId_2/ChildId_3/ChildId_4", NEW.ChildId_1, "Parentid/ChildId_1/ChildId_2/ChildId_3/ChildId_4 Duplicate values", 1);
	END IF;
 	IF ((Select Count(*) from Bifurcation_P where Parentid=NEW.Parentid and ChildId_1 = NEW.ChildId_1 ) >1 )
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_1", NEW.ChildId_1, "Parentid/ChildId_1 Duplicate values", 1);
	END IF;
 	IF ((Select Count(*) from Bifurcation_P where Parentid=NEW.Parentid and ChildId_2 = NEW.ChildId_2 ) >1 )
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_2", NEW.ChildId_2, "Parentid/ChildId_2 Duplicate values", 1);
	END IF;
 	IF ((Select Count(*) from Bifurcation_P where Parentid=NEW.Parentid and ChildId_3 = NEW.ChildId_3 ) >1 )
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_3", NEW.ChildId_3, "Parentid/ChildId_3 Duplicate values", 1);
	END IF;
 	IF ((Select Count(*) from Bifurcation_P where Parentid=NEW.Parentid and ChildId_4 = NEW.ChildId_4 ) >1 )
	THEN
		INSERT ERROR_MSG VALUES("Bifurcation_P", NEW.Bfr_Id, "ChildId_4", NEW.ChildId_4, "Parentid/ChildId_4 Duplicate values", 1);
	END IF;
END$$;

/*Trigger structure for table `city_area_r` */

CREATE TRIGGER `City_Area_R_CONSTRAINTS` 
BEFORE INSERT ON `city_area_r` FOR EACH ROW 
BEGIN
    IF( NEW.City_Id = 0)
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Id", NEW.City_Id, "Cannot be Blank.", 1);
    END IF;
        
    IF( NEW.City_Nme = '' OR NEW.City_Nme='0')
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Nme", NEW.City_Nme, "Cannot be Blank Or Zero.", 1);
	END IF;
   
    IF((select instr(NEW.City_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Nme", NEW.City_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.City_Alt,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Alt", NEW.City_Alt, "CONTAINS DOUBLE SPACES", 1);
    END IF;   
	IF(NEW.City_Alt='0')
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Alt", NEW.City_Alt, "Cannot be Zero.", 1);
	END IF;
	
    IF((select instr(NEW.City_Alt2,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Alt2", NEW.City_Alt2, "CONTAINS DOUBLE SPACES", 1);
    END IF; 
	IF(NEW.City_Alt2='0')
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Alt2", NEW.City_Alt2, "Cannot be Zero.", 1);
	END IF;
    IF((select instr(NEW.City_Alt3,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Alt3", NEW.City_Alt3, "CONTAINS DOUBLE SPACES", 1);
    END IF; 	
	IF(NEW.City_Alt3='0')
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "City_Alt3", NEW.City_Alt3, "Cannot be Zero.", 1);
	END IF;
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	IF(NEW.Type NOT IN ('CC' ,'NCC' ,'IC' ,'TC'))
	THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Type", NEW.Type, "Type can be CC,NCC,IC,TC", 1);
	END IF;
	IF(NEW.Ftr_Cry not IN ('DG','TW','OT'))
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in DG,TW,OT ", 1);
	END IF;
	
	IF( NEW.Dst_Id <> '' )
	THEN
		IF((SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Nme=NEW.Dst_Nme AND Dst_Id=NEW.Dst_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Dst_Id", NEW.Dst_Id, "Dst_Nme, Dst_Id combination not found in National_District_R table.", 1);
		END IF;
	END IF;
	IF(NEW.Dst_Id = '0')
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Dst_Id", NEW.Dst_Id, "Dst_Id cannot be Zero.", 1);
	END IF;
	IF( NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.nStt_Nme <> '0' AND NEW.nStt_Id <> '0')
	THEN
		IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id) )
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme/nStt_Id cannot be Blank or Zero.", 1);
	END IF;

	IF( NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' OR NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
	THEN
		IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme/Stt_Id cannot be Blank or Zero.", 1);
	END IF;
	IF (NEW.City_Nme <> '' AND (NEW.City_Nme = NEW.City_Alt OR NEW.City_Nme = NEW.City_Alt2 OR NEW.City_Nme = NEW.City_Alt3 ))
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "City_Nme", NEW.City_Nme, "Cannot be same as City_Alt/City_Alt2/City_Alt3", 1);
	END IF;
	
	IF (NEW.City_Alt <> '' AND (NEW.City_Alt = NEW.City_Nme OR NEW.City_Alt = NEW.City_Alt2 OR NEW.City_Alt = NEW.City_Alt3 ))
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "City_Alt", NEW.City_Alt, "Cannot be same as City_Nme/City_Alt2/City_Alt3", 1);
	END IF;

	IF (NEW.City_Alt2 <> '' AND (NEW.City_Alt2 = NEW.City_Nme OR NEW.City_Alt2 = NEW.City_Alt OR NEW.City_Alt2 = NEW.City_Alt3 ))
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "City_Alt2", NEW.City_Alt2, "Cannot be same as City_Nme/City_Alt/City_Alt3", 1);
	END IF;

	IF (NEW.City_Alt3 <> '' AND (NEW.City_Alt3 = NEW.City_Nme OR NEW.City_Alt3 = NEW.City_Alt OR NEW.City_Alt3 = NEW.City_Alt2 ))
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "City_Alt3", NEW.City_Alt3, "Cannot be same as City_Nme/City_Alt/City_Alt2", 1);
	END IF;
	
	IF (NEW.City_Alt = '' )
	THEN
		IF(NEW.City_Alt2 <> '' OR NEW.City_Alt3 <> '')
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "City_Alt", NEW.City_Alt, "Cannot be blank if City_Alt2 <> '' or 
			City_Alt3 <> ''", 2);
		END IF;	
	END IF;	
	IF ((NEW.City_Alt <> '' AND NEW.City_Alt2 = '' AND NEW.City_Alt3 <> ''))
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "City_Alt2", NEW.City_Alt2, "Cannot be blank if City_Alt3 <> ''", 2);
	END IF;	
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999) )
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999", 1);
    END IF;
	IF( NEW.Sec_Sta not in ('R','C','KC','KR','PC','') )
    THEN
        INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Sec_Sta", NEW.Sec_Sta, "Sec_Sta not in R,C,Kc,Kr or Blank", 1);
    ELSE
		IF((NEW.Sec_Sta = 'R'))
		THEN
			IF(NEW.PRIORITY <> 99)
			THEN
				INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_id, "Priority", NEW.Priority, " SEC_STA = R AND PRIORITY <> 99", 1);
			END IF;
			IF(NEW.Ftr_Cry = 'DG')
			THEN
				INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Sec_Sta", NEW.Sec_Sta, "Sec_Sta =R ,Ftr_Cry = DG", 1);
			END IF;	
		END IF;	
	END IF;	
	IF((NEW.Ftr_Cry = 'DG'))
	THEN
		IF((NEW.V_intro = ''))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "V_intro", NEW.V_intro, "Ftr_Cry = 'DG' , v-intro Blank", 1);
		END IF;	
	END IF;	
	IF((NEW.V_upd <> ''))
	THEN
		IF((NEW.V_intro = ''))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "V_upd", NEW.V_upd, "V_upd not Blank , v-intro Blank", 1);
		END IF;	
	END IF;
	IF(NEW.V_Survey <> '')
	THEN
		IF(NEW.V_intro = '')
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "V_Survey", NEW.V_Survey, "V_Survey not Blank , v-intro Blank", 1);
		END IF;	
	END IF;	
	IF (NEW.Cens_id <> '')
	THEN
		IF((Select LENGTH(NEW.Cens_id)) <> 16)
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Cens_id", NEW.Cens_id, "length <> 16", 1);
		END IF;
		IF( SELECT COUNT(*) FROM `city_area_r` WHERE Cens_id = NEW.Cens_id )
        THEN
            INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Cens_id", NEW.Cens_id, "Duplicate value.", 1);
        END IF;
	END IF;
	IF(NEW.Ftr_Cry in('TW','DG'))
	THEN
		IF(NEW.Cens_id = '')
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Cens_id", NEW.Cens_id, "Ftr_Cry in 'TW','DG' , Cens_id Blank", 1);
		END IF;	
	END IF;	
	IF(NEW.Tot_P = 0)
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Tot_P", NEW.Tot_P, "Tot_P =0", 1);
	END IF;	
	IF(NEW.Tot_P  > 20000000)
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Tot_P", NEW.Tot_P, "Tot_P > 20000000", 1);
	END IF;	
	IF(NEW.Sub_Type  not in('Major Town','Minor Town','Other Town','Metro City','State Capital','Restricted','Major City','Minor City','Other City'))
	THEN
		INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Sub_Type", NEW.Sub_Type, "Sub_Type  not in Major Town,Minor Town,Other Town,Metro City,State Capital,Restricted,Major Town,Minor Town,Other Town", 1);
	ELSE
		IF (NEW.Priority = 1 AND NEW.Sub_Type <> 'Metro City')
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =1,Sub_Type <> Metro City", 1);
		END IF;
		IF (NEW.Priority = 2 AND NEW.Sub_Type NOT IN('Major Town','Metro City','Major City','State Capital'))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =2,Sub_Type not in Major Town,Metro City,Major City,State Capital", 1);
		END IF;	
		IF (NEW.Priority = 3 AND NEW.Sub_Type NOT IN('Minor City','Major Town'))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =3,Sub_Type not in Minor City,Major Town", 1);
		END IF;			
		IF (NEW.Priority = 4 AND NEW.Sub_Type NOT IN('Minor City','Major Town'))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =4,Sub_Type not in Minor City,Major Town", 1);
		END IF;	
		IF (NEW.Priority = 5 AND NEW.Sub_Type NOT IN('Minor Town','Other City'))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =5,Sub_Type not in Minor Town,Other City", 1);
		END IF;		
		IF (NEW.Priority = 6 AND NEW.Sub_Type NOT IN('Minor Town','Other City'))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =6,Sub_Type not in Minor Town,Other City", 1);
		END IF;		
		IF (NEW.Priority = 7 AND NEW.Sub_Type NOT IN('Other Town','Other City'))
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =7,Sub_Type not in Other Town,Other City", 1);
		END IF;	
		IF (NEW.Priority = 8 AND NEW.Sub_Type <>'Other Town')
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =8,Sub_Type not in Other Town", 1);
		END IF;	
		IF (NEW.Priority = 9 AND NEW.Sub_Type <>'Other Town')
		THEN
			INSERT ERROR_MSG VALUES("City_Area_R", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =9,Sub_Type not in Other Town", 1);
		END IF;			
	END IF;	
END$$;
	
/*Trigger structure for table `City_Centre_P`*/ 

CREATE TRIGGER `City_Centre_P_constraints` 
BEFORE INSERT ON `City_Centre_P` FOR EACH ROW 
BEGIN
	IF (NEW.City_Id = 0)
    THEN  
        INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "City_Id", NEW.City_Id, "Cannot be blank Or Zero.", 1);
    END IF; 
        
    IF( NEW.City_Nme = '' OR NEW.City_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "City_Nme", NEW.City_Nme, "Cannot be Blank or Zero.", 1);
	END IF;

    IF((select instr(NEW.City_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Nme, "City_Nme", NEW.City_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.City_Alt,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Alt, "City_Alt", NEW.City_Alt, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Stt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Centre_P", NEW.Stt_Nme, "Stt_Nme", NEW.Stt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
	IF (NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.nStt_Nme <> '0' AND NEW.nStt_Id <> '0')
	THEN
		IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme AND nStt_Id = NEW.nStt_Id))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id Cannot be Blank or Zero.", 1);
	END IF;
	
	IF (NEW.Stt_Nme<>'' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
	THEN
		IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme = NEW.Stt_Nme AND Stt_Id = NEW.Stt_Id) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id Cannot be Blank or Zero.", 1);
	END IF;
	
	IF(!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id = NEW.City_Id AND City_Nme = NEW.City_Nme And City_Alt = NEW.City_Alt) )
	THEN	
		INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "City_Nme", NEW.City_Nme, "City_Nme,City_Id,City_Alt combination not found in City_Area_R",1);
	END IF;
	
	IF(NEW.Tot_P = 0)
	THEN
		INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Tot_P", NEW.Tot_P, "Cannot be Zero.", 1);
	END IF;
	IF(NEW.Tot_P > 20000000)
	THEN
		INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Tot_P", NEW.Tot_P, "Cannot be more than 20000000.", 1);
	END IF;	
	IF(NEW.Cnt_Nme <> 'India' )
	THEN
		INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999) )
    THEN
        INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999", 1);
    END IF;
	IF(NEW.Sub_Type  not in('Major Town','Minor Town','Other Town','Metro City','State Capital','Restricted','Major City','Minor City','Other City'))
	THEN
		INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Sub_Type", NEW.Sub_Type, "Sub_Type  not in Major Town,Minor Town,Other Town,Metro City,State Capital,Restricted,Major Town,Minor Town,Other Town", 1);
	ELSE
		IF (NEW.Priority = 1 AND NEW.Sub_Type <> 'Metro City')
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =1,Sub_Type <> Metro City", 1);
		END IF;
		IF (NEW.Priority = 2 AND NEW.Sub_Type NOT IN('Major Town','Metro City','Major City','State Capital'))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =2,Sub_Type not in Major Town,Metro City,Major City,State Capital", 1);
		END IF;	
		IF (NEW.Priority = 3 AND NEW.Sub_Type NOT IN('Minor City','Major Town'))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =3,Sub_Type not in Minor City,Major Town", 1);
		END IF;			
		IF (NEW.Priority = 4 AND NEW.Sub_Type NOT IN('Minor City','Major Town'))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =4,Sub_Type not in Minor City,Major Town", 1);
		END IF;	
		IF (NEW.Priority = 5 AND NEW.Sub_Type NOT IN('Minor Town','Other City'))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =5,Sub_Type not in Minor Town,Other City", 1);
		END IF;		
		IF (NEW.Priority = 6 AND NEW.Sub_Type NOT IN('Minor Town','Other City'))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =6,Sub_Type not in Minor Town,Other City", 1);
		END IF;		
		IF (NEW.Priority = 7 AND NEW.Sub_Type NOT IN('Other Town','Other City'))
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =7,Sub_Type not in Other Town,Other City", 1);
		END IF;	
		IF (NEW.Priority = 8 AND NEW.Sub_Type <>'Other Town')
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =8,Sub_Type not in Other Town", 1);
		END IF;	
		IF (NEW.Priority = 9 AND NEW.Sub_Type <>'Other Town')
		THEN
			INSERT ERROR_MSG VALUES("City_Centre_P", NEW.City_Id, "Priority/SubType", NEW.Priority, "Priority =9,Sub_Type not in Other Town", 1);
		END IF;			
	END IF;		
END$$;

/*Trigger structure for table `National_State_Island_R` */

CREATE TRIGGER `National_State_Island_R_CONSTRAINTS` 
BEFORE INSERT ON `National_State_Island_R` FOR EACH ROW 
BEGIN
    IF( NEW.Island_Nme = '' OR NEW.Island_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.Island_Nme, "Island_Nme", NEW.Island_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
	    IF((select instr(NEW.Island_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.Island_Nme, "Island_Nme", NEW.Island_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF((select Right(NEW.Island_Nme,6)) <> 'Island') 
	    THEN 
			INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.Island_Nme, "Island_Nme", NEW.Island_Nme, "DOES NNOT END WITH ISLAND", 1);
	    END IF;
	IF( NEW.nStt_Id ='0')
    THEN
		INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.Island_Nme, "nStt_Id", NEW.nStt_Id, "cannot be zero", 1);
	END IF;
	IF( NEW.nStt_Nme ='0')
    THEN
		INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.Island_Nme, "nStt_Nme", NEW.nStt_Nme, "cannot be zero", 1);
	END IF;	
	IF( NEW.nStt_Id <> '' AND NEW.nStt_Nme<>'')
    THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme AND nStt_Id = NEW.nStt_Id) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("National_State_Island_R",NEW.nStt_Id , "nStt_Nme", NEW.nStt_Nme, "nStt_Nme, nStt_Id Combination Not found in National_State_Nav_R.", 1);
		END IF;
	ELSE
        INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.nStt_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Id/nStt_Nme Cannot be Blank or Zero.", 1);
	END IF;
	
	IF( NEW.Cnt_Nme <> 'India')
    THEN
        INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.nStt_Id, "Cnt_Nme", NEW.Cnt_Nme, "Not India.",1);
    END IF;
	
	IF( NEW.Type not in('Enclave','Exclave'))
    THEN
        INSERT ERROR_MSG VALUES("National_State_Island_R", NEW.nStt_Id, "Type", NEW.Type, "Type should be Enclave or Exclave only.",1);
    END IF;
	
END$$;

/*Trigger structure for table `National_Luse_Green_R` */

CREATE TRIGGER `National_Luse_Green_R_CONSTRAINTS` 
BEFORE INSERT ON `National_Luse_Green_R` FOR EACH ROW 
BEGIN
	INSERT luseIdIndia VALUES(NEW.Luse_Id, NEW.Stt_Nme,"National_Luse_Green_R");
    IF( NEW.Luse_Id = 0)
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Green_R", NEW.Luse_Id, "Luse_Id", NEW.Luse_Id, "Cannot be Blank.", 1);
    END IF;

    IF((select instr(NEW.Luse_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_Luse_Green_R", NEW.Luse_Id, "Luse_Nme", NEW.Luse_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;

    IF (NEW.Ftr_Cry NOT IN ('MJG','MNG','OTG','ARN')) 
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Green_R", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry can have only MJG,MNG,OTG,ARN", 1);
	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("National_Luse_Green_R", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
   END IF;

	IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <>  '') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme and nStt_Id = NEW.nStt_Id ) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 1);
		END IF;
	END IF;

	IF(NEW.Stt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
	
	IF(NEW.Stt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "Stt_Id", NEW.Stt_Id, "Cannot be Blank or Zero.", 1);
	END IF;
	
	IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <>  '') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme = NEW.Stt_Nme and Stt_Id = NEW.Stt_Id) = 0 AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Not found in National_State_Gis_R.", 1);
		END IF;
	END IF;
	
	IF(NEW.nStt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
   	IF(NEW.nStt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "nStt_Id", NEW.nStt_Id, "Cannot be Blank or Zero.", 1);
	END IF;
   	IF(NEW.Luse_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "Luse_Nme", NEW.Luse_Nme, "Cannot be Zero.", 1);
	END IF;
	
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Green_R", NEW.Luse_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99) )
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Green_R", NEW.Luse_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99", 1);
    END IF;
   	IF(NEW.Luse_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "Luse_Nme", NEW.Luse_Nme, "Cannot be Zero.", 1);
	END IF;	
	IF((select instr(NEW.CE_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("National_Luse_Green_R", NEW.Luse_Id, "CE_Nme", NEW.CE_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
   	IF(NEW.CE_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "CE_Nme", NEW.CE_Nme, "Cannot be Zero.", 1);
	END IF;	
	IF(New.Horizon not in ("Y",""))
	THEN
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "Horizon", NEW.Horizon, "Horizon should be Y or Blank", 1);
	END IF;
	IF(NEW.CE_Cat <> '') 
	THEN
		IF ((SELECT COUNT(*) FROM `CE_Cat` WHERE CE_Cat = NEW.CE_Cat) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Not found in CE_Cat.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("National_Luse_Green_R",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Blank.", 1);
	END IF;
END$$;


/*Trigger structure for table `national_luse_water_rl` */

CREATE TRIGGER `National_Luse_Water_RL_CONSTRAINTS` 
BEFORE INSERT ON `national_luse_water_rl` FOR EACH ROW 
BEGIN
	INSERT luseIdIndia VALUES(NEW.Luse_Id, NEW.Stt_Nme,"national_luse_water_rl");
    IF( NEW.Luse_Id = 0)
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Water_RL", NEW.Luse_Id, "Luse_Id", NEW.Luse_Id, "Cannot be Blank.", 1);
    END IF;

    IF (NEW.Ftr_Cry NOT IN ('MJW','MNW','OTW')) 
    THEN
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "MJW,MNW,OTW", 1);
	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("National_Luse_Water_RL", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
    END IF;

    IF((select instr(NEW.Luse_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_Luse_Water_RL", NEW.Luse_Id, "Luse_Nme", NEW.Luse_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
   
    
	IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <>  '') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme and nStt_Id = NEW.nStt_Id ) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 1);
		END IF;
	END IF;

	IF(NEW.Stt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
	IF(NEW.Stt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "Stt_Id", NEW.Stt_Id, "Cannot be Blank or Zero.", 1);
	END IF;
	
	IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <>  '') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme = NEW.Stt_Nme and Stt_Id = NEW.Stt_Id) = 0 AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Not found in National_State_Gis_R.", 1);
		END IF;
	END IF;
	
	IF(NEW.nStt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
   	IF(NEW.nStt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "nStt_Id", NEW.nStt_Id, "Cannot be Blank or Zero.", 1);
	END IF;
    
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Water_RL", NEW.Luse_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99) )
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Water_RL", NEW.Luse_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99", 1);
    END IF;
	
	IF(NEW.Luse_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "Luse_Nme", NEW.Luse_Nme, "Cannot be Zero.", 1);
	END IF;	
		IF((select instr(NEW.CE_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL", NEW.Luse_Id, "CE_Nme", NEW.CE_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
   	IF(NEW.CE_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "CE_Nme", NEW.CE_Nme, "Cannot be Zero.", 1);
	END IF;
	IF(New.Horizon not in ("Y",""))
	THEN
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "Horizon", NEW.Horizon, "Horizon should be Y or Blank", 1);
	END IF;	
		IF(NEW.CE_Cat <> '') 
	THEN
		IF ((SELECT COUNT(*) FROM `CE_Cat` WHERE CE_Cat = NEW.CE_Cat) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Not found in CE_Cat.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("National_Luse_Water_RL",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Blank.", 1);
	END IF;
END$$;



/*Trigger structure for table `national_luse_Other_r` */

CREATE TRIGGER `National_Luse_Other_R_CONSTRAINTS` 
BEFORE INSERT ON `national_luse_other_r` FOR EACH ROW 
BEGIN
	INSERT luseIdIndia VALUES(NEW.Luse_Id, NEW.Stt_Nme,"National_Luse_Other_R");
    IF( NEW.Luse_Id = 0)
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Other_R", NEW.Luse_Id, "Luse_Id", NEW.Luse_Id, "Cannot be Blank.", 1);
    END IF;

    IF (NEW.Ftr_Cry NOT IN ('AIR','ARN','OTH')) 
    THEN
		INSERT ERROR_MSG VALUES("National_Luse_Other_R", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "AIR/ARN/OTH", 1);
	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("National_Luse_Other_R", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
    END IF;
    
    IF((select instr(NEW.Luse_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_Luse_Other_R", NEW.Luse_Id, "Luse_Nme", NEW.Luse_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;

	IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <>  '') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme and nStt_Id = NEW.nStt_Id ) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 1);
		END IF;
	END IF;

	IF(NEW.Stt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
	IF(NEW.Stt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "Stt_Id", NEW.Stt_Id, "Cannot be Blank or Zero.", 1);
	END IF;
	
	IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <>  '') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme = NEW.Stt_Nme and Stt_Id = NEW.Stt_Id) = 0 AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Not found in National_State_Gis_R.", 1);
		END IF;
	END IF;
	
	IF(NEW.nStt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
   	IF(NEW.nStt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "nStt_Id", NEW.nStt_Id, "Cannot be Blank or Zero.", 1);
	END IF;
	
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Other_R", NEW.Luse_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99) )
    THEN
        INSERT ERROR_MSG VALUES("National_Luse_Other_R", NEW.Luse_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99", 1);
    END IF;
   	IF(NEW.Luse_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "Luse_Nme", NEW.Luse_Nme, "Cannot be Zero.", 1);
	END IF;		
		IF((select instr(NEW.CE_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("National_Luse_Other_R", NEW.Luse_Id, "CE_Nme", NEW.CE_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
   	IF(NEW.CE_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "CE_Nme", NEW.CE_Nme, "Cannot be Zero.", 1);
	END IF;	
	IF(New.Horizon not in ("Y",""))
	THEN
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "Horizon", NEW.Horizon, "Horizon should be Y or Blank", 1);
	END IF;	
	IF(NEW.CE_Cat <> '') 
	THEN
		IF ((SELECT COUNT(*) FROM `CE_Cat` WHERE CE_Cat = NEW.CE_Cat) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Not found in CE_Cat.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("National_Luse_Other_R",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Blank.", 1);
	END IF;
END$$;
/*Trigger structure for table `city_landuse_rl` */

CREATE TRIGGER `City_Luse_RL_CONSTRAINTS` 
BEFORE INSERT ON `City_Luse_RL` FOR EACH ROW 
BEGIN
	INSERT luseIdIndia VALUES(NEW.Luse_Id, NEW.Stt_Nme,"City_Luse_RL");
    IF( NEW.Luse_Id = 0)
    THEN
        INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "Luse_Id", NEW.Luse_Id, "Cannot be Blank.", 1);
    END IF;
  
    IF (NEW.Ftr_Cry NOT IN ('AIR','MJW','MNW','OTW','MJG','MNG','OTG','OTH','ARN')) 
    THEN
        INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "AIR,MJW,MNW,OTW,MJG,MNG,OTG,OTH,ARN", 1);
    ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
	END IF;
	
	IF(NEW.Stt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
	IF(NEW.Stt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "Stt_Id", NEW.Stt_Id, "Cannot be Blank or Zero.", 1);
	END IF;	
	IF(NEW.nStt_Nme in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
   	IF(NEW.nStt_Id in ('','0'))
	THEN	
		INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "nStt_Id", NEW.nStt_Id, "Cannot be Blank or Zero.", 1);
	END IF;
	
    IF((select instr(NEW.Luse_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "Luse_Nme", NEW.Luse_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;   
	
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99) )
    THEN
        INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99", 1);
    END IF;
	IF(NEW.City_Nme <> '' AND NEW.City_Id = '')
	THEN
        INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "City_Id", NEW.City_Id, "City_Nme not blank,city_Id blank", 1);
    END IF;
	IF(NEW.City_Nme = '' AND NEW.City_Id <> 0)
	THEN
        INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "City_Nme", NEW.City_Nme, "City_Nme blank,city_Id not blank", 1);
    END IF;
	IF(NEW.City_Nme <> '' AND NEW.City_Id <> '')
	THEN
		IF ((SELECT COUNT(*) FROM `City_Area_R` WHERE City_Nme = NEW.City_Nme and City_Id = new.City_Id and nStt_Nme = NEW.nStt_Nme and nStt_Id = NEW.nStt_Id and Stt_Nme = NEW.Stt_Nme and Stt_Id = NEW.Stt_Id) = 0 AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
		THEN 
			INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "City_Nme", NEW.City_Nme, "City_Nme/City_Id/nStt_Nme/nStt_Id/Stt_Nme/Stt_Id did not match in city_area_r", 1);
		END IF;	
	ElSE
		IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <>  '') 
		THEN
			IF ((SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme = NEW.Stt_Nme and Stt_Id = NEW.Stt_Id) = 0 AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
			THEN 
				INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "Stt_Nme", NEW.Stt_Nme, "Not found in National_State_Gis_R.", 1);
			END IF;
		END IF;
		IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <>  '') 
		THEN
			IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme and nStt_Id = NEW.nStt_Id ) = 0 )
			THEN 
				INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 1);
			END IF;
		END IF;
    END IF;
		IF(NEW.Luse_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "Luse_Nme", NEW.Luse_Nme, "Cannot be Zero.", 1);
	END IF;	
		IF((select instr(NEW.CE_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("City_Luse_RL", NEW.Luse_Id, "CE_Nme", NEW.CE_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
   	IF(NEW.CE_Nme ='0')
	THEN	
		INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "CE_Nme", NEW.CE_Nme, "Cannot be Zero.", 1);
	END IF;	
	IF(New.Horizon not in ("Y",""))
	THEN
	INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "Horizon", NEW.Horizon, "Horizon should be Y or Blank", 1);
	END IF;	
		IF(NEW.CE_Cat <> '') 
	THEN
		IF ((SELECT COUNT(*) FROM `CE_Cat` WHERE CE_Cat = NEW.CE_Cat) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Not found in CE_Cat.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id , "CE_Cat", NEW.CE_Cat, "Blank.", 1);
	END IF;
	IF(NEW.Wtr_Id <> '' AND NEW.Wtr_Id <>  '0') 
		THEN
			IF ((SELECT COUNT(*) FROM `National_Luse_Water_RL` WHERE Wtr_Id = NEW.Wtr_Id) = 0)
			THEN 
				INSERT ERROR_MSG VALUES("City_Luse_RL",NEW.Luse_Id,"Wtr_Id", NEW.Wtr_Id, "Wtr_Id Not found in National_Luse_Water_RL.", 1);
			END IF;
		END IF;
END$$;

/*Trigger structure for table `National_State_Nav_R` */

CREATE TRIGGER `National_State_Nav_R_constraints` 
BEFORE INSERT ON `National_State_Nav_R` FOR EACH ROW 
BEGIN
    IF( NEW.nStt_Id = '' OR NEW.nStt_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Id", NEW.nStt_Id, "Cannot be Blank or Zero.", 1);
    ELSE    
        IF( SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id = NEW.nStt_Id)
        THEN
            INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Id", NEW.nStt_Id, "Duplicate value.", 1);
        END IF;
		IF((Select LENGTH(NEW.nStt_Id)) <> 2)
		THEN
			 INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Id", NEW.nStt_Id, "length <> 2", 1);
		END IF;
    END IF;
    
    IF((select instr(NEW.nStt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Nme", NEW.nStt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
     
    IF (NEW.nStt_Nme = '' OR NEW.nStt_Nme = '0')
    THEN  
        INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or zero.", 1);
    END IF;
	

	IF (NEW.nStt_Id = '07')
	THEN
		IF(NEW.nStt_Nme <> 'Delhi')
		THEN  
			INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Nme", NEW.nStt_Nme, "Should be Delhi.", 1);
		END IF;
	END IF;
	
	IF (NEW.nStt_Id = '04')
	THEN
		IF(NEW.nStt_Nme <> 'Chandigarh')
		THEN  
			INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Nme", NEW.nStt_Nme, "Should be Chandigarh.", 1);
		END IF;
	END IF;

	IF(NEW.nStt_Nme = NEW.nStt_Alt)
	THEN
		INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "nStt_Nme", NEW.nStt_Nme, "Cannot be same as nStt_Alt.", 1);
	END IF;
	
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("National_State_Nav_R", NEW.nStt_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
END$$;

/*Trigger structure for table `National_State_Gis_R` */

CREATE TRIGGER `National_State_Gis_R_constraints` 
BEFORE INSERT ON `National_State_Gis_R` FOR EACH ROW 
BEGIN
    IF( NEW.Stt_Id = '' OR NEW.Stt_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Id", NEW.Stt_Id, "Cannot be Blank or Zero.", 1);
    ELSE    
        IF( SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id = NEW.Stt_Id)
        THEN
            INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Id", NEW.Stt_Id, "Duplicate value.", 1);
        END IF;
		IF((Select LENGTH(NEW.Stt_Id)) <> 2)
		THEN
			 INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Id", NEW.Stt_Id, "length <> 2", 1);
		END IF;
    END IF;

	IF (NEW.Stt_Alt <> '')
	Then
		IF(NEW.Stt_Nme = NEW.Stt_Alt)
		THEN
			INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Nme", NEW.Stt_Nme, "Cannot be same as Stt_Alt.", 1);
		END IF;
		IF((select instr(NEW.Stt_Alt,'  ')) >0) 
		THEN 
		INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Alt", NEW.Stt_Alt, "CONTAINS DOUBLE SPACES", 1);
		END IF;
		IF(NEW.Stt_Alt = '0')
		THEN
			INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Alt", NEW.Stt_Alt, "Cannot be Zero.", 1);
		END IF;		
		IF (NEW.Stt_Nme = '')
		THEN
			INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Nme", NEW.Stt_Nme, "Stt_Nme = blank", 1);
		END IF;
	END IF;
    
    IF((select instr(NEW.Stt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Nme", NEW.Stt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;

     	
    IF (NEW.Stt_Nme = '' OR NEW.Stt_Nme = '0')
    THEN  
        INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Nme", NEW.Stt_Nme, "Cannot be blank or zero.", 1);
    ELSE    
        IF( SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme = NEW.Stt_Nme)
        THEN
            INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Stt_Nme", NEW.Stt_Nme, "Duplicate value.", 1);
        END IF;
	END IF;
	
	IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("National_State_Gis_R", NEW.Stt_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    
	END IF;
END$$;

/*Trigger structure for table `national_district_r` */

CREATE TRIGGER `National_District_R_CONSTRAINTS` 
BEFORE INSERT ON `national_district_r` FOR EACH ROW 
BEGIN
    IF( NEW.Dst_Id = '' OR  NEW.Dst_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Id", NEW.Dst_Id, "Cannot be Blank or Zero.", 1);
    ELSE    
		IF((Select LENGTH(NEW.Dst_Id)) <> 5)
		THEN
			 INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Id", NEW.Dst_Id, "length <> 5", 1);
		END IF;
    END IF;

    IF (NEW.Dst_Nme = '' OR  NEW.Dst_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Nme", NEW.Dst_Nme, "Cannot be blank or Zero.", 1);
		if( NEW.Dst_Alt <> '')
		THEN
			INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Alt", NEW.Dst_Alt, "Dst_Nme blank/Dst_Alt not blank", 1);
		END IF;
	ELSE
		IF(Select Right(new.Dst_nme,8)<>"District")
		THEN
			INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Nme", NEW.Dst_Nme, "Dst_Nme Should end with District", 1);
		END IF;
/*		IF (NEW.Dst_Alt <> '' )
		THEN
			INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Alt", NEW.Dst_Alt, "Dst_Nme blank/Dst_alt not blank", 1);
		END IF;*/
		IF((select instr(NEW.Dst_Nme,'  ')) >0) 
		THEN 
			INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Nme", NEW.Dst_Nme, "CONTAINS DOUBLE SPACES", 1);
		END IF;
		
/*		IF(NEW.Dst_Nme IN ('Diu District' ,'Daman District'))
		THEN
			IF(NEW.nStt_Nme <> 'Gujarat')
			THEN
				INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Nme", NEW.Dst_Nme,"nStt_Nme is not Gujarat", 1);
			END IF;
		END IF;	
		IF(NEW.Dst_Nme = 'Yanam District')
		THEN
			IF(NEW.nStt_Nme <> 'Andhra Pradesh')
			THEN
				INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Nme", NEW.Dst_Nme,"nStt_Nme is not Andhra Pradesh", 1);
			END IF;
		END IF;	
		IF(NEW.Dst_Nme = 'Karaikal District')
		THEN
			IF(NEW.nStt_Nme <> 'Tamil Nadu')
			THEN
				INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Nme", NEW.Dst_Nme,"nStt_Nme is not Tamil Nadu", 1);
			END IF;
		END IF;	
		
		IF(NEW.Dst_Nme = 'Mahe District')
		THEN
			IF(NEW.nStt_Nme <> 'Kerala')
			THEN
				INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Nme", NEW.Dst_Nme,"nStt_Nme is not Kerala", 1);
			END IF;
		END IF;
*/		
    END IF;
    
	IF(NEW.Dst_Alt <> "") 
    THEN 
		IF(New.Dst_Alt = New.Dst_Nme)
		THEN
			INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Alt", NEW.Dst_Alt, "Dst_Nme = Dst_Alt", 1);
		END IF;
    END IF;   

    IF((select instr(NEW.Dst_Alt,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Dst_Alt", NEW.Dst_Alt, "CONTAINS DOUBLE SPACES", 1);
    END IF;

	IF( NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
	THEN

		IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
		THEN
			INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme/Stt_Id cannot be Blank or Zero.", 1);	
	END IF;
	/*
	IF (LEFT(NEW.Dst_Id, 2 ) <> NEW.Stt_Id )
	THEN
		INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Stt_Id", NEW.Stt_Id, "First 2 digit of Dst_id should match Stt_Id.", 1);
	END IF;
    */
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("National_District_R", NEW.Dst_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
END$$;


/*Trigger structure for table `national_village_Nav_p` */

CREATE TRIGGER `National_Village_Nav_P_CONSTRAINTS` 
BEFORE INSERT ON `National_Village_Nav_P` FOR EACH ROW
BEGIN
    IF( NEW.Vlg_Id = '' OR NEW.Vlg_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Vlg_Id", NEW.Vlg_Id, "Cannot be Blank or Zero.", 1);
    END IF;
    
    IF (NEW.Vlg_Nme = '' OR NEW.Vlg_Nme = '0')
    THEN  
        INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Vlg_Nme", NEW.Vlg_Nme, "Cannot be Blank or Zero.", 1);
		IF (NEW.Vlg_Alt <> '')
		THEN
			INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Vlg_Alt", NEW.Vlg_Alt, "Vlg_Nme blank & Vlg_alt not blank.", 1);
		END IF;
	ELSE
		IF (NEW.Vlg_Alt <> '' AND NEW.Vlg_Alt = NEW.Vlg_Nme )
		THEN
			INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Vlg_Alt", NEW.Vlg_Alt, "Cannot be same as Vlg_Nme.", 1);
		END IF;
	END IF;
    
    IF((select instr(NEW.Vlg_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Vlg_Nme", NEW.Vlg_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Vlg_Alt,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Vlg_Alt", NEW.Vlg_Alt, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF( NEW.Vlg_Alt = '0')
    THEN 
	INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Vlg_Alt", NEW.Vlg_Alt, "Vlg_Alt =0 ", 1);
    END IF;
	IF( NEW.Source <> '' AND NEW.Dt_Source = '' )
	THEN
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Source", NEW.Source, "Dt_Source cannot be blank.", 2);
	END IF;

	
	IF( NEW.Dt_Source <> '' AND NEW.Source = '' )
	THEN
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Dt_Source", NEW.Dt_Source, "Source cannot be blank.", 2);
	END IF;
	
	IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
	THEN
		IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
		THEN
			INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme/Stt_Id Cannot be Blank or Zero.", 1);
	END IF;
	
	IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.nStt_Nme <> '0' AND NEW.nStt_Id <> '0')
	THEN
		IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id) )
		THEN
			INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme/nStt_Id cannot be Blank or Zero.", 1);
	END IF;
	
	/*IF (LEFT(NEW.Vlg_Id,4) <> NEW.Dst_Id )
	THEN
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Dst_Id", NEW.Dst_Id, "First 4 digit of Vlg_id Should Match Dst_id.", 1);
	END IF;
	*/
	IF( NEW.Cnt_Nme <> 'India' )
	THEN
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
	END IF;
	
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999) )
    THEN
        INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,99", 1);
    END IF;
	IF(NEW.Tot_P = 0)
	THEN
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Tot_P", NEW.Tot_P, "Tot_P =0", 1);
	END IF;	
	IF(NEW.Tot_P  > 20000000)
	THEN
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Tot_P", NEW.Tot_P, "Tot_P > 20000000", 1);
	END IF;	
	IF(NEW.Sub_Type  not in('Major Village','Minor Village','Other Village','Restricted'))
	THEN
		INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "SubType", NEW.Sub_Type, "SubType  not in Major Village,Minor Village,Other Village,Restricted", 1);
	ELSE
		IF(New.Sub_Type ='Major Village' and NEW.Priority not in(3,4,5,6) )
		THEN
			INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Priority/SubType", NEW.Priority, "Priority <>(3,4,5,6) and subtype = Major Village", 1);
		END IF;
		IF(New.Sub_Type ='Minor Village' and NEW.Priority not in(7,8,9) )
		THEN
			INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Priority/SubType", NEW.Priority, "Priority <>(7,8,9) and subtype = Minor Village", 1);
		END IF;
		IF(New.Sub_Type ='Other Village' and NEW.Priority not in(10,11) )
		THEN
			INSERT ERROR_MSG VALUES("National_Village_Nav_P", NEW.Vlg_Id, "Priority/SubType", NEW.Priority, "Priority <>(10,11) and subtype = Other Village", 1);
		END IF;		
	END IF;	
END$$;


/*Trigger structure for table `city_junction_p` */

CREATE TRIGGER `City_Jn_P_CONSTRAINTS` 
BEFORE INSERT ON `city_jn_p` FOR EACH ROW 
BEGIN

    IF( NEW.Junction_id = 0)
    THEN
        INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Junction_id", NEW.Junction_id, "Cannot be Blank.", 1);
    END IF;

    IF (NEW.Elevation NOT IN ('0','-1','1','2')) 
    THEN
        INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Elevation", NEW.Elevation, "0,-1,1,2", 1);
    END IF;
    
    IF (NEW.Jncttyp NOT IN ('0','2','3','4','6')) 
    THEN
        INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Jncttyp", NEW.Jncttyp, "0,2,3,4,6", 1);
    END IF;
    
	IF (NEW.Divider_Cut NOT IN (0,1)) 
    THEN
        INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Divider_Cut", NEW.Divider_Cut, "0,1", 1);
    END IF;

	IF (NEW.Rly_Phatak NOT IN (0,1)) 
    THEN
        INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Rly_Phatak", NEW.Rly_Phatak, "0,1", 1);
    END IF;
	
	IF (NEW.nStt_Nme <> '' AND NEW.nStt_Nme <> '0')
	THEN
		IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) )
		THEN
			INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme cannot be Blank or Zero.", 1);
	END IF;
	 IF(  NEW.Jn_Nme='0')
    THEN
        INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Jn_Nme", NEW.Jn_Nme, "Cannot be Zero.", 1);
	END IF;   
    IF((select instr(NEW.Jn_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Jn_Nme", NEW.Jn_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
	IF( NEW.Toll_booth NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Toll_booth", NEW.Toll_booth, "Y or blank", 1);
	END IF;
	/*IF( NEW.Toll_Fee = 0 and NEW.Toll_booth='Y'  )
	THEN
		INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Toll_Fee", NEW.Toll_Fee, " Toll_booth =Y and Toll_Fee=0 ", 1);
	END IF;
*/
	IF( NEW.Toll_Fee <> 0 and NEW.Toll_booth <>'Y'  )
	THEN
		INSERT ERROR_MSG VALUES("City_Jn_P", NEW.Junction_id, "Toll_Fee", NEW.Toll_Fee, " Toll_booth <> Y and Toll_Fee <> 0 ", 1);
	END IF;
END$$;

/*Trigger structure for table `city_railtrk_l` */

CREATE TRIGGER `City_Railtrk_L_CONSTRAINTS` 
BEFORE INSERT ON `city_railtrk_l` FOR EACH ROW 
BEGIN

    IF(NEW.Trk_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Trk_Nme", NEW.Trk_Nme, "Cannot be Zero.", 1);
    END IF;
    IF( NEW.Trk_Id = '' OR NEW.Trk_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Trk_Id", NEW.Trk_Id, "Cannot be Blank or Zero.", 1);
    END IF;
   
    IF((select instr(NEW.Trk_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("city_railtrk_l", NEW.Trk_Id, "Trk_Nme", NEW.Trk_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    

	IF( NEW.Trk_Lvl = 'National' AND (NEW.City_Nme <> '' OR NEW.City_Id <> 0 ))
	THEN
		INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "City_Id", NEW.City_Id, "Trk_Lvl = 'National', City_Nme/City_Id <> blank ", 1);
	END IF;

	IF( NEW.Trk_Lvl = 'City' AND (NEW.City_Nme = '' OR NEW.City_Id = 0 ))
	THEN
		INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "City_Id", NEW.City_Id, "Trk_Lvl = 'City', City_Nme/City_Id = blank ", 1);
	END IF;
	
	IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0 )
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
		THEN
			INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id combination not found in City_Area_R table.", 1);
		END IF;
		
		IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND nStt_Nme=NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
		THEN
			INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, nStt_Nme, nStt_Id combination not found in City_Area_R table.", 1);
		END IF;
	ELSE
		IF( NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
		THEN
			IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R table.", 1);
			END IF;
		ELSE
			INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme/Stt_Id cannot be blank or Zero.", 1);
		END IF;
	
		IF( NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.nStt_Nme <> '0' AND NEW.nStt_Id <> '0')
		THEN
			IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id) )
			THEN
				INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.",1);
			END IF;
		ELSE
			INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme/nStt_Id cannot be blank or Zero.", 1);
		END IF;
	END IF; 

    IF( NEW.Ftr_Cry NOT IN ('RTRK','MTRK') )
    THEN
        INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Ftr_Cry", NEW.Ftr_Cry, "RTRK,MTRK", 1);
	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
    END IF;

    IF( NEW.Trk_Lvl NOT IN ('National', 'City') )
    THEN
        INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Trk_Lvl", NEW.Trk_Lvl, "National, City", 1);
    END IF;

    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("City_Railtrk_L", NEW.Trk_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
END$$;

/*Trigger structure for table `city_loc_p` */

CREATE TRIGGER `City_Loc_P_CONSTRAINTS` 
BEFORE INSERT ON `City_Loc_P` FOR EACH ROW	
BEGIN
	DECLARE cnStt_Nme char(50);
	INSERT LocIdIndia VALUES(NEW.Loc_Id, NEW.Stt_Nme,"City_Loc_P");
	IF( SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Loc_Nme AND City_Nme=NEW.City_Nme AND Stt_Nme=NEW.Stt_Nme )
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Loc_Nme,City_Nme,Stt_Nme Combination Duplicate.", 1);
	END IF;
	Set cnStt_Nme = NEW.nStt_Nme;
	IF( NEW.Loc_Id = '' OR NEW.Loc_Id='0')
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Loc_Id", NEW.Loc_Id, "Cannot be Blank or Zero.", 1);
    END IF; 
	
	IF(NEW.LblLoc_Nme <> '') 
    THEN 
		IF (NEW.LblLoc_Nme = '0')
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "LblLoc_Nme", NEW.LblLoc_Nme, "Cannot be Zero.", 1);
		END IF;  
		IF((select instr(NEW.LblLoc_Nme,'  ')) >0) 
		THEN 
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "LblLoc_Nme", NEW.LblLoc_Nme, "CONTAINS DOUBLE SPACES", 1);
		END IF;	
	END IF;
	
	IF (NEW.OrgLoc_Nme = '' OR NEW.OrgLoc_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "OrgLoc_Nme", NEW.OrgLoc_Nme, "Cannot be Blank Or Zero.", 1);
	END IF;  
    IF((select instr(NEW.Loc_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.OrgLoc_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "OrgLoc_Nme", NEW.OrgLoc_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.City_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "City_Nme", NEW.City_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Dst_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Dst_Nme", NEW.Dst_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Stt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Stt_Nme", NEW.Stt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.nStt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "nStt_Nme", NEW.nStt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Cnt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Cnt_Nme", NEW.Cnt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Alias_1,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Alias_2,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Alias_3,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Alias_4,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_4", NEW.Alias_4, "CONTAINS DOUBLE SPACES", 1);
    END IF; 
    IF(NEW.Alias_1='0') 
    THEN 
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
    END IF;
    IF(NEW.Alias_2='0') 
    THEN 
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
    END IF;	
    IF(NEW.Alias_3='0') 
    THEN 
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
    END IF;	
    IF(NEW.Alias_4='0') 
    THEN 
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
    END IF;		
    IF(NEW.Loc_Alt='0') 
    THEN 
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Loc_Alt", NEW.Loc_Alt, "cannot be 0", 1);
    END IF;		
    IF (NEW.Loc_Nme = '' OR NEW.Loc_Nme = '0')
    THEN
	    IF (NEW.Sec_Sta <> 'R')
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Cannot be Blank.", 1);
		END IF;
    ELSE
		IF (NEW.Loc_Alt <> '' AND (NEW.Loc_Alt = NEW.Loc_Nme OR NEW.Loc_Alt = NEW.Alias_1 OR 
									NEW.Loc_Alt = NEW.Alias_2 OR NEW.Loc_Alt = NEW.Alias_3 OR 
									NEW.Loc_Alt = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Loc_Alt", NEW.Loc_Alt, "Cannot be same as Loc_Nme/Alias_1/Alias_2/Alias_3/Alias_4", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Loc_Nme OR NEW.Alias_1 = NEW.Loc_Alt OR 
									NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 OR 
									NEW.Alias_1 = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Loc_Nme/Loc_Alt/Alias_2/Alias_3/Alias_4", 2);
		END IF;

		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Loc_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
									NEW.Alias_2 = NEW.Loc_Alt OR NEW.Alias_2 = NEW.Alias_3 OR 
									NEW.Alias_2 = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Loc_Nme/Loc_Alt/Alias_1/Alias_3/Alias_4", 2);
		END IF;

		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Loc_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
									NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Loc_Alt OR 
									NEW.Alias_3 = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Loc_Nme/Loc_Alt/Alias_1/Alias_2/Alias_4", 2);
		END IF;

		IF (NEW.Alias_4 <> '' AND (NEW.Alias_4 = NEW.Loc_Nme OR NEW.Alias_4 = NEW.Alias_1 OR 
									NEW.Alias_4 = NEW.Alias_2 OR NEW.Alias_4 = NEW.Alias_3 OR 
									NEW.Alias_4 = NEW.Loc_Alt))
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Alias_4", NEW.Alias_4, "Cannot be same as Loc_Nme/Loc_Alt/Alias_1/Alias_2/Alias_3", 2);
		END IF;
    END IF;

	IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0 AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' )
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id AND nStt_Nme = NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id))
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Nme,nStt_Id combination not found in City_Area_R table.", 1);
		END IF;
		IF(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.Loc_Nme) 
		THEN 
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Loc_Nme = City_Nme same for City_Area_r and City_Loc_p", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "City_Id", NEW.City_Id, "City_Nme/City_Id/Stt_Nme/Stt_Id/nStt_Nme/nStt_Id cannot be blank.", 1);	
	END IF; 

	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

    IF( NEW.Ftr_Cry NOT IN ('LOC','TWN','VIL') )
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Ftr_Cry", NEW.Ftr_Cry, "LOC,TWN,VIL", 1);
	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
    END IF;
   
    IF( NEW.Source <> '' AND NEW.Dt_Source = '' )
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Source", NEW.Source, "Dt_Source cannot be blank.", 3);
	END IF;
	
    IF( NEW.Source = '' AND NEW.Dt_Source <> '' )
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Source", NEW.Source, "Source cannot be blank.", 3);
	END IF;

    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999) )
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999", 1);
    END IF;

	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", New.Loc_Id,"edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
	END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", New.Loc_Id,"edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
	END IF;
	IF (NEW.Sec_Sta not in ('R','C','KC','KR','PC',''))
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Sec_Sta", NEW.Sec_Sta, "not in R,C,kc,kr or Blank.", 1);
	END IF;
	IF(NEW.Sub_Type  not in('Major Locality','Minor Locality','Other Locality','Restricted'))
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "SubType", NEW.Sub_Type, "SubType  not in Major Locality,Minor Locality,Other Locality,Restricted", 1);
	Else
		IF(New.Sub_Type ='Major Locality' and NEW.Priority not in(7,8,9) )
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Priority/SubType", NEW.Priority, "Priority <>(7,8,9) and subtype = Major Locality", 1);
		END IF;	
		IF(New.Sub_Type ='Minor Locality' and NEW.Priority not in(10,11,12) )
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Priority/SubType", NEW.Priority, "Priority <>(10,11,12) and subtype = Minor Locality", 1);
		END IF;		
		IF(New.Sub_Type ='Other Locality' and NEW.Priority not in(13,14) )
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_P", NEW.Loc_Id, "Priority/SubType", NEW.Priority, "Priority <>(13,14) and subtype = Other Locality", 1);
		END IF;				
	END IF;			
END$$;


/*Trigger structure for table `city_loc_r` */

CREATE TRIGGER `City_Loc_R_CONSTRAINTS` 
BEFORE INSERT ON `City_Loc_R` FOR EACH ROW 
BEGIN
	IF( SELECT COUNT(*) FROM `City_Loc_R` WHERE NEW.Loc_Nme = NEW.City_Nme )
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Loc_Nme=City_Nme", 1);
	END IF;
    
	IF( SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Nme = NEW.Loc_Nme AND City_Nme=NEW.City_Nme )
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Loc_Nme,City_Nme Combination Duplicate.", 1);
	END IF;
	
	IF( NEW.Loc_Id = '' OR NEW.Loc_Id='0')
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Id", NEW.Loc_Id, "Cannot be Blank or Zero.", 1);
    END IF;
	
	IF (NEW.OrgLoc_Nme = '' OR NEW.OrgLoc_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "OrgLoc_Nme", NEW.OrgLoc_Nme, "Cannot be Blank or Zero.", 1);
    END IF;
    IF((select instr(NEW.Loc_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.OrgLoc_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "OrgLoc_Nme", NEW.OrgLoc_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.City_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "City_Nme", NEW.City_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Dst_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Dst_Nme", NEW.Dst_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Stt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Stt_Nme", NEW.Stt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.nStt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "nStt_Nme", NEW.nStt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Cnt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Cnt_Nme", NEW.Cnt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF (NEW.Loc_Nme = '' OR NEW.Loc_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Loc_Alt <> '' AND NEW.Loc_Alt = NEW.Loc_Nme )
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Alt", NEW.Loc_Alt, "Cannot be same as Loc_Nme.", 1);
		END IF;
    END IF;
	IF( !(SELECT COUNT(*) FROM `City_Loc_P` ))
	THEN
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0 AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '')
		THEN	
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id AND nStt_Nme=NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id  ) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id  combination not found in City_Area_R table.", 1);
			END IF;
			IF(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.Loc_Nme) 
			THEN 
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Loc_Nme = City_Nme same for City_Area_r and City_Loc_p", 1);
			END IF;
		ELSE
			INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "City_Id", NEW.City_Id,"City_Nme/City_Id/Stt_Nme/Stt_Id/nStt_Nme/nStt_Id cannot be blank.", 1);	
		END IF;
	ELSE
			IF(!( SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Id = NEW.Loc_Id AND Loc_Nme = NEW.Loc_Nme AND 
													  Loc_Alt = NEW.Loc_Alt AND Ftr_Cry = NEW.Ftr_Cry AND 
													  City_Nme = NEW.City_Nme AND City_Id = NEW.City_Id AND
													  Dst_Nme = NEW.Dst_Nme AND Dst_Id = NEW.Dst_Id AND
													  Stt_Nme = NEW.Stt_Nme AND Stt_Id = NEW.Stt_Id AND
													  nStt_Nme = NEW.nStt_Nme AND nStt_Id = NEW.nStt_Id AND
													  Cnt_Nme = NEW.Cnt_Nme AND OrgLoc_Nme = NEW.OrgLoc_Nme ) AND (!(SELECT COUNT(*) FROM `City_Loc_P`)=0))
        THEN
            			
			IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Id = NEW.Loc_Id AND Loc_Nme = NEW.Loc_Nme AND  Loc_Alt = NEW.Loc_Alt AND OrgLoc_Nme = NEW.OrgLoc_Nme 
			AND Priority = NEW.Priority AND  Sub_Type = NEW.Sub_Type AND Ftr_Cry = NEW.Ftr_Cry))
												  
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Loc_Nme", NEW.Loc_Nme, "Loc_Id/Loc_Nme/Loc_Alt/OrgLoc_Nme/Priority/Sub_type/Ftr_Cry incorrect in City_Loc_P table.", 1);
			END IF;
		
			IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE City_Nme = NEW.City_Nme AND City_Id = NEW.City_Id )  AND (!(SELECT COUNT(*) FROM `City_Loc_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme incorrect in City_Loc_P table.", 1);
			END IF;
			
			IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Stt_Nme = NEW.Stt_Nme AND Stt_Id = NEW.Stt_Id )  AND (!(SELECT COUNT(*) FROM `City_Loc_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme incorrect in City_Loc_P table.", 1);
			END IF;
			
			IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE nStt_Nme = NEW.nStt_Nme AND nStt_Id = NEW.nStt_Id )  AND (!(SELECT COUNT(*) FROM `City_Loc_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme incorrect in City_Loc_P table.", 1);
			END IF;
			
			IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Cnt_Nme = NEW.Cnt_Nme AND Ftr_Cry = NEW.Ftr_Cry)  AND (!(SELECT COUNT(*) FROM `City_Loc_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Ftr_Cry", NEW.Ftr_Cry, "Cnt_Nme/Ftr_Cry incorrect in City_Loc_P table.", 1);
			END IF;
			IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Nme = NEW.Dst_Nme AND Dst_Id = NEW.Dst_Id ))
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Ftr_Cry", NEW.Ftr_Cry, "Dst_Nme/Dst_Id not found in National_District_R.", 1);
			END IF;
		END IF;
	END IF;
    IF( NEW.Ftr_Cry NOT IN ('LOC','TWN','VIL') )
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Ftr_Cry", NEW.Ftr_Cry, "LOC,TWN,VIL", 1);
	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
    END IF;
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
	IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999) )
    THEN
        INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999", 1);
    END IF;
	
	IF(NEW.Sub_Type  not in('Major Locality','Minor Locality','Other Locality','Restricted'))
	THEN
		INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "SubType", NEW.Sub_Type, "SubType  not in Major Locality,Minor Locality,Other Locality,Restricted", 1);
	Else
		IF(New.Sub_Type ='Major Locality' and NEW.Priority not in(7,8,9) )
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Priority/SubType", NEW.Priority, "Priority <>(7,8,9) and subtype = Major Locality", 1);
		END IF;	
		IF(New.Sub_Type ='Minor Locality' and NEW.Priority not in(10,11,12) )
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Priority/SubType", NEW.Priority, "Priority <>(10,11,12) and subtype = Minor Locality", 1);
		END IF;		
		IF(New.Sub_Type ='Other Locality' and NEW.Priority not in(13,14) )
		THEN
			INSERT ERROR_MSG VALUES("City_Loc_R", NEW.Loc_Id, "Priority/SubType", NEW.Priority, "Priority <>(13,14) and subtype = Other Locality", 1);
		END IF;	
	END IF;	
END$$;



/*Trigger structure for table `city_subl_p` */
CREATE TRIGGER `City_Subl_P_CONSTRAINTS` 
BEFORE INSERT ON `city_subl_p` FOR EACH ROW 
BEGIN
	DECLARE cnStt_Nme char(50);
	Set cnStt_Nme = NEW.nStt_Nme;
	INSERT LocIdIndia VALUES(NEW.Subl_Id, NEW.Stt_Nme,"city_subl_p");
	IF( SELECT COUNT(*) FROM `city_subl_p` WHERE NEW.Subl_Nme = NEW.City_Nme )
	THEN
		INSERT ERROR_MSG VALUES("city_subl_p", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "Subl_Nme=City_Nme", 1);
	END IF;
	IF(NEW.LblSub_Nme <> '') 
    THEN 
		IF (NEW.LblSub_Nme = '0')
		THEN
			INSERT ERROR_MSG VALUES("city_subl_p", NEW.Subl_Id, "LblSub_Nme", NEW.LblSub_Nme, "Cannot be Zero.", 1);
		END IF;  
		IF((select instr(NEW.LblSub_Nme,'  ')) >0) 
		THEN 
		INSERT ERROR_MSG VALUES("city_subl_p", NEW.Subl_Id, "LblSub_Nme", NEW.LblSub_Nme, "CONTAINS DOUBLE SPACES", 1);
		END IF;	
	END IF;
	
	IF( SELECT COUNT(*) FROM `city_subl_p` WHERE NEW.Subl_Nme = NEW.Loc_Nme )
	THEN
		INSERT ERROR_MSG VALUES("city_subl_p", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "Subl_Nme=Loc_Nme", 1);
	END IF;
    IF( SELECT COUNT(*) FROM `city_subl_p` WHERE Subl_Nme=NEW.Subl_Nme AND Loc_Nme = NEW.Loc_Nme AND City_Nme=NEW.City_Nme  AND nStt_Nme=NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES("city_subl_p", NEW.Loc_Id, "Subl_Nme", NEW.Subl_Nme, "Subl_Nme,Loc_Nme,City_Nme,nStt_nme Combination Duplicate.", 1);
	END IF;
	IF( NEW.Subl_Id = '' OR NEW.Subl_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Id", NEW.Subl_Id, "Cannot be Blank or Zero.", 1);
    END IF;
    IF((select instr(NEW.Subl_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.OrgSub_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "OrgSub_Nme", NEW.OrgSub_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Subl_Alt,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Alt", NEW.Subl_Alt, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Loc_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Loc_Nme", NEW.Loc_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.City_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "City_Nme", NEW.City_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Dst_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Dst_Nme", NEW.Dst_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;

    IF((select instr(NEW.Stt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Stt_Nme", NEW.Stt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.nStt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "nStt_Nme", NEW.nStt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Cnt_Nme,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Cnt_Nme", NEW.Cnt_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Alias_1,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
    END IF;   
    IF((select instr(NEW.Alias_2,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Alias_3,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Alias_4,'  ')) >0) 
    THEN 
	INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_4", NEW.Alias_4, "CONTAINS DOUBLE SPACES", 1);
    END IF;
	IF (NEW.OrgSub_Nme = '' OR NEW.OrgSub_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "OrgSub_Nme", NEW.OrgSub_Nme, "Cannot be Blank or Zero.", 1);
	END IF;
    IF (NEW.Subl_Nme = '' OR NEW.Subl_Nme = '0')
    THEN
  	    IF (NEW.Sec_Sta <> 'R')
		THEN
	        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "Cannot be Blank.", 1);
		ELSE
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "Cannot be Blank.", 1);
		END IF;
    ELSE
		IF(NEW.Subl_Nme = NEW.Loc_Nme) 
		THEN 
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "Subl_Nme =  Loc_Nme", 1);
		END IF;
		IF (NEW.Subl_Alt <> '' AND (NEW.Subl_Alt = NEW.Subl_Nme OR NEW.Subl_Alt = NEW.Alias_1 OR 
									NEW.Subl_Alt = NEW.Alias_2 OR NEW.Subl_Alt = NEW.Alias_3 OR 
									NEW.Subl_Alt = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Alt", NEW.Subl_Alt, "Cannot be same as Subl_Nme/Alias_1/Alias_2/Alias_3/Alias_4", 2);
		END IF;
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Subl_Nme OR NEW.Alias_1 = NEW.Subl_Alt OR 
									NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 OR 
									NEW.Alias_1 = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Subl_Nme/Subl_Alt/Alias_2/Alias_3/Alias_4", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Subl_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
									NEW.Alias_2 = NEW.Subl_Alt OR NEW.Alias_2 = NEW.Alias_3 OR 
									NEW.Alias_2 = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Subl_Nme/Subl_Alt/Alias_1/Alias_3/Alias_4", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Subl_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
									NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Subl_Alt OR 
									NEW.Alias_3 = NEW.Alias_4))
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Subl_Nme/Subl_Alt/Alias_1/Alias_2/Alias_4", 2);
		END IF;
		IF (NEW.Alias_4 <> '' AND (NEW.Alias_4 = NEW.Subl_Nme OR NEW.Alias_4 = NEW.Alias_1 OR 
									NEW.Alias_4 = NEW.Alias_2 OR NEW.Alias_4 = NEW.Alias_3 OR 
									NEW.Alias_4 = NEW.Subl_Alt))
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_4", NEW.Alias_4, "Cannot be same as Subl_Nme/Subl_Alt/Alias_1/Alias_2/Alias_3", 2);
		END IF;
    END IF;
    IF ((NEW.Loc_Nme <> '' AND NEW.Loc_Id = '') OR (NEW.Loc_Nme = '' AND NEW.Loc_Id <> ''))
    THEN
		INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Loc_Id", NEW.Loc_Id, "Either Loc_Nme/Loc_Id is Blank.", 1);	
    END IF; 
    IF (NEW.Loc_Nme <> '' AND NEW.Loc_Id <> '')
    THEN  
        IF ((!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id AND nStt_Nme=NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id))  AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
		THEN
            INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme, Loc_Id, City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Loc_R.", 1);
        END IF;
			IF(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Subl_Nme) 
			THEN 
				INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "Subl_Nme = Loc_Nme same for City_Loc_R and City_Subl_P", 1);
			END IF;		
	ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0 AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '')
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND Stt_Nme=NEW.Stt_Nme AND Stt_Id=NEW.Stt_Id AND nStt_Nme=NEW.nStt_Nme AND nStt_Id=NEW.nStt_Id)  AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Area_R table.", 1);
			END IF;
			IF(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.Subl_Nme) 
			THEN 
				INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Nme", NEW.Subl_Nme, "Subl_Nme = City_Nme same for City_Area_r and City_Subl_P", 1);
			END IF;
		ELSE
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "City_Id", NEW.City_Id,"City_Nme/City_Id/Stt_Nme/Stt_Id/nStt_Nme/nStt_Id cannot be blank.", 1);	
		END IF; 
    END IF;
	IF ((SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.Dst_Id AND Dst_Nme=NEW.Dst_Nme)=0)
	THEN
		INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "City_Id", NEW.City_Id, "Dst_Nme/Dst_Id combination not found in National_District_R table.", 1);
	END IF;	
    IF( NEW.Ftr_Cry NOT IN ('SLC','CWK'))
    THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Ftr_Cry", NEW.Ftr_Cry, "SLC,CWK", 1);
    END IF;
    IF( NEW.Cnt_Nme <> 'India' )
    THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
    END IF;
		IF( NEW.Priority not in(1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999) )
    THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Priority", NEW.Priority, "Priority not in 1,2,3,4,5,6,7,8,9,10,11,12,13,14,99,999", 1);
    END IF;
	IF (NEW.Subl_Alt = '0')
	THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Subl_Alt", NEW.Subl_Alt, " Subl_Alt=0 ", 1);
    END IF;		
	IF (NEW.Alias_1 = '0')
	THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_1", NEW.Alias_1, " Alias_1=0 ", 1);
    END IF;
	IF (NEW.Alias_2 = '0')
	THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_1", NEW.Alias_1, " Alias_2=0 ", 1);
    END IF;
	IF (NEW.Alias_3 = '0')
	THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_1", NEW.Alias_1, " Alias_3=0 ", 1);
    END IF;
	IF (NEW.Alias_4 = '0')
	THEN
        INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Alias_1", NEW.Alias_1, " Alias_4=0 ", 1);
    END IF;	
		IF( NEW.edge_Id =0 and NEW.edge_side <> '')
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", New.Subl_Id ,"edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
		END IF;
		IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", New.Subl_Id , "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
		END IF;
			IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;
	IF(NEW.Sub_Type  not in('Major SubLocality','Minor SubLocality','Other SubLocality','Restricted'))
	THEN
		INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "SubType", NEW.Sub_Type, "SubType  not in Major SubLocality,Minor SubLocality,Other SubLocality,Restricted", 1);
	Else
		IF(New.Sub_Type ='Major SubLocality' and NEW.Priority not in(7,8,9) )
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Priority/SubType", NEW.Priority, "Priority <>(7,8,9) and subtype = Major SubLocality", 1);
		END IF;	
		IF(New.Sub_Type ='Minor SubLocality' and NEW.Priority not in(10,11) )
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Priority/SubType", NEW.Priority, "Priority <>(10,11) and subtype = Minor SubLocality", 1);
		END IF;		
		IF(New.Sub_Type ='Other SubLocality' and NEW.Priority not in(12,13) )
		THEN
			INSERT ERROR_MSG VALUES("City_Subl_P", NEW.Subl_Id, "Priority/SubType", NEW.Priority, "Priority <>(12,13) and subtype = Other SubLocality", 1);
		END IF;	
	END IF;	
END$$;



/*Trigger structure for table `city_roads_AP_main` */
CREATE TRIGGER `City_Roads_AP_Main_CONSTRAINTS` BEFORE INSERT ON `city_roads_AP_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_AP";
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
	Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Fow_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Cannot be Zero", 1);
	    END IF;			
	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_Prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
		END IF;
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/*IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

   /*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
   ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
			IF(NEW.HR_Road_Name<>NEW.FOW_NME)
			THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
			END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
		END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;           
    END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
    END IF;
END IF;*/

	IF(NEW.Route_No <> '' )
	THEN
		IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;  

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;
	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))

			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
	ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
		IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>50)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr = 'NGQ' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>25)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
				END IF;
			END IF;
		END IF;


		IF(cStr = 'NHY' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>35)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>15)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
		END IF;

		IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
		END IF;
	END IF;
 	
	
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;	
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;
    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;
    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
		IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;		
    END IF;

	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in El,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF ( (NEW.From_Elev not in (-1,0,1) ) OR (NEW.To_Elev not in (-1,0,1) ) )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev should have values -1,0,1", 1);		
		END IF;
	END IF;
	IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
	IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
	IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	

	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;
END$$;


/*Trigger structure for table `city_roads_AP` */
CREATE TRIGGER `City_Roads_AP_CONSTRAINTS` BEFORE INSERT ON `city_roads_AP` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_AP";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;



/*Trigger structure for table `City_Roads_BR_main` */

CREATE TRIGGER `City_Roads_BR_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_BR_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_BR";
	   
         /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS,MV and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;
	    
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
			IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
ELSE
			
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
    END IF;
END IF;
*/
	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN			
					IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1)) OR (NEW.To_Elev not in(-1,0,1)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_BR` */

CREATE TRIGGER `City_Roads_BR_CONSTRAINTS` BEFORE INSERT ON `City_Roads_BR` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_BR";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;

END$$;


/*Trigger structure for table `City_Roads_CH_main` */

CREATE TRIGGER `City_Roads_CH_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_CH_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_CH";
	   
         /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	   
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
				
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
		IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
 
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_CH` */

CREATE TRIGGER `City_Roads_CH_CONSTRAINTS` BEFORE INSERT ON `City_Roads_CH` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_CH";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_CG_main` */

CREATE TRIGGER `City_Roads_CG_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_CG_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_CG";
	          /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	   
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
				
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;*/



	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;

	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;  

	IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
	IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;		
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;

/*Trigger structure for table `City_Roads_CG` */
CREATE TRIGGER `City_Roads_CG_CONSTRAINTS` BEFORE INSERT ON `City_Roads_CG` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_CG";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_DN_main` */

CREATE TRIGGER `City_Roads_DN_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_DN_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_DN";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	   
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
   /*  IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
			
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/
	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;
	IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;	
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
 
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;
	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_DN` */

CREATE TRIGGER `City_Roads_DN_CONSTRAINTS` BEFORE INSERT ON `City_Roads_DN` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_DN";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_DL_main` */

CREATE TRIGGER `City_Roads_DL_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_DL_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_DL";
	      /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
			IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/	   
	   
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/

	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
 	

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_DL` */

CREATE TRIGGER `City_Roads_DL_CONSTRAINTS` BEFORE INSERT ON `City_Roads_DL` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_DL";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_GA_main` */

CREATE TRIGGER `City_Roads_GA_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_GA_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_GA";
	     /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	  
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/ 
	   
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	  
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_GA` */

CREATE TRIGGER `City_Roads_GA_CONSTRAINTS` BEFORE INSERT ON `City_Roads_GA` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_GA";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_GJ_main` */

CREATE TRIGGER `City_Roads_GJ_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_GJ_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_GJ";
	      /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/   
	   	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	 
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;
	*/
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/

	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
 

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_GJ` */

CREATE TRIGGER `City_Roads_GJ_CONSTRAINTS` BEFORE INSERT ON `City_Roads_GJ` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_GJ";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_HP_main` */

CREATE TRIGGER `City_Roads_HP_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_HP_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_HP";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/   
	   	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_HP` */

CREATE TRIGGER `City_Roads_HP_CONSTRAINTS` BEFORE INSERT ON `City_Roads_HP` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_HP";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_HR_main` */

CREATE TRIGGER `City_Roads_HR_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_HR_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_HR";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
			Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	   
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
 END IF;
 
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_HR` */

CREATE TRIGGER `City_Roads_HR_CONSTRAINTS` BEFORE INSERT ON `City_Roads_HR` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_HR";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_JH_main` */

CREATE TRIGGER `City_Roads_JH_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_JH_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_JH";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	 
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/  
	   

	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
  /*   IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
		IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
 
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_JH` */

CREATE TRIGGER `City_Roads_JH_CONSTRAINTS` BEFORE INSERT ON `City_Roads_JH` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_JH";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_JK_main` */

CREATE TRIGGER `City_Roads_JK_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_JK_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_JK";
	    /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/	   
	   
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	   
 /*IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;  */ 

   IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
	
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','SC','EL','EM','WW','PZ'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_JK` */

CREATE TRIGGER `City_Roads_JK_CONSTRAINTS` BEFORE INSERT ON `City_Roads_JK` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_JK";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_KA_main` */

CREATE TRIGGER `City_Roads_KA_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_KA_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_KA";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/	   
	   


	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;

*/

	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
	
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
 
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_KA` */

CREATE TRIGGER `City_Roads_KA_CONSTRAINTS` BEFORE INSERT ON `City_Roads_KA` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_KA";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_KL_main` */

CREATE TRIGGER `City_Roads_KL_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_KL_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_KL";
	      /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;	
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/	   
	   

	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	 
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;
		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_KL` */

CREATE TRIGGER `City_Roads_KL_CONSTRAINTS` BEFORE INSERT ON `City_Roads_KL` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_KL";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_MP_main` */

CREATE TRIGGER `City_Roads_MP_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_MP_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_MP";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	 
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/  
	   
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
   /*  IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;


    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
						IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_MP` */

CREATE TRIGGER `City_Roads_MP_CONSTRAINTS` BEFORE INSERT ON `City_Roads_MP` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_MP";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_MH_main` */

CREATE TRIGGER `City_Roads_MH_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_MH_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_MH";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	   
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
					IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;



    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;
	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_MH` */

CREATE TRIGGER `City_Roads_MH_CONSTRAINTS` BEFORE INSERT ON `City_Roads_MH` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_MH";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_NE_main` */

CREATE TRIGGER `City_Roads_NE_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_NE_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_NE";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	  
/*n*/			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
					IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/ 
	   	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_NE` */

CREATE TRIGGER `City_Roads_NE_CONSTRAINTS` BEFORE INSERT ON `City_Roads_NE` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_NE";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_OR_main` */

CREATE TRIGGER `City_Roads_OR_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_OR_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_OR";
	      /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
    
    IF((select instr(NEW.Road_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;

    IF((select instr(NEW.Road_Alt,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Route_No,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
    END IF;
    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
    END IF;	   
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
    IF(NEW.Fow_prev IN("FL","SU"))
    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
    	END IF;
     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	 
    /*IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
			IF(NEW.HR_Road_Name<>NEW.FOW_NME)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
			END IF;
	    END IF;
	    
        IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/

	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;



    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;
		IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;		
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_OR` */

CREATE TRIGGER `City_Roads_OR_CONSTRAINTS` BEFORE INSERT ON `City_Roads_OR` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_OR";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_PY_main` */

CREATE TRIGGER `City_Roads_PY_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_PY_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_PY";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
				IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/   
	   
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet.
    END IF;
END IF;*/



	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
	IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_PY` */

CREATE TRIGGER `City_Roads_PY_CONSTRAINTS` BEFORE INSERT ON `City_Roads_PY` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_PY";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_PB_main` */

CREATE TRIGGER `City_Roads_PB_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_PB_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_PB";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	  
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
					IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/ 
	   
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;*/



	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;	

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_PB` */

CREATE TRIGGER `City_Roads_PB_CONSTRAINTS` BEFORE INSERT ON `City_Roads_PB` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_PB";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_RJ_main` */

CREATE TRIGGER `City_Roads_RJ_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_RJ_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_RJ";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;

	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	   

			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
					IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   

	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;*/
	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
		IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_RJ` */

CREATE TRIGGER `City_Roads_RJ_CONSTRAINTS` BEFORE INSERT ON `City_Roads_RJ` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_RJ";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_TN_main` */

CREATE TRIGGER `City_Roads_TN_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_TN_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_TN";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
					IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/	   
	   
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;
	
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;
		IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;		
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;
	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_TN` */

CREATE TRIGGER `City_Roads_TN_CONSTRAINTS` BEFORE INSERT ON `City_Roads_TN` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_TN";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_UA_main` */

CREATE TRIGGER `City_Roads_UA_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_UA_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_UA";
	     /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
		   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;	   
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
		IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
			IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/
	   
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	  
    /* IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;
*/

	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;

    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;
		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_UA` */

CREATE TRIGGER `City_Roads_UA_CONSTRAINTS` BEFORE INSERT ON `City_Roads_UA` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_UA";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `City_Roads_UP_main` */

CREATE TRIGGER `City_Roads_UP_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_UP_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_UP";
	       /* Check on  PJ,MD,Proc_Stat,Proc_Date is added on 10/nov/09 by sanjay*/
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
					IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/	   
	   
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/*IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;   */

   IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;*/



	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;
IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;
			
		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
		/*	cStr = RIGHT(NEW.Fow_Nme, 7 );
			IF(cStr not in("derPass"," Subway"))*/
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
END IF;



    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	
	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_UP` */

CREATE TRIGGER `City_Roads_UP_CONSTRAINTS` BEFORE INSERT ON `City_Roads_UP` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_UP";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `city_roads_WB_main` */

CREATE TRIGGER `City_Roads_WB_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_WB_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_WB";
	
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
		Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	   
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
					IF(New.Fow_Prev ='EL' And NEW.From_Elev <> NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EL,From_Elev <> to To_Elev",1);
		END IF;
		IF(New.Fow_Prev ='EM' And NEW.From_Elev = NEW.To_Elev)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=EM,From_Elev =To_Elev",1);
		END IF;		
	    IF(NEW.Fow_prev IN("FL","SU"))
	    THEN
		IF((NEW.From_Elev=0) AND (NEW.To_Elev=0))
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU,From_elev,To_elev<>0", 1);		
 	    	END IF;
	     END IF;

	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
 	    	END IF;
/*n*/	   
	   
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	 
   /*  IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;
	
	/*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
	ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
		IF(NEW.HR_Road_Name<>NEW.FOW_NME)
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
		END IF;
	    END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			
			/*SET pos = INSTR(NEW.Road_Nme, NEW.HR_Road_Name);
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;
		
           
           END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;

		/* TODO A condition to check if any junk is in HR_Road_nme - has not been implemented yet. 
    END IF;
END IF;*/


	IF(NEW.Route_No <> '' )
	THEN
				IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;
    
  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;
    

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
   
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;

	/*IF( NEW.Fow_Prev  IN ('CR','SR','UU','RM')AND NEW.One_Way <> "FT")
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, " ** Fow_Prev='CR'/'SR'/'UU'/'RM', ONE_WAY<>'FT' ** ", 3);
    END IF;*/ 

	IF( NEW.Fow_Nme <> '')
    THEN
       	IF (NEW.Fow_Prev='SU')
		THEN
			/*cStr = RIGHT(NEW.Fow_Nme, 7 );*/
			IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
			ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			/*SET cStr = NEW.Frc_M;*/
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
		IF(NEW.Spd_m= 0)
	THEN
	IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>55)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>50)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr = 'NGQ' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>45)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
			END IF;
		END IF;			
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
	END IF;
	
	IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>30)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>25)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
			END IF;
		END IF;
	END IF;


	IF(cStr = 'NHY' AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>40)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>35)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
	THEN
		If(NEW.Fow_Prev ='FL')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		If(NEW.BP_Cry ='BP')
		THEN
			IF(NEW.Spd_Lmt<>20)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
			END IF;
		END IF;
		IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
		THEN
			IF(NEW.Spd_Lmt<>15)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
			END IF;
		END IF;
	END IF;

	IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
	END IF;

	IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
	END IF;
	END IF;
	
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;
   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;
    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;

    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE
	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;

    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
				IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;
    END IF;
	
	/* commenetd on 14 aug*/
	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EL,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF((NEW.From_Elev not in(-1,0,1,2)) OR (NEW.To_Elev not in(-1,0,1,2)))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev >0", 1);		
		END IF;
	END IF;

		IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
		IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
		IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;
	END IF;	
	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;	
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_WB` */

CREATE TRIGGER `City_Roads_WB_CONSTRAINTS` BEFORE INSERT ON `City_Roads_WB` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_WB";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `city_roads_LD_main` */
CREATE TRIGGER `City_Roads_LD_Main_CONSTRAINTS` BEFORE INSERT ON `city_roads_LD_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_LD";
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
	Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Fow_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Cannot be Zero", 1);
	    END IF;			
	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_Prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
		END IF;
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/*IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

   /*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
   ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
			IF(NEW.HR_Road_Name<>NEW.FOW_NME)
			THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
			END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
		END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;           
    END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
    END IF;
END IF;*/
	IF(NEW.Route_No <> '' )
	THEN
		IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;  

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;
	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))

			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
	ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
		IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>50)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr = 'NGQ' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>25)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
				END IF;
			END IF;
		END IF;


		IF(cStr = 'NHY' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>35)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>15)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
		END IF;

		IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
		END IF;
	END IF;
 	
	
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;	
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;
    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;
    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
		IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;		
    END IF;

	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in El,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF ( (NEW.From_Elev not in (-1,0,1) ) OR (NEW.To_Elev not in (-1,0,1) ) )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev should have values -1,0,1", 1);		
		END IF;
	END IF;
	IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should be equal to routable_m", 1);
		END IF;
	END IF;
	IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
	IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	

	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;	



END$$;


/*Trigger structure for table `City_Roads_LD` */
CREATE TRIGGER `City_Roads_LD_CONSTRAINTS` BEFORE INSERT ON `City_Roads_LD` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_LD";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `City_Roads_AN_main` */
CREATE TRIGGER `City_Roads_AN_Main_CONSTRAINTS` BEFORE INSERT ON `City_Roads_AN_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_AN";
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
	Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Fow_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Cannot be Zero", 1);
	    END IF;			
	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_Prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "For From_elev,To_elev<>0 Fow_prev should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
		END IF;
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/*IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

   /*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
   ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
			IF(NEW.HR_Road_Name<>NEW.FOW_NME)
			THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
			END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
		END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;           
    END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
    END IF;
END IF;*/
	IF(NEW.Route_No <> '' )
	THEN
		IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;  

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;
	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))

			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
	ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
		IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>50)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr = 'NGQ' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>25)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
				END IF;
			END IF;
		END IF;


		IF(cStr = 'NHY' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>35)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>15)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
		END IF;

		IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
		END IF;
	END IF;
 	
	
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;	
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;
    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;
    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
		IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;		
    END IF;

	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in El,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF ( (NEW.From_Elev not in (-1,0,1) ) OR (NEW.To_Elev not in (-1,0,1) ) )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev should have values -1,0,1", 1);		
		END IF;
	END IF;
	IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should be equal to routable_m", 1);
		END IF;
	END IF;
	IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
	IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	

	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;



END$$;


/*Trigger structure for table `City_Roads_AN` */
CREATE TRIGGER `City_Roads_AN_CONSTRAINTS` BEFORE INSERT ON `City_Roads_AN` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_AN";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `city_roads_DD_main` */
CREATE TRIGGER `City_Roads_DD_Main_CONSTRAINTS` BEFORE INSERT ON `city_roads_DD_main` FOR EACH ROW 
BEGIN
	DECLARE cStr char(15);
	DECLARE Tab_Nme char(20);
	DECLARE pos integer;
	DECLARE flag1, flag2, flag3, flag4 integer;
	Set Tab_Nme = "City_Roads_DD";
	IF(NEW.PJ NOT IN ('','II','M','D'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PJ", NEW.PJ, "Not Found Values in II,M,D and blank", 1);
	Else
		IF(NEW.PJ IN ('II','M') and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "PJ in II,M  and Fow_Prev in EM,EL ", 1);
		END IF;
	END IF;
	
	IF(NEW.MD NOT IN (1,0))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "Not Found Values in 0 and 1", 1);
	END IF;
	
	IF(NEW.MD=1)
	THEN	
		IF( NEW.One_Way<>'FT')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "MD", NEW.MD, "MD=1 and Onw_Way<>'FT'", 1);
		END IF;
		/*IF( NEW.Md_Grp_Id < 1 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Md_Grp_Id", NEW.Md_Grp_Id, "MD=1 and Md_Grp_Id should be greater than 1", 1);
		END IF;*/
	END IF;
	
	IF(NEW.Proc_Stat NOT IN ('','GV','FS','MV','VS'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "Not Found Values in GV, FS, MV,VS  and blank", 2);
	ElSE
		IF((NEW.Proc_Stat=''and NEW.Proc_Date<>'') or (NEW.Proc_Stat<>''and NEW.Proc_Date=''))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Stat", NEW.Proc_Stat, "One is Blank Other is not",2);
		END IF;
	END IF;
	    IF((select instr(NEW.Road_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Road_Alt,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Route_No,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Fow_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Fow_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Cannot be Zero", 1);
	    END IF;			
	    IF((NEW.From_Elev<>0) OR (NEW.To_Elev<>0))
	    THEN
		IF(NEW.Fow_Prev ='')
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "For From_elev,To_elev<>0 Fow_prev  should not be blank ", 1);		
 	    	END IF;
	     END IF;
		IF(NEW.Fow_Nme<>'' and NEW.Fow_Prev='')
		THEN
	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"Fow_prev",NEW.Fow_Prev, "if Fow_Nme='' then Fow_prev should not be blank", 1);		
		END IF;
	IF(NEW.Proc_Date <>'' and length(New.Proc_Date)<>6 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Proc_Date", NEW.Proc_Date, "Value not in YYMMDD format",2);
	END IF;
	
	/*IF(NEW.Road_Nme ='' AND NEW.Road_Alt ='' AND NEW.Route_No ='' AND NEW.Fow_Nme ='' AND NEW.Road_Subloc <> '')
	THEN 
		IF(NEW.HR_Road_Name <> NEW.Road_Subloc)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Value of HR_Road_Name and Road_Subloc is not same", 1);
		END IF;
	END IF;*/
	
	IF (NEW.Road_Id = '' OR NEW.Road_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "Cannot be Blank or Zero.", 1);
    END IF;

    IF (NEW.Road_Nme <> "" AND NEW.Road_Alt <> "" AND NEW.Road_Alt = NEW.Road_Nme )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be same as Road_Nme.", 1);
    END IF;

    IF (NEW.Road_Nme = "" AND NEW.Road_Alt <> "" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Nme Cannot be blank.", 1);
    END IF;

   /*IF (NEW.HR_Road_Name = '' AND ( NEW.Road_Nme <> '' OR NEW.Road_Alt <> '' OR NEW.Route_No <> '' OR NEW.Fow_Nme <> '' ))
    THEN
        IF(NEW.Fow_Nme <> 'Under Flyover')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "Road_Nme/Road_Alt/Route_No/Fow_Nme not blank, HR_Road_Name = ''.", 1);
        END IF;
   ELSE
		
	    IF(NEW.Fow_Prev In("FL","BR","RM","UU","CR","SU") and NEW.Fow_Nme<>'')
	    THEN
			IF(NEW.HR_Road_Name<>NEW.FOW_NME)
			THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "HR_Road_Name<>Fow_nme,if Fow-Prev is FL/BR/RM/UU/CR/SU", 1);		
			END IF;
			IF(NEW.Fow_Prev ='CR')
			THEN
				IF(new.ftr_cry in('RDD','OHY'))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "ftr_cry", NEW.ftr_cry, "For fow_prev=CR,then ftr_cry should not be RDD/OHY",2);
				END IF;
			END IF;
		END IF;
	    
           IF(NEW.Fow_Prev='BP' AND NEW.Fow_Nme<>'')
		THEN
	   	
		IF(NEW.Road_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
			IF( pos = 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP and HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;
		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_prev=BP HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
		IF(NEW.Fow_Nme <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Fow_Nme);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Id", NEW.Road_Id, "For Fow_prev=BP HR_Road_Nme does not contain Fow_Nme", 3);
			ELSE
				Set flag4 = pos;
			END IF;
		END IF;           
    END IF;		
 	
	IF(NEW.Fow_Nme="" OR NEW.Fow_Prev NOT IN("FL","BR","RM","UU","CR","SU","BP","TN"))			
		THEN
		
		IF(NEW.Road_Nme <> '')
		THEN
		SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Bse);
		IF( pos = 0 )
		THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Bse", 3);
			ELSE
				Set flag1 = pos;
			END IF;
		END IF;

		IF(NEW.Road_Alt <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Road_Alt);
			IF(pos = 0) 
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Road_Alt", 3);
			ELSE
				Set flag2 = pos;
			END IF;
		END IF;

		IF(NEW.Route_No <> '')
		THEN
			SET pos = INSTR(NEW.HR_Road_Name, NEW.Route_No);
			IF(pos = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "HR_Road_Name", NEW.HR_Road_Name, "For Fow_Prev <> FL/BR/RM/UU/CR/SU/BP, HR_Road_Nme does not contain Route_No", 3);
			ELSE
				Set flag3 = pos;
			END IF;
		END IF;
    END IF;
END IF;*/

	IF(NEW.Route_No <> '' )
	THEN
		IF (LEFT(NEW.Route_No, 3 ) not in("NH ","SH ","NE "))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "Does not start with 'NH ','SH ' or 'NE ' .", 1);
	   	END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "NH " AND NEW.FTR_CRY NOT IN ('NGQ','CGQ','NHY','CTN'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "FTR_CRY", NEW.FTR_CRY, "Route_No starts with 'NH ' AND Ftr_Cry NOT IN (NGQ, CGQ, NHY, CTN)", 1);
		END IF;

		IF (LEFT(NEW.Route_No, 3 ) = "SH " AND NEW.FTR_CRY NOT IN ('SHY'))
		THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Route_No", NEW.Route_No, "ROUTE NO starts with 'SH ' AND FTR_CRY NOT IN (SHY)", 1);
		END IF;
    END IF;  
  
    IF(NEW.Typ_Pos NOT IN ('B','E',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Typ_Pos", NEW.Typ_Pos, "B,E,''", 1);
    ELSE
		IF (NEW.Typ_Pos = '' )
		THEN
			IF( NEW.Road_Nme <> NEW.Road_Bse)
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos='', Road_Nme<>Road_Bse.", 2);
			END IF;	
			IF(NEW.Road_Bse like "%Road%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Road", 1);
			End IF;

			IF(NEW.Road_Bse like "%Marg%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Marg", 1);
			End IF;

			IF(NEW.Road_Bse like "%Lane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lane", 1);
			End IF;
			IF(NEW.Road_Bse like "%Gali%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Gali", 1);
			End IF;
			IF(NEW.Road_Bse like "%Path%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Path", 1);
			End IF;
			IF(NEW.Road_Bse like "%Street%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Street", 1);
			End IF;
			IF(NEW.Road_Bse like "%Highway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Highway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Avenue%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Avenue", 1);
			End IF;
			IF(NEW.Road_Bse like "%Expressway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Expressway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Rasta%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Rasta", 1);
			End IF;
			IF(NEW.Road_Bse like "%Galli%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Galli", 1);
			End IF;
			IF(NEW.Road_Bse like "%Salai%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Salai", 1);
			End IF;
			IF(NEW.Road_Bse like "%Veethi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Veethi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Vithi%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Vithi", 1);
			End IF;
			IF(NEW.Road_Bse like "%Sarak%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Sarak", 1);
			End IF;
			IF(NEW.Road_Bse like "%Drive%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Drive", 1);
			End IF;
			IF(NEW.Road_Bse like "%Line%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Line", 1);
			End IF;
			IF(NEW.Road_Bse like "%Lines%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Lines", 1);
			End IF;
			IF(NEW.Road_Bse like "%Driveway%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Driveway", 1);
			End IF;
			IF(NEW.Road_Bse like "%Bylane%")
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Bse", NEW.Road_Bse, "Raoad base has : Bylane", 1);
			End IF;

		ELSE
			IF(CHAR_LENGTH(TRIM(NEW.Road_Nme)) <> CHAR_LENGTH(TRIM(NEW.Road_Typ))+1+CHAR_LENGTH(TRIM(NEW.Road_Bse)))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme not a combination of Road_Typ + " " + Road_bse.", 2);
			ELSE
				IF(NEW.Typ_Pos ='B')
				THEN
					IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))) <> NEW.Road_Typ)
					THEN
						INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not starting with Road_Typ.", 2);
					ELSE
						IF( MID(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ))+1,1)<>' ')
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, No space after Road_Type in Road_Nme.", 2);
						ELSE
							IF( RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=B, Road_Nme not ending with Road_Bse.", 2);
							END IF;
						END IF;
					END IF;
				ELSE
					IF (NEW.Typ_Pos ='E' )
					THEN
						IF( LEFT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Bse)))<>NEW.Road_Bse)
						THEN
							INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not starting with Road_Bse.", 2);
						ELSE
							IF( MID(NEW.Road_Nme,CHAR_LENGTH(TRIM(NEW.Road_Bse))+1,1)<>' ')
							THEN
								INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, No space after Road_Bse in Road_Nme.", 2);
							ELSE
								IF(RIGHT(NEW.Road_Nme, CHAR_LENGTH(TRIM(NEW.Road_Typ)))<>NEW.Road_Typ)
								THEN
									INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Type_Pos=E, Road_Nme not ending with Road_Typ.", 2);
								END IF;
							END IF;		
						END IF;
					END IF;	
				END IF;	
			END IF;
   		END IF;
   	END IF;  

	IF(NEW.Fow_Prev = '' AND NEW.Fow_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Cannot be Blank", 1);
	END IF;
	
    IF( NEW.Fow_Prev  IN ('CR','SR','UU')AND NEW.Road_Nme <> '')
    THEN
   		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev ='CR'/'SR'/'UU'/, Road_Nme<> ''", 3);
    END IF;
	IF( NEW.Fow_Nme <> '')
    THEN
      	IF (NEW.Fow_Prev='SU')
		THEN
		IF(RIGHT(NEW.Fow_Nme, 7 ) not in("derPass"," Subway"))

			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=SU, Fow_Nme must end with 'UnderPass' or 'Subway'", 2);
			END IF;
    	END IF;

		IF (NEW.Fow_Prev='UU' AND RIGHT(NEW.Fow_Nme, 6 ) <> "U Turn")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev=UU, Fow_Nme must end with 'U Turn'", 2);
    	END IF;

		IF (RIGHT(NEW.Fow_Nme, 1) = ")")
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Prev CAN NOT CONTAIN ()", 2);
    	END IF;
	END IF;
    
    IF (NEW.Spd_Lmt = 0)
    THEN  
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Cannot be 0", 1);
    END IF;
	
    IF( NEW.Exp NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "'Y',''", 1);
	ElSE
		IF(New.Exp ='Y' and NEW.Fow_Prev in('EM','EL'))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Exp =Y and Fow_Prev in EM,EL ", 1);
		END IF;
    END IF;
	
	
	IF( NEW.Ftr_Cry NOT IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB','RDC','OHY','RDD') )
   	THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "NGQ,CGQ,NHY,CTN,RDA,SHY,DHY,RDB,RDC,OHY,RDD", 1);
   	ELSE
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (NEW.Frc_M IN ('','0','1','2','3','4','5'))
		THEN
			SET cStr = NEW.Ftr_Cry;
		ELSE
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc_M", NEW.Frc_M, "Frc_M can be 0,1,2,3,4,5", 1);
		END IF;
	END IF;	
		IF(NEW.Spd_m < 0 OR NEW.Spd_m > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_m", NEW.Spd_m, "Spd_m less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.Spd_m= 0)
	THEN
		IF (cStr IN ('NGQ','CGQ','NHY','CTN','RDA','SHY','DHY','RDB') AND NEW.Exp = 'Y' )
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev=FL , Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>55)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD,  BP_Cry = BP, Spd_Lmt<>55Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>50)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry<>RDC,OHY,RDD, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>50Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr = 'NGQ' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NGQ, Fow_Prev=FL , Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>45)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ,  BP_Cry = BP, Spd_Lmt<>45Km/H", 1);
				END IF;
			END IF;			
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NGQ, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
		END IF;
		
		IF(cStr IN ('CGQ', 'CTN', 'SHY', 'RDA') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= CGQ/CTN/SHY/RDA, Fow_Prev=FL , Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>30)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA,  BP_Cry = BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>25)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=CGQ/CTN/SHY/RDA, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>25Km/H", 1);
				END IF;
			END IF;
		END IF;


		IF(cStr = 'NHY' AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>40)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>40Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL'  AND  NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>35)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>30Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr IN ('RDB', 'DHY') AND NEW.Exp IN (''))
		THEN
			If(NEW.Fow_Prev ='FL')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry= NHY, Fow_Prev=FL , Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			If(NEW.BP_Cry ='BP')
			THEN
				IF(NEW.Spd_Lmt<>20)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=NHY,  BP_Cry = BP, Spd_Lmt<>20Km/H", 1);
				END IF;
			END IF;
			IF(NEW.Fow_Prev <>'FL' AND NEW.BP_Cry <> 'BP')
			THEN
				IF(NEW.Spd_Lmt<>15)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDB/DHY, Fow_Prev<>FL and BP_Cry <> BP, Spd_Lmt<>15Km/H", 1);
				END IF;
			END IF;
		END IF;

		IF(cStr = 'RDC' AND NEW.Exp IN ('') AND NEW.Spd_Lmt<>10)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDC, Spd_Lmt<>10Km/H", 1);
		END IF;

		IF(cStr IN ('RDD', 'OHY') AND NEW.Spd_Lmt<>5)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spd_Lmt", NEW.Spd_Lmt, "Ftr_Cry=RDD/OHY, Spd_Lmt<>5Km/H", 1);
		END IF;
	END IF;
 	
	
    IF( NEW.PubvsPvt NOT IN (0, 1) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "0,1", 1);
	ELSE
		IF (NEW.PubvsPvt = 1 )
		THEN 
			IF(NEW.Motorable  NOT IN ('N') )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Motorable<>'N' ", 1);
			END IF;
			IF(NEW.Routable NOT IN ('0'))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PubvsPvt", NEW.PubvsPvt, "PubvsPvt=1 AND Routable<>'0' ", 1);
			END IF;
		END IF;
    END IF;   
    IF( NEW.PvdvsUvd NOT IN (0, 1))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "PvdvsUvd", NEW.PvdvsUvd, "0,1", 1);
    END IF;    
    IF( NEW.Motorable NOT IN ('Y','N') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, "Y,N", 1);
    END IF;
	IF( NEW.Motorable ='N' AND NEW.FRC in(0,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Motorable", NEW.Motorable, " FRC in 0,1,2 and motarable N", 1);
    END IF;	
    IF( NEW.Routable NOT IN ('0','1') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "0,1", 1);
    ELSE
		IF(NEW.Motorable = 'N' AND NEW.Routable <> '0' AND NEW.Fow_Prev <> 'SL')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'N', Routable must be 0.", 1);
		ELSE
			IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry in ('RDD','OHY') AND NEW.Routable <> '0')
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry = ('RDD','OHY'), Routable must be 0.", 1);
			ELSE
				IF(NEW.Motorable = 'Y' AND NEW.Ftr_Cry NOT IN ('RDD','OHY') AND NEW.Routable <> '1' AND NEW.PubvsPvt = 0)
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable", NEW.Routable, "Motorable = 'Y', Ftr_Cry <> ('RDD','OHY'), Routable must be 1.", 1);
				END IF;
			END IF;
		END IF;
    END IF;
    IF( NEW.Frc NOT IN (0,1,2,3,4,5) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "0,1,2,3,4,5", 1);
    ELSE	
		IF( NEW.Frc_M IN ("0","1","2","3","4","5"))
		THEN
			IF (NEW.Frc <> NEW.Frc_M )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Frc <> Frc_M ", 1);
			END IF;
		ELSE
			IF( NEW.Ftr_Cry IN ('NGQ','CGQ') AND NEW.Frc <> 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NGQ','CGQ', Frc <> 0", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('NHY','CTN') AND NEW.Frc <> 1  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'NHY','CTN', Frc <> 1", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('SHY','RDA') AND NEW.Frc <> 2  )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'SHY'/'RDA', Frc <> 2", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDB','DHY') AND NEW.Frc <> 3 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDB'/'DHY', Frc <> 3", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDC') AND NEW.Frc <> 4 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDC', Frc <> 4", 1);
			END IF;

			IF( NEW.Ftr_Cry IN ('RDD','OHY') AND NEW.Frc <> 5 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Frc", NEW.Frc, "Ftr_Cry = 'RDD','OHY', Frc <> 5", 1);
			END IF;
    	END IF;
    END IF;
    IF( NEW.Fow NOT IN (0,4,10,14,15,21,22,23,24,25,26,27) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "0,4,10,14,15,21,22,23,24,25,26,27", 1);
    ELSE
		IF( NEW.Fow_Prev = 'CR' AND NEW.Fow <> 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'CR', FOW <> 4", 1);
		END IF;

		IF( NEW.Fow_Prev in('EL','SR') AND NEW.Fow <> 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EL,SR, FOW <> 10", 1);
		END IF;
		IF( NEW.Fow_Prev in('EM','RM') AND NEW.Fow <> 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev in EM,RM and FOW <> 21", 1);
		END IF;	

		IF( NEW.Fow_Prev = 'FL' AND NEW.Fow <> 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'FL', FOW <> 22", 1);
		END IF;

		IF( NEW.Fow_Prev = 'UU' AND NEW.Fow <> 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'UU', FOW <> 23", 1);
		END IF;
		IF( NEW.Fow_Prev = 'BR' AND NEW.Fow <> 24 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'BR', FOW <> 24", 1);
		END IF;	
		IF( NEW.Fow_Prev ='SU' AND NEW.Fow <> 25 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'SU', FOW <> 25", 1);
		END IF;
		IF( NEW.Fow_Prev = 'TN' AND NEW.Fow <> 26 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'TN', FOW <> 26", 1);
		END IF;	
		IF( NEW.Fow_Prev ='RL' AND NEW.Fow <> 27 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'RL', FOW <> 27", 1);
		END IF;	
		IF( NEW.Fow_Prev ='PZ' AND NEW.Fow <> 14 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'PZ', FOW <> 14", 1);
		END IF;
		IF( NEW.Fow_Prev ='WW' AND NEW.Fow <> 15 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow", NEW.Fow, "Fow_Prev = 'WW', FOW <> 15", 1);
		END IF;		
    END IF;

	IF( NEW.Fow_Prev NOT IN ('SL','CR','RM','SR','RL','FL','BR','UU','BP','UF','SU','','TN','SC','EL','EM','WW','PZ','DC'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev,"SL,CR,RM,SR,RL,FL,BR,UU,BP,'',UF,SU,TN,SC,EL,EM,WW,PZ,DC", 1);
    ELSE
		IF( NEW.Fow_Prev <> 'CR' AND NEW.Fow = 4 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'CR', FOW = 4", 1);
		END IF;

		IF( NEW.Fow_Prev not in('SR','EL') AND NEW.Fow = 10 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in El,SR, FOW = 10", 1);
		END IF;
		
		IF( NEW.Fow_Prev not in('EM','RM') AND NEW.Fow = 21 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev not in EM,RM, FOW = 21", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'FL' AND NEW.Fow = 22 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'FL', FOW = 22", 1);
		END IF;

		IF( NEW.Fow_Prev <> 'UU' AND NEW.Fow = 23 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Prev", NEW.Fow_Prev, "Fow_Prev <> 'UU', FOW = 23", 1);
		END IF;
    END IF;
	IF(NEW.Fow_prev IN('FL','SU','RM'))
	THEN
		IF ( (NEW.From_Elev not in (-1,0,1) ) OR (NEW.To_Elev not in (-1,0,1) ) )
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"From_Elev/To_Elev",NEW.From_Elev+"/"+NEW.To_Elev, "if fow_prev in FL/SU/RM,From_elev or To_elev should have values -1,0,1", 1);		
		END IF;
	END IF;
	IF(NEW.Routable_M<>'')
	THEN
		IF(NEW.Routable <> NEW.Routable_M)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Routable/Routable_M", NEW.Routable+"/"+NEW.Routable_M, "routable should beequal to routable_m", 1);
		END IF;
	END IF;
	IF(NEW.BP_Cry not IN('','BP'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Cry",NEW.BP_Cry, "BP_Cry can be blank or BP only", 1);	
	END IF;
	IF (NEW.BP_Nme <>'' AND NEW.BP_Cry<>'BP')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id,"BP_Nme",NEW.BP_Nme, "if Bp_Nme<>'', then bp_cry should be 'BP'", 1);	
	END IF;
	IF(NEW.Road_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Road_Alt = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Cannot be Zero", 1);
	    END IF;
	IF(NEW.Spl_Nme <>'')
	THEN
		IF((select instr(NEW.Spl_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Spl_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Spl_Nme", NEW.Spl_Nme, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Toll_Nme <>'')
	THEN
		IF((select instr(NEW.Toll_Nme,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Toll_Nme = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Cannot be Zero", 1);
	    END IF;
		IF(NEW.Toll <> 'TL') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll NAME not Balnk,Toll <> TL", 1);
	    END IF;
	END IF;
	IF(NEW.Pop_Name <>'')
	THEN
		IF((select instr(NEW.Pop_Name,'  ')) >0) 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
		IF(NEW.Pop_Name = '0') 
	    THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_Name", NEW.Pop_Name, "Cannot be Zero", 1);
	    END IF;
	END IF;
	IF(NEW.Road_Nme <> '')
	THEN
		IF(NEW.Road_Nme = NEW.Road_Alt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Road_Alt", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Nme", NEW.Road_Nme, "Road_Nme = Spl_Nme", 1);
		END IF;
		IF(NEW.Road_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Road_Alt <> '')
	THEN
		IF(NEW.Road_Alt = NEW.Fow_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Fow_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Pop_name", 1);
		END IF;
		IF(NEW.Road_Alt = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Alt", NEW.Road_Alt, "Road_Alt = Spl_Nme", 1);
		END IF;	
		IF(NEW.Road_Alt = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Road_Alt = BP_Nme", 1);
		END IF;			
	END IF;	
	IF(NEW.Fow_Nme <> '')
	THEN
		IF(NEW.Fow_Nme = NEW.Pop_name)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Pop_name", 1);
		END IF;
		IF(NEW.Fow_Nme = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Fow_Nme", NEW.Fow_Nme, "Fow_Nme = Spl_Nme", 1);
		END IF;	
		IF(NEW.Fow_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Fow_Nme = BP_Nme", 1);
		END IF;			
	END IF;
	IF(NEW.Pop_name <> '')
	THEN
		IF(NEW.Pop_name = NEW.Spl_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pop_name", NEW.Pop_name, "Pop_name = Spl_Nme", 1);
		END IF;	
		IF(NEW.Pop_name = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Pop_name = BP_Nme", 1);
		END IF;				
	END IF;
	IF(NEW.Spl_Nme <> '')
	THEN
		IF(NEW.Spl_Nme = NEW.BP_Nme)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "BP_Nme", NEW.BP_Nme, "Spl_Nme = BP_Nme", 1);
		END IF;				
	END IF;	

	IF( NEW.Exp ='Y' and New.FRC not in(0,1) )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "EXP = Y ,FRC not in 0,1) ", 1);
	END IF;
	IF( NEW.Ftr_Cry ='NGQ' and New.Pmbjp_type ="" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "EXP", NEW.EXP, "Ftr_Cry =NGQ and New.Pmbjp_type is blank  ", 1);
	END IF;
	IF(NEW.Toll not in('TL','')) 
	THEN 
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Toll_Nme", NEW.Toll_Nme, "Toll not in Tl or Blank", 1);
	END IF;
	IF(NEW.Road_Typ NOT IN ("Road","Marg","Lane","Gali","Path","Street","Highway","Avenue","Expressway","Rasta","Galli","Salai","Veethi","Vithi","Sarak","Drive","Line","Lines","Driveway","Bylane",''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Typ", NEW.Road_Typ, "can have : Road,Marg,Lane,Gali,Path,Street,Highway,Avenue,Expressway,Rasta,Galli,Salai,Veethi,Vithi,Sarak,Drive,Line,Lines,Driveway,Bylane or blank", 1);
	End IF;
END$$;


/*Trigger structure for table `city_roads_DD` */
CREATE TRIGGER `City_Roads_DD_CONSTRAINTS` BEFORE INSERT ON `city_roads_DD` FOR EACH ROW 
BEGIN
	DECLARE Tab_Nme char(20);
	Set Tab_Nme = "City_Roads_DD";
	IF( NEW.Edge_Id = 0)
	THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Edge_Id", NEW.Edge_Id, "Cannot be Blank.", 1);
    END IF;
	
    IF(NEW.L_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.L_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id", NEW.L_Dist_Id, "COBNINATION OF L_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(NEW.R_Dist_Id<>"0")
	THEN
	    IF(!(SELECT COUNT(*) FROM `National_District_R` WHERE Dst_Id=NEW.R_Dist_Id))	
	    THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id", NEW.R_Dist_Id, "COBNINATION OF R_DIST_ID NOT FOUND IN DISTRICT TABLE", 1);
	    END IF;
	END IF;
	IF(New.L_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id",  New.L_nStt_Id, "L_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.R_nStt_Id in("","0"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_nStt_Id",  New.R_nStt_Id, "R_nStt_Id is Zero / Blank", 1);
	END IF;
	IF(New.L_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Dist_Id",  New.L_Dist_Id, "L_Dist_Id is Zero / Blank ", 1);
	END IF;
	IF(New.R_Dist_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Dist_Id",  New.R_Dist_Id, "R_Dist_Id is Zero ", 1);
	END IF;
	
	IF(New.L_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id",  New.L_Loc_Id, "L_Loc_Id is Zero/blank ", 1);
	END IF;
	IF(New.R_Loc_Id= "0")
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id",  New.R_Loc_Id, "R_Loc_Id is Zero/blank ", 1);
	END IF;
 	IF (NEW.From_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.From_Junction AND Elevation=NEW.From_Elev ) = 0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction, From_Elev combination not found in City_Jn_P table.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "Cannot be zero.", 1);    
    END IF;

    IF (NEW.To_Junction <> 0)
    THEN
        IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_Id=NEW.To_Junction AND Elevation=NEW.To_Elev ) =0)
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "To_Junction, To_Elev combination not found in City_Jn_P table.", 1);
        END IF;

		IF (NEW.To_Junction = NEW.From_Junction)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = To_Junction.", 1);
        END IF;
    ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Junction", NEW.To_Junction, "Cannot be zero.", 1);
    END IF;

    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
	IF (NEW.L_Loc_Id <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.L_Loc_Id AND City_Id=NEW.L_City_Id AND Stt_id=NEW.L_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Loc_Id", NEW.L_Loc_Id, "L_Loc_Id, L_City_Id, L_nStt_Id, combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF (NEW.L_City_Id<> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.L_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_City_Id", NEW.L_City_Id, "L_City_Id, L_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
    END IF;

    IF (NEW.R_Loc_Id <> '' )
    THEN  
       IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.R_Loc_Id AND City_Id=NEW.R_City_Id AND nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
       THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Loc_Id", NEW.R_Loc_Id, "R_Loc_Id, R_City_Id,R_nStt_Id combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF(NEW.R_City_Id <> 0 )
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.R_City_Id ) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_City_Id", NEW.R_City_Id, "R_City_Id, R_nStt_Id combination not found in City_Centre_P.", 1);
			END IF;
		END IF;
	END IF;   
	
    IF( NEW.From_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Elev", NEW.From_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF( NEW.To_Elev NOT IN (0,-1,1,2) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "To_Elev", NEW.To_Elev, "0,-1,1,2", 1);
    END IF;
    
    IF(!(Select binary 'India' = NEW.Cnt_Nme)=1)
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Cnt_Nme", NEW.Cnt_Nme, "India", 1);
    END IF;
    
    IF( NEW.One_Way NOT IN ('FT','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "FT,''", 1);
    END IF;
	
	IF( NEW.One_Way ='FT' AND NEW.Divider ='Y')
    THEN
       	INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "One_Way", NEW.One_Way, "** One_Way = FT, Divider = Y **", 1);
    END IF;
    
    IF( NEW.Divider NOT IN ('Y','') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Divider", NEW.Divider, "'Y',''", 1);
    END IF;

    IF( NEW.Dig_Stat NOT IN ('','DIGITIZED') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Dig_Stat", NEW.Dig_Stat, "'', DIGITIZED", 1);
    END IF;

    IF( NEW.National NOT IN ('City','Y') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "National", NEW.National, "City,Y", 1);
    END IF;
	
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.L_nStt_Id OR nStt_Id=NEW.R_nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_nStt_Id", NEW.L_nStt_Id, "L_nStt_Id/R_nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme=NEW.nStt_Nme and nStt_Id=NEW.nStt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Nav_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "nStt_Nme", NEW.nStt_Nme, "nStt_Nme/nStt_Id not found in National_State_Nav_R table.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '')
	THEN
		IF(!(SELECT COUNT(*) FROM `City_Loc_P` WHERE Loc_Nme = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Loc_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Loc_Id <> '', Road_Subloc <> Loc_Nme", 3);
		END IF;
	END IF;
	
	IF(NEW.Subl_Id <> '')
	THEN
			IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Subl_Nme Not found in subloaclity", 3);
		END IF;
		IF((SELECT COUNT(*) FROM `City_Subl_P` WHERE Subl_Id = NEW.Subl_Id and Sec_Sta in ('R','KR')) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Subl_Id", NEW.Subl_Id, "Subl_Id/Sec_Sta in R/KR", 3);
		END IF;
	    IF(!(SELECT COUNT(*) FROM `City_Subl_P` WHERE CONCAT(Subl_Nme, " ", Loc_Nme) = NEW.Road_Subloc ) AND (!(SELECT COUNT(*)FROM `City_Subl_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Road_Subloc", NEW.Road_Subloc, "Road_Subloc <> Subl_Nme Loc_Nme", 3);
		END IF;
	END IF;

	IF (NEW.City_Id<> 0)
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "City_Id", NEW.City_Id, "City_Id/City_Nme not found in City_Centre_P.", 1);
		END IF;
	END IF;
	IF(NEW.L_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.L_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Pin", NEW.L_Pin, "No of digits in Pin must be 6.", 1);
	END IF;	
	IF(NEW.R_Pin <> '' AND CHAR_LENGTH(TRIM(NEW.R_Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "R_Pin", NEW.R_Pin, "No of digits in Pin must be 6.", 1);
	END IF;		
		IF(NEW.F_Spd_lmt < 0 OR NEW.F_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Spd_lmt", NEW.F_Spd_lmt, "F_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.T_Spd_lmt < 0 OR NEW.T_Spd_lmt > 120)
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Spd_lmt", NEW.T_Spd_lmt, "T_Spd_lmt less than 0 or greater than 120", 1);	
	END IF;
	IF(NEW.F_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "F_Ln", NEW.F_Ln, "F_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;
	IF(NEW.T_Ln not in ('0','1','2','3','4','5','6'))
	THEN	
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "T_Ln", NEW.T_Ln, "T_Ln not in 0,1,2,3,4,5,6", 1);	
	END IF;	
	IF (NEW.From_Junction = NEW.To_Junction)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "From_Junction", NEW.From_Junction, "From_Junction = NEW.To_Junction.", 1);
	END IF;
	IF(!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.L_Stt_Id OR Stt_Id=NEW.R_Stt_Id) AND (!(SELECT COUNT(*)FROM `National_State_Gis_R`)=0))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "L_Stt_Id/R_Stt_Id", NEW.L_Stt_Id+" and  "+NEW.R_Stt_Id, "L_Stt_Id/R_Stt_Id not found in National_State_Gis_R table.", 1);
	END IF;
	IF( NEW.Parking NOT IN ('','Y') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Parking", NEW.Parking, "Y or blank", 1);
	END IF;
	IF( NEW.VTS NOT IN ('Q1_11','Q2_11','Q3_11','Q4_11','Q1_12','Q2_12','Q3_12','Q4_12','Q1_13','Q2_13','Q3_13','Q4_13','') )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "VTS", NEW.VTS, "Can have values : Q1_11,Q2_11,Q3_11,Q4_11,Q1_12,Q2_12,Q3_12,Q4_12,Q1_13,Q2_13,Q3_13,Q4_13",1);
	END IF;
	IF (NEW.Pos_Spd_Lmt_M <>"")
	THEN
		IF (NEW.Pos_Spd_Lmt_M <> NEW.T_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
		IF (NEW.Pos_Spd_Lmt_M <> NEW.F_Spd_lmt)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Edge_Id, "Pos_Spd_Lmt_M", NEW.Pos_Spd_Lmt_M, "Pos_Spd_Lmt_M <> NEW.T_Spd_lmt.", 1);
		END IF;
	END IF;
END$$;



/* Trigger for City_POI */

Create Trigger `City_Poi_P_CONSTRAINTS_AP` BEFORE INSERT on `AP_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "AP_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_AP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_AP tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF(NEW.Sec_Sta_Poplr NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,999,99", 1);
    END IF;
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_BR` BEFORE INSERT on `BR_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "BR_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_BR`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_BR tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_BR_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC',''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_CG` BEFORE INSERT on `CG_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "CG_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_CG`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_CG tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CG_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC',''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_CH` BEFORE INSERT on `CH_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "CH_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_CH`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_CH tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CH_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC',''))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_DL` BEFORE INSERT on `DL_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "DL_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_DL`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_DL tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DL_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;

	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_DN` BEFORE INSERT on `DN_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "DN_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_DN`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_DN tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DN_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;

	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_GA` BEFORE INSERT on `GA_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "GA_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_GA`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_GA tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GA_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;

	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_GJ` BEFORE INSERT on `GJ_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "GJ_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_GJ`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_GJ tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GJ_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;
	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_HP` BEFORE INSERT on `HP_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "HP_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_HP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_HP tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;
	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;

	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_HR` BEFORE INSERT on `HR_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "HR_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_HR`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_HR tables.", 1);
		END IF;
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HR_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		/*IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry AND Category=NEW.Cat_Dec))*/
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;		
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_JH` BEFORE INSERT on `JH_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "JH_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_JH`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_JH tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JH_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
			IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    		
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_JK` BEFORE INSERT on `JK_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "JK_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_JK`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_JK tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JK_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;		
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_KA` BEFORE INSERT on `KA_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "KA_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_KA`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_KA tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KA_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_KL` BEFORE INSERT on `KL_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "KL_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_KL`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_KL tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KL_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
  	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	  
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;


Create Trigger `City_Poi_P_CONSTRAINTS_MP` BEFORE INSERT on `MP_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "MP_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_MP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_MP tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
  
	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_MH` BEFORE INSERT on `MH_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "MH_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_MH`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_MH tables.", 1);
		END IF;	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MH_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
			IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_OR` BEFORE INSERT on `OR_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "OR_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_OR`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_OR tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_OR_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_PB` BEFORE INSERT on `PB_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "PB_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_PB`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_PB tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PB_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_PY` BEFORE INSERT on `PY_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "PY_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_PY`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_PY tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PY_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_RJ` BEFORE INSERT on `RJ_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "RJ_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_RJ`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_RJ tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_RJ_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_TN` BEFORE INSERT on `TN_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "TN_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_TN`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_TN tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_TN_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
 	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
  
	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;		
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_UA` BEFORE INSERT on `UA_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "UA_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_UA`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_UA tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UA_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_NE` BEFORE INSERT on `NE_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "NE_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_NE tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_NE_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_UP` BEFORE INSERT on `UP_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "UP_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_UP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_UP tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
    	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_WB` BEFORE INSERT on `WB_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "WB_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_WB tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_WB_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_AN` BEFORE INSERT on `AN_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "AN_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_AN`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_AN tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AN_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;

	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
		IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_LD` BEFORE INSERT on `LD_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "LD_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_LD`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_LD tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_LD_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;

	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;		
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_Poi_P_CONSTRAINTS_DD` BEFORE INSERT on `DD_Poi_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "DD_Poi_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_DD`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_LD tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DD_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;

	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;		
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;




/*Trigger structure for table `national_pincode_r` */
CREATE TRIGGER `national_pincode_r_CONSTRAINTS` 
BEFORE INSERT ON `national_pincode_r` FOR EACH ROW 
BEGIN
    IF( NEW.pincode = '' OR NEW.pincode = '0')
    THEN
        INSERT pincode VALUES("national_pincode_r", NEW.pincode, "pincode", NEW.pincode, "pincode is blank or zero.", 1);
    END IF;
END$$;

/*Trigger structure for table `Complex_turn_table` */
CREATE TRIGGER `Complex_turn_table_CONSTRAINTS` 
BEFORE INSERT ON `Complex_turn_table` FOR EACH ROW 
BEGIN

	DECLARE cnStt_Nme char(50);			
	SET cnStt_Nme = NEW.nStt_Nme;
	
    IF( NEW.CTT_ID = 0)
    THEN
        INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CTT_ID", NEW.CTT_ID, "Cannot be Blank or Zero.", 1);
    END IF;
    
	IF( SELECT COUNT(*) FROM `Complex_turn_table` WHERE PARENTID = NEW.PARENTID AND DestID = NEW.DestID )
     THEN
         INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID+DestID", NEW.PARENTID, " PARENTID DestID combination Duplicate value.", 1);
    END IF;
	
	IF(cnStt_Nme <> '' OR cnStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = cnStt_Nme) = 0 )
		THEN 
			INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID , "nStt_Nme", cnStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID , "nStt_Nme", cnStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	
	IF(cnStt_Nme <> '')
	THEN
		CASE cnStt_Nme
		WHEN "Andhra Pradesh"
		THEN 
			IF((SELECT COUNT(*) FROM `City_Roads_AP`)=0)
			THEN
				INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_AP", "", "City_Roads_AP not found", 1);
			ELSE
				IF( NEW.PARENTID <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.PARENTID )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_AP", 1);	
					END IF;
				ELSE
					INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
				END IF;
				IF( NEW.CHILDID_1 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.CHILDID_1 )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_AP", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_2 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.CHILDID_2) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_AP", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_3 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.CHILDID_3) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_AP", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_4 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.CHILDID_4) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_AP", 1);	
					END IF;
				END IF;
				IF( NEW.DestID <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.DestID )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_AP", 1);	
					END IF;
				ELSE
					INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
				END IF;
			END IF;	
			WHEN "Assam"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_NE`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_NE", "", "City_Roads_NE not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				End IF;
			WHEN "Arunachal Pradesh"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_NE`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_NE", "", "City_Roads_NE not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.PARENTID)))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Bihar"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_BR`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_BR", "", "City_Roads_BR not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_BR", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_BR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_BR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_BR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_BR", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_BR", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Chandigarh"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_CH`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_CH", "", "City_Roads_CH not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_CH", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_CH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_CH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_CH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_CH", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_CH", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Chhattisgarh"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_CG`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_CG", "", "City_Roads_CG not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_CG", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_CG", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_CG", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_CG", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_CG", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_CG", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Daman & Diu"
		THEN 
			IF((SELECT COUNT(*) FROM `City_Roads_DD`)=0)
			THEN
				INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_DD", "", "City_Roads_DD not found", 1);
			ELSE
				IF( NEW.PARENTID <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.PARENTID )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_DD", 1);	
					END IF;
				ELSE
					INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
				END IF;
				IF( NEW.CHILDID_1 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.CHILDID_1 )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_DD", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_2 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.CHILDID_2) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_DD", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_3 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.CHILDID_3) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_DD", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_4 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.CHILDID_4) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_DD", 1);	
					END IF;
				END IF;
				IF( NEW.DestID <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.DestID )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_DD", 1);	
					END IF;
				ELSE
					INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
				END IF;
			END IF;	
			WHEN "Dadra & Nagar Haveli"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_DN`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_DN", "", "City_Roads_DN not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_DN", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_DN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_DN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_DN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_DN", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_DN", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Delhi"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_DL`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_DL", "", "City_Roads_DL not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_DL", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_DL", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_DL", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_DL", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_DL", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_DL", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Goa"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_GA`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_GA", "", "City_Roads_GA not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_GA", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_GA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_GA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_GA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_GA", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_GA", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Haryana"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_HR`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_HR", "", "City_Roads_HR not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_HR", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_HR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_HR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_HR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_HR", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_HR", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Himachal Pradesh"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_HP`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_HP", "", "City_Roads_HP not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_HP", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_HP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_HP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_HP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_HP", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_HP", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Jammu & Kashmir"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_JK`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_JK", "", "City_Roads_JK not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_JK", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_JK", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_JK", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_JK", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_JK", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_JK", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Jharkhand"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_JH`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_JH", "", "City_Roads_JH not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_JH", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_JH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_JH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_JH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_JH", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_JH", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Karnataka"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_KA`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_KA", "", "City_Roads_KA not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_KA", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_KA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_KA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_KA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_KA", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_KA", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Kerala"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_KL`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_KL", "", "City_Roads_KL not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_KL", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_KL", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_KL", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_KL", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_KL", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_KL", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Madhya Pradesh"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_MP`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_MP", "", "City_Roads_MP not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_MP", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_MP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_MP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_MP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_MP", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_MP", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Mizoram"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_NE`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_NE", "", "City_Roads_NE not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Meghalaya"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_NE`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_NE", "", "City_Roads_NE not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Manipur"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_NE`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_NE", "", "City_Roads_NE not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Nagaland"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_NE`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_NE", "", "City_Roads_NE not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Tripura"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_NE`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_NE", "", "City_Roads_NE not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_NE", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_NE", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Maharashtra"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_MH`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_MH", "", "City_Roads_MH not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_MH", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_MH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_MH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_MH", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_MH", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_MH", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Odisha"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_OR`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_OR", "", "City_Roads_OR not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_OR", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_OR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_OR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_OR", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_OR", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_OR", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Punjab"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_PB`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_PB", "", "City_Roads_PB not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_PB", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_PB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_PB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_PB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_PB", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_PB", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;	
				END IF;
			WHEN "Rajasthan"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_RJ`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_RJ", "", "City_Roads_RJ not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_RJ", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_RJ", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_RJ", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_RJ", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_RJ", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_RJ", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;	
				END IF;
			WHEN "Uttarakhand"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_UA`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_UA", "", "City_Roads_UA not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_UA", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_UA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_UA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_UA", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_UA", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_UA", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Uttar Pradesh"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_UP`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_UP", "", "City_Roads_UP not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_UP", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_UP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_UP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_UP", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_UP", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_UP", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "West Bengal"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_WB`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_WB", "", "City_Roads_WB not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_WB", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_WB", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Sikkim"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_WB`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_WB", "", "City_Roads_WB not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_WB", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.CHILDID_4 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_WB", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_WB", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;	
				END IF;
			WHEN "Gujarat"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_GJ`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_GJ", "", "City_Roads_GJ not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_GJ", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.CHILDID_1) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_GJ", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_GJ", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_GJ", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_GJ", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_GJ", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Tamil Nadu"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_TN`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_TN", "", "City_Roads_TN not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_TN", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_TN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_TN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_TN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_TN", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_TN", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;	
					END IF;
			WHEN "Puducherry"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_PY`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_PY", "", "City_Roads_PY not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.PARENTID) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_PY", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_PY", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.CHILDID_2 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_PY", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.CHILDID_3 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_PY", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_PY", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_PY", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;	
				END IF;
			WHEN "Andaman & Nicobar Islands"
			THEN 
				IF((SELECT COUNT(*) FROM `City_Roads_AN`)=0)
				THEN
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_AN", "", "City_Roads_AN not found", 1);
				ELSE
					IF( NEW.PARENTID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.PARENTID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_AN", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
					END IF;
					IF( NEW.CHILDID_1 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.CHILDID_1 )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_AN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_2 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.CHILDID_2) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_AN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_3 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.CHILDID_3) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_AN", 1);	
						END IF;
					END IF;
					IF( NEW.CHILDID_4 <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.CHILDID_4) ))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_AN", 1);	
						END IF;
					END IF;
					IF( NEW.DestID <> 0)
					THEN
						IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.DestID )))
						THEN
							INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_AN", 1);	
						END IF;
					ELSE
						INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
					END IF;
				END IF;
			WHEN "Lakshadweep"
			THEN 
			IF((SELECT COUNT(*) FROM `City_Roads_LD`)=0)
			THEN
				INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "City_Roads_LD", "", "City_Roads_LD not found", 1);
			ELSE
				IF( NEW.PARENTID <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.PARENTID )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "PARENTID", NEW.PARENTID, "PARENTID not found in City_Roads_LD", 1);	
					END IF;
				ELSE
					INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "PARENTID", NEW.PARENTID, "Cannot be Blank.", 1);
				END IF;
				IF( NEW.CHILDID_1 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.CHILDID_1 )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_1", NEW.CHILDID_1, "CHILDID_1 not found in City_Roads_LD", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_2 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.CHILDID_2) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_2", NEW.CHILDID_2, "CHILDID_2 not found in City_Roads_LD", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_3 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.CHILDID_3) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_3", NEW.CHILDID_3, "CHILDID_3 not found in City_Roads_LD", 1);	
					END IF;
				END IF;
				IF( NEW.CHILDID_4 <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.CHILDID_4) ))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "CHILDID_4", NEW.CHILDID_4, "CHILDID_4 not found in City_Roads_LD", 1);	
					END IF;
				END IF;
				IF( NEW.DestID <> 0)
				THEN
					IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.DestID )))
					THEN
						INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "DestID", NEW.DestID, "DestID not found in City_Roads_LD", 1);	
					END IF;
				ELSE
					INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.DestID, "Cannot be Blank.", 1);
				END IF;
			END IF;				
			ELSE 
					INSERT ERROR_MSG VALUES("Complex_turn_table", New.CTT_ID , "nStt_Nme", NEW.nStt_Nme, "Road Table for this state not found",1);
			END CASE;
		END IF;	
		IF((select instr(NEW.Source,'  ')) >0) 
		THEN 
			INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
		END IF;
		IF(NEW.Source = '0') 
		THEN 
			INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "Source", NEW.Source, "CONTAINS 0", 1);
		END IF;
		IF(NEW.PARENTID <> "") 
		THEN 
			IF(NEW.PARENTID = NEW.CHILDID_1) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_1", NEW.CHILDID_1, "PARENTID = CHILDID_1", 1);
			END IF;
			IF(NEW.PARENTID = NEW.CHILDID_2) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_2", NEW.PARENTID, "PARENTID = CHILDID_2", 1);
			END IF;
			IF(NEW.PARENTID = NEW.CHILDID_3) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_3", NEW.PARENTID, "PARENTID = CHILDID_3", 1);
			END IF;
			IF(NEW.PARENTID = NEW.CHILDID_4) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_4", NEW.PARENTID, "PARENTID = CHILDID_4", 1);
			END IF;
			IF(NEW.PARENTID = NEW.DestID) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.PARENTID, "PARENTID = DestID", 1);
			END IF;
		END IF;
		IF(NEW.CHILDID_1 <> "") 
		THEN 
			IF(NEW.CHILDID_1 = NEW.CHILDID_2) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_2", NEW.CHILDID_1, "CHILDID_1 = CHILDID_2", 1);
			END IF;
			IF(NEW.CHILDID_1 = NEW.CHILDID_3) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_3", NEW.CHILDID_1, "CHILDID_1 = CHILDID_3", 1);
			END IF;
			IF(NEW.CHILDID_1 = NEW.CHILDID_4) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_4", NEW.CHILDID_1, "CHILDID_1 = CHILDID_4", 1);
			END IF;
			IF(NEW.CHILDID_1 = NEW.DestID) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.CHILDID_1, "CHILDID_1 = DestID", 1);
			END IF;
		END IF;		
		IF(NEW.CHILDID_2 <> "") 
		THEN 
			IF(NEW.CHILDID_2 = NEW.CHILDID_3) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_3", NEW.CHILDID_2, "CHILDID_2 = CHILDID_3", 1);
			END IF;
			IF(NEW.CHILDID_2 = NEW.CHILDID_4) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_4", NEW.CHILDID_2, "CHILDID_2 = CHILDID_4", 1);
			END IF;
			IF(NEW.CHILDID_2 = NEW.DestID) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.CHILDID_2, "CHILDID_2 = DestID", 1);
			END IF;
		END IF;			
		IF(NEW.CHILDID_3 <> "") 
		THEN 
			IF(NEW.CHILDID_3 = NEW.CHILDID_4) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "CHILDID_4", NEW.CHILDID_3, "CHILDID_3 = CHILDID_4", 1);
			END IF;
			IF(NEW.CHILDID_3 = NEW.DestID) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.CHILDID_3, "CHILDID_3 = DestID", 1);
			END IF;
		END IF;	
		IF(NEW.CHILDID_4 <> "") 
		THEN 
			IF(NEW.CHILDID_4 = NEW.DestID) 
			THEN 
				INSERT ERROR_MSG VALUES("Complex_turn_table", NEW.CTT_ID, "DestID", NEW.CHILDID_4, "CHILDID_4 = DestID", 1);
			END IF;
		END IF;			
END$$;



/*Trigger structure for table `AP_Building_RP` */

CREATE TRIGGER `AP_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `AP_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "AP_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_AP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_AP_Main.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_AP_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `AP_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in AP_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY,blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_AP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_AP_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `DD_Building_RP` */

CREATE TRIGGER `DD_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `DD_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "DD_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_DD_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_DD_Main.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_DD_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `DD_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in DD_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY,blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_DD_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_DD_Main.", 1);
		END IF;
	END IF;
END$$;
/*Trigger structure for table `BR_Building_RP` */

CREATE TRIGGER `BR_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `BR_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "BR_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_BR_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_BR.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_BR_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		End IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `BR_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in BR_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_BR_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_BR_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `CH_Building_RP` */

CREATE TRIGGER `CH_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `CH_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "CH_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;      
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_CH_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_CH.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_CH_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `CH_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in CH_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_CH_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_CH_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `CG_Building_RP` */

CREATE TRIGGER `CG_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `CG_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "CG_Building_RP";

 
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_CG_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_CG.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_CG_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `CG_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in CG_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_CG_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_CG_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `DN_Building_RP` */

CREATE TRIGGER `DN_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `DN_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "DN_Building_RP";

 
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_DN_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_DN.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_DN_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;		
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `DN_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in DN_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_DN_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_DN_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `DL_Building_RP` */

CREATE TRIGGER `DL_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `DL_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "DL_Building_RP";

 
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_DL_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_DL.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_DL_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `DL_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in DL_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_DL_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_DL_Main.", 1);
		END IF;
	END IF;
END$$;
/*Trigger structure for table `GA_Building_RP` */

CREATE TRIGGER `GA_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `GA_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "GA_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_GA_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_GA.", 1);
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `GA_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in GA_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_GA_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_GA_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `GJ_Building_RP` */

CREATE TRIGGER `GJ_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `GJ_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "GJ_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_GJ_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_GJ.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_GJ_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `GJ_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in GJ_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;		
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,NEW.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_GJ_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_GJ_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `HP_Building_RP` */

CREATE TRIGGER `HP_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `HP_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "HP_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_HP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_HP.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_HP_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `HP_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in HP_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
	IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;	
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_HP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_HP_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `HR_Building_RP` */

CREATE TRIGGER `HR_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `HR_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "HR_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_HR_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_HR.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_HR_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `HR_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in HR_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_HR_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_HR_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `JH_Building_RP` */

CREATE TRIGGER `JH_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `JH_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "JH_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF;
				
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_JH_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_JH.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_JH_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT found in Roads", 1);
			END IF;
		END IF;
	END IF;	
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `JH_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in JH_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_JH_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_JH_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `JK_Building_RP` */

CREATE TRIGGER `JK_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `JK_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "JK_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_JK_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_JK.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_JK_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `JK_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in JK_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_JK_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_JK_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `KA_Building_RP` */

CREATE TRIGGER `KA_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `KA_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "KA_Building_RP";


	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;      
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_KA_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_KA.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_KA_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `KA_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in KA_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_KA_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_KA_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `KL_Building_RP` */

CREATE TRIGGER `KL_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `KL_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "KL_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;      
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_KL_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_KL.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_KL_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `KL_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in KL_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_KL_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_KL_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `MP_Building_RP` */

CREATE TRIGGER `MP_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `MP_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "MP_Building_RP";


	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_MP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_MP.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_MP_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `MP_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in MP_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_MP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_MP_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `MH_Building_RP` */

CREATE TRIGGER `MH_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `MH_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "MH_Building_RP";

    
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_MH_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_MH.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_MH_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `MH_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in MH_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_MH_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_MH_Main.", 1);
		END IF;
	END IF;
END$$;
/*Trigger structure for table `NE_Building_RP` */

CREATE TRIGGER `NE_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `NE_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "NE_Building_RP";

    
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_NE_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_NE.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_NE_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `NE_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in NE_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
	IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;	
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_NE_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_NE_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `JK_Building_RP` */

CREATE TRIGGER `OR_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `OR_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "OR_Building_RP";

 
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_OR_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_OR.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_OR_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `OR_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in OR_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_OR_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_OR_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `PY_Building_RP` */

CREATE TRIGGER `PY_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `PY_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "PY_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_PY_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_PY.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_PY_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `PN_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in PN_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_PY_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_PY_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `PB_Building_RP` */

CREATE TRIGGER `PB_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `PB_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "PB_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_PB_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_PB.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_PB_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `PB_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in PB_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_PB_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_PB_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `RJ_Building_RP` */

CREATE TRIGGER `RJ_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `RJ_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "RJ_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;    
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_RJ_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_RJ.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_RJ_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `RJ_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in RJ_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	
		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_RJ_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_RJ_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `TN_Building_RP` */

CREATE TRIGGER `TN_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `TN_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "TN_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_TN_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_TN.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_TN_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `TN_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in TN_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
	IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;	
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_TN_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_TN_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `UA_Building_RP` */

CREATE TRIGGER `UA_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `UA_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "UA_Building_RP";

   
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_UA_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_UA.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_UA_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `UA_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in UA_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;		
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_UA_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_UA_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `UP_Building_RP` */

CREATE TRIGGER `UP_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `UP_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "UP_Building_RP";

  
	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id ,Subl_NME not found in City_Subl_P", 1);
		END IF; 
	END IF;	 
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;		
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id,Loc_Nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.Stt_Id, "Stt_Id,Stt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme  ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_UP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_UP.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_UP_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `UP_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in UP_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;

	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;		
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_UP_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_UP_Main.", 1);
		END IF;
	END IF;
END$$;
/*Trigger structure for table `WB_Building_RP` */

CREATE TRIGGER `WB_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `WB_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "WB_Building_RP";


	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;      
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_WB_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_WB.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_WB_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `WB_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in WB_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	

	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	
		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_WB_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_WB_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `AN_Building_RP` */

CREATE TRIGGER `AN_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `AN_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "AN_Building_RP";


	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;     
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_AN_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_AN.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_AN_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `AN_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in AN_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	

	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
		IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;
	
		IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
		IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
		IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_AN_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_AN_Main.", 1);
		END IF;
	END IF;
END$$;

/*Trigger structure for table `LD_Building_RP` */

CREATE TRIGGER `LD_Building_RP_CONSTRAINTS` 
BEFORE INSERT ON `LD_Building_RP` FOR EACH ROW 
BEGIN
    DECLARE Tab_Nme char(70);	
	Set Tab_Nme = "LD_Building_RP";

	IF NEW.subl_Id<> ""
	THEN
		IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Subl_Nme` = NEW.Subl_Nme  AND `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme 
		AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id/Subl_NME/loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Subl_P", 1);
		END IF; 
		
	END IF;
	IF (NEW.subl_Id<> "" AND NEW.Subl_NME = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id not Blank,Subl_NME blank", 1);
	END IF;
	IF (NEW.subl_Id= "" AND NEW.Subl_NME <> "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id, "subl_Id Blank,Subl_NME not blank", 1);
	END IF;	
	
	 IF( (Select count(*) from `City_Loc_R`  where `Loc_Id` =  NEW.Loc_Id  AND `Loc_Nme` = NEW.Loc_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Loc_Id", NEW.Loc_Id, "loc_id/loc_Nme/nStt_id/nstt_nme not found in City_Loc_R", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in nav state", 1);
    END IF; 
    IF( (Select count(*) from `City_Area_R`  where `City_Id` =  NEW.city_Id  AND `City_Nme` = NEW.City_Nme AND `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme ) =0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "city_Id", NEW.city_Id, "city_Id/City_Nme/nStt_id/nstt_nme not found in city_area_r", 1);
    END IF;   
	IF( NEW.edge_Id =0 and NEW.edge_side <> '')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id=0 ,edge_side <> blank", 1);
    END IF;
	IF( NEW.edge_Id <> 0 and NEW.edge_side not in ('L','l','R','r'))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id+edge_side", NEW.edge_Id, "edge_Id<>0 ,edge_side should be L or R", 1);
    END IF;
	IF(NEW.edge_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `City_Roads_LD_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_LD.", 1);
		END IF;
		IF(NEW.Road_Nme <> "")
		THEN
			IF ((SELECT COUNT(*) FROM `City_Roads_LD_Main` WHERE Edge_Id = NEW.Edge_Id and Road_Nme = NEW.Road_Nme) = 0)
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id/Road_Nme combination NOT forund in Roads", 1);
			END IF;	
		END IF;	
	END IF;
	IF(NEW.Poi_Id <> 0)
	THEN
		IF ((SELECT COUNT(*) FROM `PY_Poi_P` WHERE Poi_Id = NEW.Poi_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Poi_Id", NEW.Poi_Id, "Poi_Id not found in PY_Poi_P.", 1);
		END IF;
	END IF;
	IF( NEW.Dup not in ('Y','X',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup", NEW.Dup, "Dup can be Y,X or BLANK", 1);
    END IF;
	IF( NEW.Dup_Type not in ('o/n','CTY',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dup_Type", NEW.Dup_Type, "Dup_Type can be o/n,CTY or blank", 1);
    END IF;	
	IF((select instr(NEW.Dlv_Bldg_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Deliverable= 'Y')
	THEN
		IF(NEW.Dlv_Bldg_Nme='' And NEW.Dlv_Bldg_Num='')
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme & Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Nme & Dlv_Bldg_Num are blank.", 1);
		END IF;
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Nme,' ')) =1) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "CONTAINS SPACE AT STARTING", 1);
	END IF;
	IF((select instr(NEW.Dlv_Bldg_Num,' ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "CONTAINS SPACE.", 1);
	END IF;
	IF( NEW.Deliverable not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Deliverable", NEW.Deliverable, "Deliverable can be Y or Blank", 1);
    END IF;	
	IF( NEW.Separator not in ('/','-',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Separator", NEW.Separator, "Separator can be /,- or Blank", 1);
    END IF;		
	IF(NEW.Link_Edge not in ('Y',''))
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Link_Edge", NEW.Link_Edge, "Link_Edge  can be Y or Blank", 1);
    END IF;
	IF( NEW.build_Ht =0)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "build_Ht", NEW.build_Ht, "build_Ht = 0", 1);
    END IF;		
	IF((Select  LENGTH(NEW.PIN) ) <> 6)
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "PIN", NEW.PIN, "pin length <> 6", 1);
    END IF;	

	IF( NEW.Dlv_Bldg_Nme ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Nme", NEW.Dlv_Bldg_Nme, "Dlv_Bldg_Nme = 0", 1);
    END IF;	
	IF( NEW.Dlv_Bldg_Num ='0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num = 0", 1);
    END IF;	
	IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "ntt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF; 
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;
	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	
	IF(NEW.Prefix <> "")
	THEN
		IF((select instr(NEW.Dlv_Bldg_Num,New.Prefix)) >0) 
		THEN 
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Prefix", NEW.Prefix, "Prefix found in Dlv_Bldg_Num", 1);
		END IF;
	END IF;
		IF (NEW.Edge_Id_Addr != 0 AND NEW.Edge_Side_Addr = "")
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr not Blank,Edge_Side_Addr blank", 1);
	END IF;
	IF (NEW.Edge_Side_Addr  != "" AND NEW.Edge_Id_Addr =0)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id_Addr", NEW.Edge_Id_Addr, "Edge_Id_Addr Blank,Edge_Side_Addr not blank", 1);
	END IF;	
	
	IF (NEW.Edge_Side_Addr not in("L","R",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Side_Addr", NEW.Edge_Side_Addr, "Edge_Side_Addr not in L,R or  blank", 1);
	END IF;		
	IF( NEW.Deliverable= 'Y')
	THEN
		IF NEW.subl_Id<> ""
		THEN
			IF( (Select count(*) from `City_Subl_P`  where `subl_Id` =  NEW.subl_Id AND `Sec_Sta` in ("R","KR") ) != 0 )
			THEN
				INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "subl_Id", NEW.subl_Id,"Sec_Sta in R,KR in City_Subl_P", 1);
			END IF; 
		END IF; 
	END IF;
	/*IF((select Length(NEW.Dlv_Bldg_Num) >4) )
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Add_Id, "Dlv_Bldg_Num", NEW.Dlv_Bldg_Num, "Dlv_Bldg_Num length greater than 4", 1);
	END IF;*/
	IF(NEW.Edge_Id_Addr <> 0)
	THEN
		IF (NEW.Edge_Id_Addr = NEW.edge_Id)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "edge_Id", NEW.edge_Id, "Edge_Id_Addr = edge_Id", 1);
		END IF;
		IF ((SELECT COUNT(*) FROM `City_Roads_LD_Main` WHERE Edge_Id = NEW.Edge_Id) = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_nme, NEW.Add_Id, "Edge_Id", NEW.Edge_Id, "Edge_id not found in City_Roads_LD_Main.", 1);
		END IF;
	END IF;
END$$;


/*Trigger structure for table `AN_Turn_Table_P`*/ 
CREATE TRIGGER `AN_Turn_Table_P_constraints` 
BEFORE INSERT ON `AN_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
	IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `AN_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_AN", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_AN", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `LD_Turn_Table_P`*/ 
CREATE TRIGGER `LD_Turn_Table_P_constraints` 
BEFORE INSERT ON `LD_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
	IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `LD_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_LD", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_LD", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `AP_Turn_Table_P`*/ 
CREATE TRIGGER `AP_Turn_Table_P_constraints` 
BEFORE INSERT ON `AP_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `AP_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_AP", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_AP", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `BR_Turn_Table_P`*/ 
CREATE TRIGGER `BR_Turn_Table_P_constraints` 
BEFORE INSERT ON `BR_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `BR_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_BR", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_BR", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `CH_Turn_Table_P`*/ 
CREATE TRIGGER `CH_Turn_Table_P_constraints` 
BEFORE INSERT ON `CH_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `CH_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_CH", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_CH", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `CG_Turn_Table_P`*/ 
CREATE TRIGGER `CG_Turn_Table_P_constraints` 
BEFORE INSERT ON `CG_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `CG_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_CG", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_CG", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `DN_Turn_Table_P`*/ 
CREATE TRIGGER `DN_Turn_Table_P_constraints` 
BEFORE INSERT ON `DN_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `DN_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_DN", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_DN", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `DL_Turn_Table_P`*/ 
CREATE TRIGGER `DL_Turn_Table_P_constraints` 
BEFORE INSERT ON `DL_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `DL_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_DL", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_DL", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `GA_Turn_Table_P`*/ 
CREATE TRIGGER `GA_Turn_Table_P_constraints` 
BEFORE INSERT ON `GA_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `GA_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_GA", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_GA", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `GJ_Turn_Table_P`*/ 
CREATE TRIGGER `GJ_Turn_Table_P_constraints` 
BEFORE INSERT ON `GJ_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `GJ_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_GJ", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_GJ", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `HR_Turn_Table_P`*/ 
CREATE TRIGGER `HR_Turn_Table_P_constraints` 
BEFORE INSERT ON `HR_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `HR_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_HR", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_HR", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `HP_Turn_Table_P`*/ 
CREATE TRIGGER `HP_Turn_Table_P_constraints` 
BEFORE INSERT ON `HP_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `HP_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_HP", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_HP", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `JK_Turn_Table_P`*/ 
CREATE TRIGGER `JK_Turn_Table_P_constraints` 
BEFORE INSERT ON `JK_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `JK_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_JK", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_JK", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `JH_Turn_Table_P`*/ 
CREATE TRIGGER `JH_Turn_Table_P_constraints` 
BEFORE INSERT ON `JH_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `JH_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_JH", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_JH", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `KA_Turn_Table_P`*/ 
CREATE TRIGGER `KA_Turn_Table_P_constraints` 
BEFORE INSERT ON `KA_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `KA_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_KA", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_KA", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `KL_Turn_Table_P`*/ 
CREATE TRIGGER `KL_Turn_Table_P_constraints` 
BEFORE INSERT ON `KL_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `KL_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_KL", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_KL", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `MP_Turn_Table_P`*/ 
CREATE TRIGGER `MP_Turn_Table_P_constraints` 
BEFORE INSERT ON `MP_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `MP_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_MP", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_MP", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `MH_Turn_Table_P`*/ 
CREATE TRIGGER `MH_Turn_Table_P_constraints` 
BEFORE INSERT ON `MH_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `MH_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_MH", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_MH", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `NE_Turn_Table_P`*/ 
CREATE TRIGGER `NE_Turn_Table_P_constraints` 
BEFORE INSERT ON `NE_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `NE_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_NE", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_NE", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `OR_Turn_Table_P`*/ 
CREATE TRIGGER `OR_Turn_Table_P_constraints` 
BEFORE INSERT ON `OR_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `OR_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_OR", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_OR", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `PY_Turn_Table_P`*/ 
CREATE TRIGGER `PY_Turn_Table_P_constraints` 
BEFORE INSERT ON `PY_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `PY_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_PY", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_PY", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `PB_Turn_Table_P`*/ 
CREATE TRIGGER `PB_Turn_Table_P_constraints` 
BEFORE INSERT ON `PB_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `PB_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_PB", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_PB", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `RJ_Turn_Table_P`*/ 
CREATE TRIGGER `RJ_Turn_Table_P_constraints` 
BEFORE INSERT ON `RJ_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `RJ_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_RJ", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_RJ", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `WB_Turn_Table_P`*/ 
CREATE TRIGGER `WB_Turn_Table_P_constraints` 
BEFORE INSERT ON `WB_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `WB_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_WB", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_WB", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `TN_Turn_Table_P`*/ 
CREATE TRIGGER `TN_Turn_Table_P_constraints` 
BEFORE INSERT ON `TN_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `TN_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_TN", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_TN", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `UP_Turn_Table_P`*/ 
CREATE TRIGGER `UP_Turn_Table_P_constraints` 
BEFORE INSERT ON `UP_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `UP_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_UP", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_UP", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `UA_Turn_Table_P`*/ 
CREATE TRIGGER `UA_Turn_Table_P_constraints` 
BEFORE INSERT ON `UA_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `UA_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_UA", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_UA", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `DD_Turn_Table_P`*/ 
CREATE TRIGGER `DD_Turn_Table_P_constraints` 
BEFORE INSERT ON `DD_Turn_Table_P` FOR EACH ROW 
BEGIN  
	IF(NEW.TT_Id =0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "TT_Id", NEW.TT_Id, "Cannot be Blank.", 1);
	END IF;
		IF(NEW.FrmEdgeId = NEW.ToEdgeId)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, " FrmEdgeId = ToEdgeId ", 1);
	END IF;
	IF(NEW.FrmEdgeId = 0 or NEW.ToEdgeId = 0 or NEW.Junction = 0)
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id, "FrmEdgeId", NEW.FrmEdgeId, "FrmEdgeId/ToEdgeId/Junction = 0.", 1);
	END IF;
		
	IF( NEW.FrmEdgeId <> 0 AND NEW.ToEdgeId <> 0)
	THEN
		IF( SELECT COUNT(*) FROM `DD_Turn_Table_P` WHERE FrmEdgeId = NEW.FrmEdgeId and ToEdgeId = NEW.ToEdgeId )
       	THEN
       		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "ToedgeId", NEW.ToEdgeId, "FrmEdgeId and ToEdgeId Pair is Duplicate.", 1);
       	END IF;
	END IF;	

	IF(NEW.nStt_Nme <> '' OR NEW.nStt_Nme <> '0') 
	THEN
		IF ((SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Nme = NEW.nStt_Nme) = 0)
		THEN 
			INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Not found in National_State_Nav_R.", 2);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id , "nStt_Nme", NEW.nStt_Nme, "Cannot be blank or Zero.", 2);
	END IF;
	IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.FrmEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))) )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "FrmEdgeId/Junction combination not found in City_Roads_DD", 1);
	ELSE
		IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE (Edge_Id=NEW.ToEdgeId AND (From_Junction = NEW.Junction OR To_Junction = NEW.Junction))))
		THEN
			INSERT ERROR_MSG VALUES("Turn_Table_P", New.TT_Id , "Junction", NEW.Junction, "ToEdgeId/Junction combination not found in City_Roads_DD", 1);	
		END IF;
	END IF;			
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction)=0 )
	THEN
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Junction", NEW.Junction, "Junction not found in City_Jn_P.", 1);
	END IF;
	IF((select instr(NEW.Source,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF(NEW.Source = '0') 
	THEN 
		INSERT ERROR_MSG VALUES("Turn_Table_P", NEW.TT_Id, "Source", NEW.Source, "CONTAINS 0", 1);
	END IF;
END$$;

/*Trigger structure for table `City_Loc_EdgeId_P` */
CREATE TRIGGER `City_Loc_EdgeId_P_CONSTRAINTS` 
BEFORE INSERT ON `City_Loc_EdgeId_P` FOR EACH ROW 
BEGIN
	DECLARE cnStt_Nme char(50);
	Set cnStt_Nme = NEW.nStt_Nme;
	IF(cnStt_Nme <> '')
	THEN
		CASE cnStt_Nme
		WHEN "Andhra Pradesh"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme)) 
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AP", 1);
			END IF;	
		WHEN "Assam"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
			END IF;	
		WHEN "Arunachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Bihar"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_BR", 1);
				END IF;	
		WHEN "Chandigarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CH", 1);
				END IF;	
		WHEN "Chhattisgarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CG", 1);
				END IF;	
		WHEN "Daman & Diu"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme)) 
			THEN
				INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DD", 1);
			END IF;	
		WHEN "Dadra & Nagar Haveli"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DN", 1);
				END IF;	
		WHEN "Delhi"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DL", 1);
				END IF;
		WHEN "Goa"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GA", 1);
				END IF;
		WHEN "Haryana"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HR", 1);
				END IF;
		WHEN "Himachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HP", 1);
				END IF;			
		WHEN "Jammu & Kashmir"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JK", 1);
				END IF;
		WHEN "Jharkhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JH", 1);
				END IF;
		WHEN "Karnataka"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KA", 1);
				END IF;
		WHEN "Kerala"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KL", 1);
				END IF;
		WHEN "Madhya Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MP", 1);
				END IF;
		WHEN "Mizoram"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Meghalaya"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Manipur"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Nagaland"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Tripura"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Maharashtra"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MH", 1);
				END IF;
		WHEN "Odisha"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_OR", 1);
				END IF;	
		WHEN "Punjab"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PB", 1);
				END IF;	
		WHEN "Rajasthan"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_RJ", 1);
				END IF;	
		WHEN "Uttarakhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UA", 1);
				END IF;	
		WHEN "Uttar Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UP", 1);
				END IF;	
		WHEN "West Bengal"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;	
		WHEN "Sikkim"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;
		WHEN "Gujarat"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GJ", 1);
				END IF;	
		WHEN "Tamil Nadu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_TN", 1);
				END IF;	
		WHEN "Puducherry"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PY", 1);
				END IF;	
		WHEN "Andaman & Nicobar Islands"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AN", 1);
				END IF;	
		WHEN "Lakshadweep"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_LD", 1);
				END IF;	
		ELSE 
			INSERT ERROR_MSG VALUES("City_Loc_EdgeId_P", New.Loc_Id , "nStt_Nme", NEW.nStt_Nme, "Road Table for this state not found",1);
		END CASE;
	END IF;
END$$;

/*Trigger structure for table `City_Subl_EdgeId_P` */
CREATE TRIGGER `City_Subl_EdgeId_P_CONSTRAINTS` 
BEFORE INSERT ON `City_Subl_EdgeId_P` FOR EACH ROW 
BEGIN
	DECLARE cnStt_Nme char(50);
	Set cnStt_Nme = NEW.nStt_Nme;
	IF(cnStt_Nme <> '')
	THEN
		CASE cnStt_Nme
		WHEN "Andhra Pradesh"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme)) 
			THEN
				INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Junction", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AP", 1);
			END IF;	
			WHEN "Assam"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
			WHEN "Arunachal Pradesh"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
			WHEN "Bihar"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_BR", 1);
				END IF;	
			WHEN "Chandigarh"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CH", 1);
				END IF;	
			WHEN "Chhattisgarh"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CG", 1);
				END IF;
			WHEN "Daman & Diu"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DD", 1);
				END IF;					
			WHEN "Dadra & Nagar Haveli"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DN", 1);
				END IF;	
			WHEN "Delhi"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DL", 1);
				END IF;
			WHEN "Goa"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GA", 1);
				END IF;
			WHEN "Haryana"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HR", 1);
				END IF;
		WHEN "Himachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HP", 1);
				END IF;					
			WHEN "Jammu & Kashmir"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JK", 1);
				END IF;
			WHEN "Jharkhand"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JH", 1);
				END IF;
			WHEN "Karnataka"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KA", 1);
				END IF;
			WHEN "Kerala"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KL", 1);
				END IF;
			WHEN "Madhya Pradesh"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MP", 1);
				END IF;
			WHEN "Mizoram"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
			WHEN "Meghalaya"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
			WHEN "Manipur"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
			WHEN "Nagaland"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
			WHEN "Tripura"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
			WHEN "Maharashtra"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MH", 1);
				END IF;
			WHEN "Odisha"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_OR", 1);
				END IF;	
			WHEN "Punjab"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PB", 1);
				END IF;	
			WHEN "Rajasthan"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_RJ", 1);
				END IF;	
			WHEN "Uttarakhand"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UA", 1);
				END IF;	
			WHEN "Uttar Pradesh"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UP", 1);
				END IF;	
			WHEN "West Bengal"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;	
			WHEN "Sikkim"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;
			WHEN "Gujarat"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GJ", 1);
				END IF;	
			WHEN "Tamil Nadu"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_TN", 1);
				END IF;	
			WHEN "Puducherry"
			THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PY", 1);
				END IF;
		WHEN "Andaman & Nicobar Islands"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
			THEN
				INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AN", 1);
			END IF;	
		WHEN "Lakshadweep"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_LD", 1);
				END IF;				
		ELSE 
				INSERT ERROR_MSG VALUES("City_Subl_EdgeId_P", New.Subl_Id , "nStt_Nme", NEW.nStt_Nme, "Road Table for this state not found",1);
		END CASE;
		END IF;
END$$;

/*Trigger structure for table `National_Vill_EdgeId_P` */
CREATE TRIGGER `National_Vill_EdgeId_P_CONSTRAINTS` 
BEFORE INSERT ON `National_Vill_EdgeId_P` FOR EACH ROW 
BEGIN
	DECLARE cnStt_Nme char(50);
	Set cnStt_Nme = NEW.nStt_Nme;
	IF(cnStt_Nme <> '')
	THEN
		CASE cnStt_Nme
		WHEN "Andhra Pradesh"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme)) 
			THEN
				INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AP", 1);
			END IF;	
		WHEN "Assam"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
			THEN
				INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
			END IF;	
		WHEN "Arunachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Bihar"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_BR", 1);
				END IF;	
		WHEN "Chandigarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CH", 1);
				END IF;	
		WHEN "Chhattisgarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CG", 1);
				END IF;	
		WHEN "Daman & Diu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DD", 1);
				END IF;	
		WHEN "Dadra & Nagar Haveli"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DN", 1);
				END IF;	
		WHEN "Delhi"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DL", 1);
				END IF;
		WHEN "Goa"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GA", 1);
				END IF;
		WHEN "Haryana"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HR", 1);
				END IF;
		WHEN "Himachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HP", 1);
				END IF;			
		WHEN "Jammu & Kashmir"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JK", 1);
				END IF;
		WHEN "Jharkhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JH", 1);
				END IF;
		WHEN "Karnataka"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KA", 1);
				END IF;
		WHEN "Kerala"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KL", 1);
				END IF;
		WHEN "Madhya Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MP", 1);
				END IF;
		WHEN "Mizoram"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Meghalaya"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Manipur"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Nagaland"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Tripura"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Maharashtra"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MH", 1);
				END IF;
		WHEN "Odisha"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_OR", 1);
				END IF;	
		WHEN "Punjab"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PB", 1);
				END IF;	
		WHEN "Rajasthan"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_RJ", 1);
				END IF;	
		WHEN "Uttarakhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UA", 1);
				END IF;	
		WHEN "Uttar Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UP", 1);
				END IF;	
		WHEN "West Bengal"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;	
		WHEN "Sikkim"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;
		WHEN "Gujarat"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GJ", 1);
				END IF;	
		WHEN "Tamil Nadu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_TN", 1);
				END IF;	
		WHEN "Puducherry"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PY", 1);
				END IF;	
		WHEN "Andaman & Nicobar Islands"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AN", 1);
				END IF;	
		WHEN "Lakshadweep"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_LD", 1);
				END IF;
		ELSE 
			INSERT ERROR_MSG VALUES("National_Vill_EdgeId_P", New.Vlg_id , "nStt_Nme", NEW.nStt_Nme, "Road Table for this state not found",1);
		END CASE;
	END IF;
END$$;

/*Trigger structure for table `City_Centre_EdgeId_P` */
CREATE TRIGGER `City_Centre_EdgeId_P_CONSTRAINTS` 
BEFORE INSERT ON `City_Centre_EdgeId_P` FOR EACH ROW 
BEGIN
	DECLARE cnStt_Nme char(50);
	Set cnStt_Nme = NEW.nStt_Nme;
	IF(cnStt_Nme <> '')
	THEN
		CASE cnStt_Nme
		WHEN "Andhra Pradesh"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme)) 
			THEN
				INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AP", 1);
			END IF;	
		WHEN "Assam"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
			THEN
				INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
			END IF;	
		WHEN "Arunachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Bihar"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_BR", 1);
				END IF;	
		WHEN "Chandigarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CH", 1);
				END IF;	
		WHEN "Chhattisgarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CG", 1);
				END IF;	
		WHEN "Daman & Diu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DD", 1);
				END IF;	
		WHEN "Dadra & Nagar Haveli"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DN", 1);
				END IF;	
		WHEN "Delhi"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DL", 1);
				END IF;
		WHEN "Goa"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GA", 1);
				END IF;
		WHEN "Haryana"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HR", 1);
				END IF;
		WHEN "Himachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HP", 1);
				END IF;			
		WHEN "Jammu & Kashmir"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JK", 1);
				END IF;
		WHEN "Jharkhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JH", 1);
				END IF;
		WHEN "Karnataka"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KA", 1);
				END IF;
		WHEN "Kerala"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KL", 1);
				END IF;
		WHEN "Madhya Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MP", 1);
				END IF;
		WHEN "Mizoram"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Meghalaya"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Manipur"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Nagaland"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Tripura"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Maharashtra"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MH", 1);
				END IF;
		WHEN "Odisha"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_OR", 1);
				END IF;	
		WHEN "Punjab"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PB", 1);
				END IF;	
		WHEN "Rajasthan"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_RJ", 1);
				END IF;	
		WHEN "Uttarakhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UA", 1);
				END IF;	
		WHEN "Uttar Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UP", 1);
				END IF;	
		WHEN "West Bengal"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;	
		WHEN "Sikkim"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;
		WHEN "Gujarat"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GJ", 1);
				END IF;	
		WHEN "Tamil Nadu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_TN", 1);
				END IF;	
		WHEN "Puducherry"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PY", 1);
				END IF;	
		WHEN "Andaman & Nicobar Islands"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AN", 1);
				END IF;	
		WHEN "Lakshadweep"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_LD", 1);
				END IF;
		ELSE 
			INSERT ERROR_MSG VALUES("City_Centre_EdgeId_P", New.City_Id , "nStt_Nme", NEW.nStt_Nme, "Road Table for this state not found",1);
		END CASE;
	END IF;
END$$;

CREATE TRIGGER `expectionValues_CONSTRAINTS` 
BEFORE INSERT ON `expectionValues` FOR EACH ROW 
BEGIN
	update `error_msg` set Table_Name=concat(Table_Name,"_Exception"),level="1" where Row_Id=New.Id and trim(EXP_VALUE) = New.ExpValue;
END$$;


CREATE TRIGGER `Date_Time_CONSTRAINTS` 
BEFORE INSERT ON `Date_Time` FOR EACH ROW 
BEGIN
	DECLARE cnStt_Nme char(50);
	Set cnStt_Nme = NEW.nStt_Nme;
	IF(cnStt_Nme <> '')
	THEN
		CASE cnStt_Nme
		WHEN "Andhra Pradesh"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme)) 
			THEN
				INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AP", 1);
			END IF;	
		WHEN "Assam"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
			THEN
				INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
			END IF;	
		WHEN "Arunachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Bihar"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_BR", 1);
				END IF;	
		WHEN "Chandigarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CH", 1);
				END IF;	
		WHEN "Chhattisgarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_CG", 1);
				END IF;	
		WHEN "Daman & Diu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DD", 1);
				END IF;					
		WHEN "Dadra & Nagar Haveli"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DN", 1);
				END IF;	
		WHEN "Delhi"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_DL", 1);
				END IF;
		WHEN "Goa"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GA", 1);
				END IF;
		WHEN "Haryana"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HR", 1);
				END IF;
		WHEN "Himachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_HP", 1);
				END IF;			
		WHEN "Jammu & Kashmir"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JK", 1);
				END IF;
		WHEN "Jharkhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_JH", 1);
				END IF;
		WHEN "Karnataka"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KA", 1);
				END IF;
		WHEN "Kerala"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_KL", 1);
				END IF;
		WHEN "Madhya Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MP", 1);
				END IF;
		WHEN "Mizoram"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Meghalaya"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Manipur"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Nagaland"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Tripura"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Maharashtra"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_MH", 1);
				END IF;
		WHEN "Odisha"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_OR", 1);
				END IF;	
		WHEN "Punjab"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PB", 1);
				END IF;	
		WHEN "Rajasthan"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_RJ", 1);
				END IF;	
		WHEN "Uttarakhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UA", 1);
				END IF;	
		WHEN "Uttar Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_UP", 1);
				END IF;	
		WHEN "West Bengal"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;	
		WHEN "Sikkim"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_WB", 1);
				END IF;
		WHEN "Gujarat"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_GJ", 1);
				END IF;	
		WHEN "Tamil Nadu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_TN", 1);
				END IF;	
		WHEN "Puducherry"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_PY", 1);
				END IF;	
		WHEN "Andaman & Nicobar Islands"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_AN", 1);
				END IF;	
		WHEN "Lakshadweep"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.Edge_Id and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Edge_Id, "EdgeId/nStt_Nme not found in City_Roads_LD", 1);
				END IF;
		ELSE 
			INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "nStt_Nme", NEW.nStt_Nme, "Road Table for this state not found",1);
		END CASE;
	END IF;
	IF(NEW.To_Edge <> '')
	THEN
		INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge should be blank", 1);
	ELSE
		IF(cnStt_Nme <> '')
	THEN
		CASE cnStt_Nme
		WHEN "Andhra Pradesh"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme)) 
			THEN
				INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_AP", 1);
			END IF;	
		WHEN "Assam"
		THEN 
			IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
			THEN
				INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_NE", 1);
			END IF;	
		WHEN "Arunachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Bihar"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_BR", 1);
				END IF;	
		WHEN "Chandigarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_CH", 1);
				END IF;	
		WHEN "Chhattisgarh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_CG", 1);
				END IF;	
		WHEN "Daman & Diu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_DD", 1);
				END IF;	
		WHEN "Dadra & Nagar Haveli"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_DN", 1);
				END IF;	
		WHEN "Delhi"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_DL", 1);
				END IF;
		WHEN "Goa"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_GA", 1);
				END IF;
		WHEN "Haryana"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_HR", 1);
				END IF;
		WHEN "Himachal Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_HP", 1);
				END IF;			
		WHEN "Jammu & Kashmir"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_JK", 1);
				END IF;
		WHEN "Jharkhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_JH", 1);
				END IF;
		WHEN "Karnataka"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_KA", 1);
				END IF;
		WHEN "Kerala"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_KL", 1);
				END IF;
		WHEN "Madhya Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_MP", 1);
				END IF;
		WHEN "Mizoram"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Meghalaya"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Manipur"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_NE", 1);
				END IF;
		WHEN "Nagaland"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Tripura"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_NE", 1);
				END IF;	
		WHEN "Maharashtra"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_MH", 1);
				END IF;
		WHEN "Odisha"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_OR", 1);
				END IF;	
		WHEN "Punjab"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_PB", 1);
				END IF;	
		WHEN "Rajasthan"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_RJ", 1);
				END IF;	
		WHEN "Uttarakhand"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_UA", 1);
				END IF;	
		WHEN "Uttar Pradesh"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_UP", 1);
				END IF;	
		WHEN "West Bengal"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_WB", 1);
				END IF;	
		WHEN "Sikkim"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_WB", 1);
				END IF;
		WHEN "Gujarat"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_GJ", 1);
				END IF;	
		WHEN "Tamil Nadu"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_TN", 1);
				END IF;	
		WHEN "Puducherry"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_PY", 1);
				END IF;	
		WHEN "Andaman & Nicobar Islands"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_AN", 1);
				END IF;	
		WHEN "Lakshadweep"
		THEN 
				IF(!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.To_Edge and nStt_Nme=cnStt_Nme))
				THEN
					INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "To_Edge", NEW.To_Edge, "To_Edge/nStt_Nme not found in City_Roads_LD", 1);
				END IF;
		ELSE 
			INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "nStt_Nme", NEW.nStt_Nme, "Road Table for this state not found",1);
		END CASE;
	END IF;
	END IF;
	IF( NEW.Type not in ('A','B','C','D','E','F','H','I','1'))
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "Type", NEW.Type, "Type can be A,B,C,D,E,F,H,I,1", 1);
    END IF;
	IF(!(SELECT COUNT(*) FROM `Condition_type` WHERE Cond_Id=NEW.Cond_Id))
	THEN
		INSERT ERROR_MSG VALUES("Date_Time", New.Edge_Id , "Edge_Id", NEW.Cond_Id, "Cond_Id not found in Condition_type ", 1);
	END IF;
	IF( NEW.Excl_Date <> 'N')/*not in ('Y','N')*/
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "Excl_Date", NEW.Excl_Date, "Excl_Date can be N", 1);
    END IF;
	IF( NEW.F_End<> 'N' )/*not in ('Y','N')*/
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "F_End", NEW.F_End, "Excl_Date can be N", 1);
    END IF;
	IF( NEW.Ref_Date <> 'YYYYYYY' )/*not in ('Y','N')*/
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "Ref_Date", NEW.Ref_Date, "Ref_Date can be YYYYYYY", 1);
    END IF;	
	IF( NEW.Type ='1' and  NEW.Exp_Date <> '' )/*not in ('Y','N')*/
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "Exp_Date", NEW.Exp_Date, "Type=1 and exp_date<> blank", 1);
    END IF;	
	IF( Select LENGTH(NEW.Str_Time) <> 4 )
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "Str_Time", NEW.Str_Time, "Str_Time length should be 4", 1);
    END IF;
	IF( Select LENGTH(NEW.End_Time) <> 4 )
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "End_Time", NEW.End_Time, "End_Time length should be 4", 1);
    END IF;
	IF( NEW.Str_Time = End_Time)
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "Str_Time/End_Time", NEW.Str_Time, "Str_Time = End_Time", 1);
    END IF;
	IF( (Select count(*) from `National_State_Gis_r`  where `Stt_Id` =  NEW.Stt_Id  AND `Stt_Nme` = NEW.Stt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme not found in GIS state", 1);
    END IF;
	IF( (Select count(*) from `National_State_Nav_r`  where `nStt_Id` =  NEW.nStt_Id  AND `nStt_Nme` = NEW.nStt_Nme )=0 )
    THEN
        INSERT ERROR_MSG VALUES("Date_Time", NEW.Edge_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme not found in GIS state", 1);
    END IF;	
END$$;


CREATE TRIGGER `Condition_type_CONSTRAINTS` 
BEFORE INSERT ON `Condition_type` FOR EACH ROW 
BEGIN
	IF ( NEW.Cond_Id =0 )
    THEN
        INSERT ERROR_MSG VALUES("Condition_type", NEW.Cond_Id, "Cond_Id", NEW.Cond_Id, "Cond_Id =0", 1);
    END IF;
	IF ( NEW.Type not in(4,5,7,8))
    THEN
        INSERT ERROR_MSG VALUES("Condition_type", NEW.Cond_Id, "Type", NEW.Type, "Type <> 4,5,7,8 ", 1);
    END IF;
	IF ( NEW.Type =4 and NEW.Value not in ("1","2","3") )
    THEN
        INSERT ERROR_MSG VALUES("Condition_type", NEW.Cond_Id, "VALUE", NEW.Value, "Type =4, value not in 1,2,3 ", 1);
    END IF;
	IF ( NEW.Type =5 and NEW.Value not in ("1","2","3") )
    THEN
        INSERT ERROR_MSG VALUES("Condition_type", NEW.Cond_Id, "VALUE", NEW.Value, "Type =5, value not in 1,2,3 ", 1);
    END IF;
	IF ( NEW.Type =7 and NEW.Value <> "1" )
    THEN
        INSERT ERROR_MSG VALUES("Condition_type", NEW.Cond_Id, "VALUE", NEW.Value, "Type =7, value<> 1 ", 1);
    END IF;	
	IF ( NEW.Type =8 and NEW.Value <> "1" )
    THEN
        INSERT ERROR_MSG VALUES("Condition_type", NEW.Cond_Id, "VALUE", NEW.Value, "Type =8, value<> 1 ", 1);
    END IF;		
	IF ( NEW.Value not in ("1","2","3") )
    THEN
        INSERT ERROR_MSG VALUES("Condition_type", NEW.Cond_Id, "VALUE", NEW.Value, "value<> 1,2,3 ", 1);
    END IF;	
END$$;



/* Trigger for City_POI */

Create Trigger `City_POI_tpd_P_CONSTRAINTS_AP` BEFORE INSERT on `AP_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "AP_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_AP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_AP tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `AP_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,999,99", 1);
    END IF;
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_BR` BEFORE INSERT on `BR_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "BR_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_BR` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_BR`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_BR tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_BR_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `BR_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_CG` BEFORE INSERT on `CG_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "CG_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CG` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_CG`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_CG tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CG_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `CG_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_CH` BEFORE INSERT on `CH_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "CH_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CH` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_CH`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_CH tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_CH_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `CH_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_DL` BEFORE INSERT on `DL_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "DL_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DL` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_DL`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_DL tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DL_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `DL_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_DN` BEFORE INSERT on `DN_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "DN_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DN` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_DN`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_DN tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DN_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `DN_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_GA` BEFORE INSERT on `GA_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "GA_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GA` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_GA`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_GA tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GA_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `GA_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_GJ` BEFORE INSERT on `GJ_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "GJ_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GJ` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_GJ`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_GJ tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_GJ_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `GJ_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_HP` BEFORE INSERT on `HP_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "HP_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_HP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_HP tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `HP_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_HR` BEFORE INSERT on `HR_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "HR_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HR` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_HR`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_HR tables.", 1);
		END IF;
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_HR_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `HR_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		/*IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry AND Category=NEW.Cat_Dec))*/
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;		
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_JH` BEFORE INSERT on `JH_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "JH_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JH` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_JH`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_JH tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JH_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `JH_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
			IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    		
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_JK` BEFORE INSERT on `JK_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "JK_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JK` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_JK`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_JK tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_JK_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `JK_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;		
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_KA` BEFORE INSERT on `KA_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "KA_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KA` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_KA`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_KA tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KA_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `KA_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_KL` BEFORE INSERT on `KL_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "KL_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KL` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_KL`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_KL tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_KL_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `KL_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
  	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	  
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;
	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;

	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;


Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_MP` BEFORE INSERT on `MP_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "MP_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_MP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_MP tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `MP_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
  
	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;		
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_MH` BEFORE INSERT on `MH_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "MH_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MH` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_MH`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_MH tables.", 1);
		END IF;	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_MH_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `MH_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
			IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_OR` BEFORE INSERT on `OR_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "OR_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_OR` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_OR`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_OR tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_OR_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `OR_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_PB` BEFORE INSERT on `PB_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "PB_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PB` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_PB`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_PB tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PB_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `PB_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
		IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_PY` BEFORE INSERT on `PY_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "PY_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PY` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_PY`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_PY tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_PY_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `PY_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_RJ` BEFORE INSERT on `RJ_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "RJ_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_RJ` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_RJ`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_RJ tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_RJ_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `RJ_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_TN` BEFORE INSERT on `TN_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "TN_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_TN` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_TN`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_TN tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_TN_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `TN_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
 	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
  
	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;		
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_UA` BEFORE INSERT on `UA_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "UA_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UA` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_UA`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_UA tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UA_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
		
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `UA_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;	
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;


	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;	
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_NE` BEFORE INSERT on `NE_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "NE_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_NE` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_NE`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_NE tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_NE_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `NE_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_UP` BEFORE INSERT on `UP_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "UP_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UP` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_UP`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_UP tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_UP_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `UP_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_WB` BEFORE INSERT on `WB_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "WB_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_WB` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_WB`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_WB tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_WB_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `WB_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_AN` BEFORE INSERT on `AN_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "AN_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AN` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_AN`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_AN tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_AN_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `AN_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
		IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_POI_tpd_P_tpd_CONSTRAINTS_LD` BEFORE INSERT on `LD_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "LD_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_LD` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_LD`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_LD tables.", 1);
		END IF;
	
	END IF;
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_LD_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `AN_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;

	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
		IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	

	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;

	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999", 1);
    END IF;		
		IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
	IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;		
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;	
END$$;

Create Trigger `City_POI_tpd_P_CONSTRAINTS_DD` BEFORE INSERT on `DD_POI_tpd_P` 
For Each Row BEGIN    
    DECLARE Tab_Nme char(20);
	DECLARE pnStt_Nme char(50);  
	
	Set Tab_Nme = "DD_POI_tpd_P";
	Set pnStt_Nme = NEW.nStt_Nme;
	
	
	IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DD` WHERE Edge_Id=NEW.Edge_Id) AND (!(SELECT COUNT(*) FROM `City_Roads_DD`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "Edge_Id not found in City_Roads_AP tables.", 1);
		END IF;
	
	END IF;
		IF( NEW.Edge_Id <> '')
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Roads_DD_Main` WHERE Edge_Id=NEW.Edge_Id AND PubvsPvt =0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Id", NEW.Edge_Id, "For this Poi,Road's PubvsPvt=1.i.e.Poi found on Pvt road",2);
		END IF;
	END IF;	
	
	    IF((select instr(NEW.Poi_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Poplr_Nme,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_1,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_2,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	    IF((select instr(NEW.Alias_3,'  ')) >0) 
	    THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "CONTAINS DOUBLE SPACES", 1);
	    END IF;
	
	IF( NEW.Poi_Id = '' OR NEW.Poi_Id = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Cannot be Blank or Zero.", 1);
    ELSE
		IF(CHAR_LENGTH(TRIM(NEW.Poi_Id)) <> 11)
		THEN
		    INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "No of digits in Poi_Id must be 11.", 1);
	    ELSE
			IF( SELECT COUNT(*) FROM `AP_POI_tpd_P` WHERE Poi_Id = NEW.Poi_Id )
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Id", NEW.Poi_Id, "Duplicate value.", 1);
			END IF;
		END IF;
    END IF;
    
    IF (NEW.Poi_Nme = '' OR NEW.Poi_Nme = '0')
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Cannot be Blank or Zero.", 1);
    ELSE
		IF (NEW.Poplr_Nme <> '' AND (NEW.Poplr_Nme = NEW.Poi_Nme OR NEW.Poplr_Nme = NEW.Alias_1 OR 
									 NEW.Poplr_Nme = NEW.Alias_2 OR NEW.Poplr_Nme = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "Cannot be same as Poi_Nme/Alias_1/Alias_2/Alias_3", 2);
		END IF;
		
		IF (NEW.Alias_1 <> '' AND (NEW.Alias_1 = NEW.Poi_Nme OR NEW.Alias_1 = NEW.Poplr_Nme OR 
								   NEW.Alias_1 = NEW.Alias_2 OR NEW.Alias_1 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_2/Alias_3", 2);
		END IF;
		IF (NEW.Alias_2 <> '' AND (NEW.Alias_2 = NEW.Poi_Nme OR NEW.Alias_2 = NEW.Alias_1 OR 
								   NEW.Alias_2 = NEW.Poplr_Nme OR NEW.Alias_2 = NEW.Alias_3 ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_3", 2);
		END IF;
		IF (NEW.Alias_3 <> '' AND (NEW.Alias_3 = NEW.Poi_Nme OR NEW.Alias_3 = NEW.Alias_1 OR 
								   NEW.Alias_3 = NEW.Alias_2 OR NEW.Alias_3 = NEW.Poplr_Nme ))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "Cannot be same as Poi_Nme/Poplr_Nme/Alias_1/Alias_2", 2);
		END IF;
	END IF;
	
	/*IF( NEW.Ftr_Cry <> '' AND NEW.Cat_Dec <> '' ) THEN*/
	
	IF( NEW.Ftr_Cry <> '' AND NEW.Ftr_Cry <> '0')
	THEN
				IF(SELECT BINARY UPPER(NEW.Ftr_Cry) <> NEW.Ftr_Cry)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not in upper case.", 1);
		END IF;
		IF (!(SELECT COUNT(*) FROM `category` WHERE Category_Code=NEW.Ftr_Cry) AND (!(SELECT COUNT(*) FROM `category`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry not found in category table.", 1);
		END IF;
	ELSE
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Ftr_Cry", NEW.Ftr_Cry, "Ftr_Cry cannot be Blank or Zero.", 1);	
	END IF;
    	

	IF(NEW.Loc_Id = '' AND NEW.Loc_Nme <> '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id cannot be blank.", 1);
	END IF;
	
	IF(NEW.Loc_Id <> '' AND NEW.Loc_Nme = '')
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Nme cannot be blank.", 1);
	END IF;

	IF (NEW.Loc_Id <> '' AND NEW.Loc_Nme <> '' )
    THEN  
        IF (!(SELECT COUNT(*) FROM `City_Loc_R` WHERE Loc_Id=NEW.Loc_Id AND Loc_Nme=NEW.Loc_Nme AND 
													  City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
													  Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													  nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme
													  ) AND (!(SELECT COUNT(*) FROM `City_Loc_R`)=0))
        THEN
            INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Loc_Id", NEW.Loc_Id, "Loc_Id, Loc_Nme, City_Id, City_Nme, Stt_Id, Stt_Nme, nStt_Id, nStt_Nme combination not found in City_Loc_R table.", 1);
        END IF;
    ELSE
		IF( NEW.City_Nme <> '' AND NEW.City_Id <> 0)
		THEN
			IF (!(SELECT COUNT(*) FROM `City_Area_R` WHERE City_Id=NEW.City_Id AND City_Nme=NEW.City_Nme AND 
														   Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme AND
													       nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Area_R`)=0))
			THEN
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "City_Id", NEW.City_Id, "City_Nme, City_Id, Stt_Nme, Stt_Id, nStt_Id, nStt_Nme combination not found in City_Area_R table.", 1);
			END IF;
		ELSE
			IF(NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '' AND NEW.Stt_Nme <> '0' AND NEW.Stt_Id <> '0')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Gis_R` WHERE Stt_Id=NEW.Stt_Id AND Stt_Nme=NEW.Stt_Nme) AND (!(SELECT COUNT(*) FROM `National_State_Gis_R`)=0))
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Nme, Stt_Id combination not found in National_State_Gis_R .", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Stt_Id", NEW.Stt_Id, "Stt_Id/Stt_Nme cannot be blank or Zero.", 1);
			END IF;
			
			IF(NEW.nStt_Nme <> '' AND NEW.nStt_Id <> '' AND NEW.Stt_Nme <> '' AND NEW.Stt_Id <> '')
			THEN
				IF (!(SELECT COUNT(*) FROM `National_State_Nav_R` WHERE nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) )
				THEN
					INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Nme, nStt_Id combination not found in National_State_Nav_R.", 1);
				END IF;
			ELSE
				INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "nStt_Id", NEW.nStt_Id, "nStt_Id/nStt_Nme cannot be blank or Zero.", 1);	
			END IF;
		END IF; 
	END IF;
	
	IF( NEW.Dt_SrcNew <> '' AND NEW.SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcNew", NEW.Dt_SrcNew, "SrcNew cannot be blank.", 3);
	END IF;

    IF( NEW.SrcNew <> '' AND NEW.Dt_SrcNew = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcNew", NEW.SrcNew, "Dt_SrcNew cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcMvd <> '' AND NEW.SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcMvd", NEW.Dt_SrcMvd, "SrcMvd cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcMvd <> '' AND NEW.Dt_SrcMvd = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcMvd", NEW.SrcMvd, "Dt_SrcMvd cannot be blank.", 3);
	END IF;
	

	IF( NEW.Dt_SrcDat <> '' AND NEW.SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Dt_SrcDat", NEW.Dt_SrcDat, "SrcDat cannot be blank.", 3);
	END IF;
	
    IF( NEW.SrcDat <> '' AND NEW.Dt_SrcDat = '' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "SrcDat", NEW.SrcDat, "Dt_SrcDat cannot be blank.", 3);
	END IF;
	
	IF (NEW.Tel <> '' AND LEFT(NEW.Tel, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "Tel no must start with +91.", 1);
	END IF;
	IF (NEW.Tel <> '' AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Tel)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Tel", NEW.Tel, "No of digits in Tel must be 13/28/43.", 1);
	END IF;
	
	IF (NEW.Fax <> '' AND LEFT(NEW.Fax, 3 ) <> "+91" )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "Fax no must start with +91.", 1);
	END IF;
	IF (NEW.Fax <> '' AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 13 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 28 AND CHAR_LENGTH(TRIM(NEW.Fax)) <> 43)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Fax", NEW.Fax, "No of digits in Fax must be 13/28/43.", 1);
	END IF;
	
	IF(NEW.Pin <> '' AND CHAR_LENGTH(TRIM(NEW.Pin)) <> 6)
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Pin", NEW.Pin, "No of digits in Pin must be 6.", 1);
	END IF;

	IF( NEW.PIP_Id = NEW.Poi_Id )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Id", NEW.PIP_Id, "PIP_Id = Poi_Id .", 1);
	END IF;

	IF( NEW.PIP_Id <> '' AND NEW.PIP_Typ <> '1' )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "PIP_Typ", NEW.PIP_Typ,"PIP_Id <> '', PIP_Typ should be 1.", 1); 
		/* changed by sanjay*/ 
	END IF;
	
	IF( NEW.Entry_Lon = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lon", NEW.Entry_Lon, "Cannot be 0.", 1);
	END IF;

	IF( NEW.Entry_Lat = 0 )
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Entry_Lat", NEW.Entry_Lat, "Cannot be 0.", 1);
	END IF;	


	/* changed by sanjay on 23 oct 09 */ 
	IF(NEW.Addr_Id <> 0 AND NEW.Addr_City <> "")
	THEN
		IF (!(SELECT COUNT(*) FROM `City_Centre_P` WHERE City_Id = NEW.Addr_Id AND City_Nme = NEW.Addr_City AND 
													 Stt_Id = NEW.Stt_Id AND Stt_Nme = NEW.Stt_Nme AND 
													 nStt_Id=NEW.nStt_Id AND nStt_Nme=NEW.nStt_Nme) AND (!(SELECT COUNT(*) FROM `City_Centre_P`)=0))
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Addr_Id", NEW.Addr_Id, "Addr_City, Addr_Id, Stt_Nme, Stt_Id, nStt_Nme, nStt_Id combination not found in City_Centre_P.", 1);
		END IF;
	END IF;
		
		IF( NEW.Vicinity not in(0,1,2,3,4,5))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Vicinity", NEW.Vicinity, "Vicinity not in 0,1,2,3,4,5.", 1);
	END IF;
	
	IF( NEW.Sec_Sta NOT IN ('kc','kr','C','R','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta", NEW.Sec_Sta, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF (NEW.Sec_Sta_Poplr not in ('R','C','KC','KR','PC'))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Sec_Sta_Poplr", NEW.Sec_Sta_Poplr, "C,R,kc,kr,Pc or blank", 1);
	END IF;
	
	IF( NEW.Priority not in(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,99,999) )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Priority", NEW.Priority, "Priority not in 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,98,999,99", 1);
    END IF;
	IF(NEW.Alias_1 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_1", NEW.Alias_1, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_2 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_2", NEW.Alias_2, "cannot be 0", 1);
	END IF;
	IF(NEW.Alias_3 = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Alias_3", NEW.Alias_3, "cannot be 0", 1);
	END IF;
	IF(NEW.Poplr_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poplr_Nme", NEW.Poplr_Nme, "cannot be 0", 1);
	END IF;	
		IF(NEW.Address = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Address,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Address", NEW.Address, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Email<>'')
	THEN
		IF( SELECT INSTR(NEW.Email,'@') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have @", 1);
		END IF;
		IF( SELECT INSTR(NEW.Email,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Email", NEW.Email, "email should have .", 1);
		END IF;
	END IF;
	IF(NEW.Web<>'')
	THEN
		IF( SELECT INSTR(NEW.Web,'.') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have .", 1);
		END IF;
		IF( SELECT INSTR(NEW.Web,'www') = 0)
		THEN
			INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Web", NEW.Web, "Web should have www", 1);
		END IF;
	END IF;

	IF(NEW.Irr_Poi not in("IRR",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Irr_Poi", NEW.Irr_Poi, "can have blank or IRR only.", 1);
	END IF;
	IF(NEW.Edge_Side not in("L","R"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Edge_Side", NEW.Edge_Side, "can have L,R Only.", 1);
	END IF;
	IF(NEW.Imp_Poi not in("IMP","","NAT"))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Imp_Poi", NEW.Imp_Poi, "can have IMP,NAT or blank Only.", 1);
	END IF;
	IF(NEW.Poi_Lvl not in("City","National",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Poi_Lvl", NEW.Poi_Lvl, "can have blank, City or National Only.", 1);
	END IF;
	IF((Select  LENGTH(NEW.Frz_Poi) ) NOT IN (0,6))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Frz_Poi", NEW.Frz_Poi, "can have Y_YYMMDD or blank Only.", 1);
	END IF;

	IF(NEW.Brand_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.Brand_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;	
	IF(NEW.Brand_Nme = '' and New.Brand_typ <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand name blank , brand type not blank", 1);
	END IF;
	IF(NEW.Brand_typ = '' and New.Brand_Nme <> '')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Brand_Nme", NEW.Brand_Nme, "Brand type blank , brand name not blank", 1);
	END IF;
	IF(NEW.Landmark not in("Y",""))
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Landmark", NEW.Landmark, "can have Y or blank Only.", 1);
	END IF;
	IF(NEW.RwTB_Nme = '0')
	THEN
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "cannot be 0", 1);
	END IF;	
	IF((select instr(NEW.RwTB_Nme,'  ')) >0) 
	THEN 
		INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "RwTB_Nme", NEW.RwTB_Nme, "CONTAINS DOUBLE SPACES", 1);
	END IF;
	IF( NEW.Star_Rating not in('','1','2','3','4','5','7') )
    THEN
        INSERT ERROR_MSG VALUES(Tab_Nme, NEW.Poi_Id, "Star_Rating", NEW.Star_Rating, "Star_Rating not in 1,2,3,4,5,7 or blank", 1);
    END IF;
	IF (NEW.Poi_Nme = NEW.City_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = City_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Loc_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Loc_Nme", 1);
	END IF;
	IF (NEW.Poi_Nme = NEW.Stt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = Stt_Nme", 1);
	END IF;	
	IF (NEW.Poi_Nme = NEW.nStt_Nme)
	THEN
		INSERT ERROR_MSG VALUES(Tab_nme, NEW.Poi_Id, "Poi_Nme", NEW.Poi_Nme, "Poi_Nme = nStt_Nme", 1);
	END IF;
END$$;

/*.........................TRIGGERS FOR Geocode_District_HQ................................*/

CREATE TRIGGER `Geocode_District_HQ_Constarints` 
BEFORE INSERT ON `Geocode_District_HQ` FOR EACH ROW 
BEGIN
    IF( NEW.Headquarters_City_Id =0 OR NEW.Headquarters_City_Nme = '')
    THEN
        INSERT ERROR_MSG VALUES("Geocode_District_HQ", NEW.Headquarters_City_Id, "Headquarters_City_Id", NEW.Headquarters_City_Nme = '', "NEW.Headquarters_City_Nme/Headquarters_City_Id can not be zero or blank", 1);
    END IF;
	IF ((SELECT COUNT(*) FROM `National_District_R` WHERE DST_ID = NEW.DST_ID) = 0)
	THEN 
		INSERT ERROR_MSG VALUES("Geocode_District_HQ", NEW.DST_ID, "DST_ID", NEW.DST_ID, "DST_ID not found in National_District_R Table.",1);
	END IF;	
	IF ((SELECT COUNT(*) FROM `National_District_R` WHERE DST_NME = NEW.DST_NME) = 0)
	THEN 
		INSERT ERROR_MSG VALUES("Geocode_District_HQ", NEW.DST_NME, "DST_NME", NEW.DST_NME, "DST_NME not found in National_District_R Table.",1);
	END IF;		
		
END$$;


/*.........................TRIGGERS FOR ConnPnt................................*/

CREATE TRIGGER `ConnPnt_Constarints` 
BEFORE INSERT ON `ConnPts` FOR EACH ROW 
BEGIN
	IF((SELECT COUNT(*) FROM `City_Jn_P` WHERE Junction_id = NEW.Junction_ID)=0 )
    THEN
        INSERT ERROR_MSG VALUES("ConnPts", NEW.Id, "Junction_id", NEW.Junction_ID, "Junction_id not found in city_junction", 1);
        INSERT ERROR_MSG VALUES("ConnPts", NEW.Id, "Junction_id", NEW.Junction_ID, "Junction_id not found in city_junction", 1);
    END IF;		
END$$;

DELIMITER $$;





SET SQL_MODE=@OLD_SQL_MODE;
